
SMART_CAR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a40  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08002b4c  08002b4c  00003b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002bd4  08002bd4  00004068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002bd4  08002bd4  00004068  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002bd4  08002bd4  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002bd4  08002bd4  00003bd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002bd8  08002bd8  00003bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08002bdc  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001bc  20000068  08002c44  00004068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000224  08002c44  00004224  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006d8d  00000000  00000000  00004091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001569  00000000  00000000  0000ae1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006e0  00000000  00000000  0000c388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000531  00000000  00000000  0000ca68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017919  00000000  00000000  0000cf99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007fdb  00000000  00000000  000248b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083e9e  00000000  00000000  0002c88d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b072b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002234  00000000  00000000  000b0770  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000b29a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08002b34 	.word	0x08002b34

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08002b34 	.word	0x08002b34

0800014c <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (ch == '\n')
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b0a      	cmp	r3, #10
 8000158:	d106      	bne.n	8000168 <__io_putchar+0x1c>
		HAL_UART_Transmit(&huart2, (uint8_t*) "\r", 1, 0xFFFF);
 800015a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800015e:	2201      	movs	r2, #1
 8000160:	4907      	ldr	r1, [pc, #28]	@ (8000180 <__io_putchar+0x34>)
 8000162:	4808      	ldr	r0, [pc, #32]	@ (8000184 <__io_putchar+0x38>)
 8000164:	f001 fae4 	bl	8001730 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 8000168:	1d39      	adds	r1, r7, #4
 800016a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800016e:	2201      	movs	r2, #1
 8000170:	4804      	ldr	r0, [pc, #16]	@ (8000184 <__io_putchar+0x38>)
 8000172:	f001 fadd 	bl	8001730 <HAL_UART_Transmit>

	return ch;
 8000176:	687b      	ldr	r3, [r7, #4]
}
 8000178:	4618      	mov	r0, r3
 800017a:	3708      	adds	r7, #8
 800017c:	46bd      	mov	sp, r7
 800017e:	bd80      	pop	{r7, pc}
 8000180:	08002b4c 	.word	0x08002b4c
 8000184:	20000084 	.word	0x20000084

08000188 <smartcar_foward>:




void smartcar_foward ()
{
 8000188:	b580      	push	{r7, lr}
 800018a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LFF_GPIO_Port, LFF_Pin, 1);
 800018c:	2201      	movs	r2, #1
 800018e:	2108      	movs	r1, #8
 8000190:	4816      	ldr	r0, [pc, #88]	@ (80001ec <smartcar_foward+0x64>)
 8000192:	f000 fe33 	bl	8000dfc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LFB_GPIO_Port, LFB_Pin, 0);
 8000196:	2200      	movs	r2, #0
 8000198:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800019c:	4814      	ldr	r0, [pc, #80]	@ (80001f0 <smartcar_foward+0x68>)
 800019e:	f000 fe2d 	bl	8000dfc <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(RFF_GPIO_Port, RFF_Pin, 1);
 80001a2:	2201      	movs	r2, #1
 80001a4:	2120      	movs	r1, #32
 80001a6:	4811      	ldr	r0, [pc, #68]	@ (80001ec <smartcar_foward+0x64>)
 80001a8:	f000 fe28 	bl	8000dfc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RFB_GPIO_Port, RFB_Pin, 0);
 80001ac:	2200      	movs	r2, #0
 80001ae:	2110      	movs	r1, #16
 80001b0:	480e      	ldr	r0, [pc, #56]	@ (80001ec <smartcar_foward+0x64>)
 80001b2:	f000 fe23 	bl	8000dfc <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LBF_GPIO_Port, LBF_Pin, 1);
 80001b6:	2201      	movs	r2, #1
 80001b8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80001bc:	480b      	ldr	r0, [pc, #44]	@ (80001ec <smartcar_foward+0x64>)
 80001be:	f000 fe1d 	bl	8000dfc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LBB_GPIO_Port, LBB_Pin, 0);
 80001c2:	2200      	movs	r2, #0
 80001c4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80001c8:	4809      	ldr	r0, [pc, #36]	@ (80001f0 <smartcar_foward+0x68>)
 80001ca:	f000 fe17 	bl	8000dfc <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(RBF_GPIO_Port, RBF_Pin, 1);
 80001ce:	2201      	movs	r2, #1
 80001d0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80001d4:	4805      	ldr	r0, [pc, #20]	@ (80001ec <smartcar_foward+0x64>)
 80001d6:	f000 fe11 	bl	8000dfc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RBB_GPIO_Port, RBB_Pin, 0);
 80001da:	2200      	movs	r2, #0
 80001dc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80001e0:	4802      	ldr	r0, [pc, #8]	@ (80001ec <smartcar_foward+0x64>)
 80001e2:	f000 fe0b 	bl	8000dfc <HAL_GPIO_WritePin>
}
 80001e6:	bf00      	nop
 80001e8:	bd80      	pop	{r7, pc}
 80001ea:	bf00      	nop
 80001ec:	40010c00 	.word	0x40010c00
 80001f0:	40010800 	.word	0x40010800

080001f4 <smartcar_backward>:

void smartcar_backward()
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	af00      	add	r7, sp, #0
					HAL_GPIO_WritePin(LFF_GPIO_Port, LFF_Pin, 0);
 80001f8:	2200      	movs	r2, #0
 80001fa:	2108      	movs	r1, #8
 80001fc:	4816      	ldr	r0, [pc, #88]	@ (8000258 <smartcar_backward+0x64>)
 80001fe:	f000 fdfd 	bl	8000dfc <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LFB_GPIO_Port, LFB_Pin, 1);
 8000202:	2201      	movs	r2, #1
 8000204:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000208:	4814      	ldr	r0, [pc, #80]	@ (800025c <smartcar_backward+0x68>)
 800020a:	f000 fdf7 	bl	8000dfc <HAL_GPIO_WritePin>

				   HAL_GPIO_WritePin(RFF_GPIO_Port, RFF_Pin, 0);
 800020e:	2200      	movs	r2, #0
 8000210:	2120      	movs	r1, #32
 8000212:	4811      	ldr	r0, [pc, #68]	@ (8000258 <smartcar_backward+0x64>)
 8000214:	f000 fdf2 	bl	8000dfc <HAL_GPIO_WritePin>
				   HAL_GPIO_WritePin(RFB_GPIO_Port, RFB_Pin, 1);
 8000218:	2201      	movs	r2, #1
 800021a:	2110      	movs	r1, #16
 800021c:	480e      	ldr	r0, [pc, #56]	@ (8000258 <smartcar_backward+0x64>)
 800021e:	f000 fded 	bl	8000dfc <HAL_GPIO_WritePin>

				   HAL_GPIO_WritePin(LBF_GPIO_Port, LBF_Pin, 0);
 8000222:	2200      	movs	r2, #0
 8000224:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000228:	480b      	ldr	r0, [pc, #44]	@ (8000258 <smartcar_backward+0x64>)
 800022a:	f000 fde7 	bl	8000dfc <HAL_GPIO_WritePin>
				   HAL_GPIO_WritePin(LBB_GPIO_Port, LBB_Pin, 1);
 800022e:	2201      	movs	r2, #1
 8000230:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000234:	4809      	ldr	r0, [pc, #36]	@ (800025c <smartcar_backward+0x68>)
 8000236:	f000 fde1 	bl	8000dfc <HAL_GPIO_WritePin>

				   HAL_GPIO_WritePin(RBF_GPIO_Port, RBF_Pin, 0);
 800023a:	2200      	movs	r2, #0
 800023c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000240:	4805      	ldr	r0, [pc, #20]	@ (8000258 <smartcar_backward+0x64>)
 8000242:	f000 fddb 	bl	8000dfc <HAL_GPIO_WritePin>
				   HAL_GPIO_WritePin(RBB_GPIO_Port, RBB_Pin, 1);
 8000246:	2201      	movs	r2, #1
 8000248:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800024c:	4802      	ldr	r0, [pc, #8]	@ (8000258 <smartcar_backward+0x64>)
 800024e:	f000 fdd5 	bl	8000dfc <HAL_GPIO_WritePin>
}
 8000252:	bf00      	nop
 8000254:	bd80      	pop	{r7, pc}
 8000256:	bf00      	nop
 8000258:	40010c00 	.word	0x40010c00
 800025c:	40010800 	.word	0x40010800

08000260 <smartcar_stop>:



void smartcar_stop()
{
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0

				HAL_GPIO_WritePin(LFF_GPIO_Port, LFF_Pin, 0);
 8000264:	2200      	movs	r2, #0
 8000266:	2108      	movs	r1, #8
 8000268:	4816      	ldr	r0, [pc, #88]	@ (80002c4 <smartcar_stop+0x64>)
 800026a:	f000 fdc7 	bl	8000dfc <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LFB_GPIO_Port, LFB_Pin, 0);
 800026e:	2200      	movs	r2, #0
 8000270:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000274:	4814      	ldr	r0, [pc, #80]	@ (80002c8 <smartcar_stop+0x68>)
 8000276:	f000 fdc1 	bl	8000dfc <HAL_GPIO_WritePin>

			   HAL_GPIO_WritePin(RFF_GPIO_Port, RFF_Pin, 0);
 800027a:	2200      	movs	r2, #0
 800027c:	2120      	movs	r1, #32
 800027e:	4811      	ldr	r0, [pc, #68]	@ (80002c4 <smartcar_stop+0x64>)
 8000280:	f000 fdbc 	bl	8000dfc <HAL_GPIO_WritePin>
			   HAL_GPIO_WritePin(RFB_GPIO_Port, RFB_Pin, 0);
 8000284:	2200      	movs	r2, #0
 8000286:	2110      	movs	r1, #16
 8000288:	480e      	ldr	r0, [pc, #56]	@ (80002c4 <smartcar_stop+0x64>)
 800028a:	f000 fdb7 	bl	8000dfc <HAL_GPIO_WritePin>

			   HAL_GPIO_WritePin(LBF_GPIO_Port, LBF_Pin, 0);
 800028e:	2200      	movs	r2, #0
 8000290:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000294:	480b      	ldr	r0, [pc, #44]	@ (80002c4 <smartcar_stop+0x64>)
 8000296:	f000 fdb1 	bl	8000dfc <HAL_GPIO_WritePin>
			   HAL_GPIO_WritePin(LBB_GPIO_Port, LBB_Pin, 0);
 800029a:	2200      	movs	r2, #0
 800029c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80002a0:	4809      	ldr	r0, [pc, #36]	@ (80002c8 <smartcar_stop+0x68>)
 80002a2:	f000 fdab 	bl	8000dfc <HAL_GPIO_WritePin>

			   HAL_GPIO_WritePin(RBF_GPIO_Port, RBF_Pin, 0);
 80002a6:	2200      	movs	r2, #0
 80002a8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80002ac:	4805      	ldr	r0, [pc, #20]	@ (80002c4 <smartcar_stop+0x64>)
 80002ae:	f000 fda5 	bl	8000dfc <HAL_GPIO_WritePin>
			   HAL_GPIO_WritePin(RBB_GPIO_Port, RBB_Pin, 0);
 80002b2:	2200      	movs	r2, #0
 80002b4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80002b8:	4802      	ldr	r0, [pc, #8]	@ (80002c4 <smartcar_stop+0x64>)
 80002ba:	f000 fd9f 	bl	8000dfc <HAL_GPIO_WritePin>



}
 80002be:	bf00      	nop
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	40010c00 	.word	0x40010c00
 80002c8:	40010800 	.word	0x40010800

080002cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002d0:	f000 faa0 	bl	8000814 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002d4:	f000 f834 	bl	8000340 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002d8:	f000 f89e 	bl	8000418 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80002dc:	f000 f872 	bl	80003c4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN WHILE */

 while (1)
  {

	 HAL_UART_Receive(&huart2, &ch, 1, HAL_MAX_DELAY);
 80002e0:	f04f 33ff 	mov.w	r3, #4294967295
 80002e4:	2201      	movs	r2, #1
 80002e6:	4911      	ldr	r1, [pc, #68]	@ (800032c <main+0x60>)
 80002e8:	4811      	ldr	r0, [pc, #68]	@ (8000330 <main+0x64>)
 80002ea:	f001 faac 	bl	8001846 <HAL_UART_Receive>

	 printf("press key\n");
 80002ee:	4811      	ldr	r0, [pc, #68]	@ (8000334 <main+0x68>)
 80002f0:	f001 fdb4 	bl	8001e5c <puts>
	 		if (ch == 'w')
 80002f4:	4b0d      	ldr	r3, [pc, #52]	@ (800032c <main+0x60>)
 80002f6:	781b      	ldrb	r3, [r3, #0]
 80002f8:	2b77      	cmp	r3, #119	@ 0x77
 80002fa:	d105      	bne.n	8000308 <main+0x3c>
	 		{
	 			printf("Forward \n ");
 80002fc:	480e      	ldr	r0, [pc, #56]	@ (8000338 <main+0x6c>)
 80002fe:	f001 fd45 	bl	8001d8c <iprintf>
	 			smartcar_foward ();
 8000302:	f7ff ff41 	bl	8000188 <smartcar_foward>
 8000306:	e7eb      	b.n	80002e0 <main+0x14>


	 		}
	 		else if(ch=='s')
 8000308:	4b08      	ldr	r3, [pc, #32]	@ (800032c <main+0x60>)
 800030a:	781b      	ldrb	r3, [r3, #0]
 800030c:	2b73      	cmp	r3, #115	@ 0x73
 800030e:	d105      	bne.n	800031c <main+0x50>
	 		{
	 			printf("BackWard \n");
 8000310:	480a      	ldr	r0, [pc, #40]	@ (800033c <main+0x70>)
 8000312:	f001 fda3 	bl	8001e5c <puts>
	 		 	smartcar_backward();
 8000316:	f7ff ff6d 	bl	80001f4 <smartcar_backward>
 800031a:	e7e1      	b.n	80002e0 <main+0x14>

	 		}

	 		else if (ch=='q')
 800031c:	4b03      	ldr	r3, [pc, #12]	@ (800032c <main+0x60>)
 800031e:	781b      	ldrb	r3, [r3, #0]
 8000320:	2b71      	cmp	r3, #113	@ 0x71
 8000322:	d1dd      	bne.n	80002e0 <main+0x14>
	 		{
	 			smartcar_stop();
 8000324:	f7ff ff9c 	bl	8000260 <smartcar_stop>
	 HAL_UART_Receive(&huart2, &ch, 1, HAL_MAX_DELAY);
 8000328:	e7da      	b.n	80002e0 <main+0x14>
 800032a:	bf00      	nop
 800032c:	200000cc 	.word	0x200000cc
 8000330:	20000084 	.word	0x20000084
 8000334:	08002b50 	.word	0x08002b50
 8000338:	08002b5c 	.word	0x08002b5c
 800033c:	08002b68 	.word	0x08002b68

08000340 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b090      	sub	sp, #64	@ 0x40
 8000344:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000346:	f107 0318 	add.w	r3, r7, #24
 800034a:	2228      	movs	r2, #40	@ 0x28
 800034c:	2100      	movs	r1, #0
 800034e:	4618      	mov	r0, r3
 8000350:	f001 fe64 	bl	800201c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000354:	1d3b      	adds	r3, r7, #4
 8000356:	2200      	movs	r2, #0
 8000358:	601a      	str	r2, [r3, #0]
 800035a:	605a      	str	r2, [r3, #4]
 800035c:	609a      	str	r2, [r3, #8]
 800035e:	60da      	str	r2, [r3, #12]
 8000360:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000362:	2302      	movs	r3, #2
 8000364:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000366:	2301      	movs	r3, #1
 8000368:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800036a:	2310      	movs	r3, #16
 800036c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800036e:	2302      	movs	r3, #2
 8000370:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000372:	2300      	movs	r3, #0
 8000374:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000376:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 800037a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800037c:	f107 0318 	add.w	r3, r7, #24
 8000380:	4618      	mov	r0, r3
 8000382:	f000 fd75 	bl	8000e70 <HAL_RCC_OscConfig>
 8000386:	4603      	mov	r3, r0
 8000388:	2b00      	cmp	r3, #0
 800038a:	d001      	beq.n	8000390 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800038c:	f000 f8cc 	bl	8000528 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000390:	230f      	movs	r3, #15
 8000392:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000394:	2302      	movs	r3, #2
 8000396:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000398:	2300      	movs	r3, #0
 800039a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800039c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80003a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003a2:	2300      	movs	r3, #0
 80003a4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003a6:	1d3b      	adds	r3, r7, #4
 80003a8:	2102      	movs	r1, #2
 80003aa:	4618      	mov	r0, r3
 80003ac:	f000 ffe2 	bl	8001374 <HAL_RCC_ClockConfig>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d001      	beq.n	80003ba <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80003b6:	f000 f8b7 	bl	8000528 <Error_Handler>
  }
}
 80003ba:	bf00      	nop
 80003bc:	3740      	adds	r7, #64	@ 0x40
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}
	...

080003c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003c8:	4b11      	ldr	r3, [pc, #68]	@ (8000410 <MX_USART2_UART_Init+0x4c>)
 80003ca:	4a12      	ldr	r2, [pc, #72]	@ (8000414 <MX_USART2_UART_Init+0x50>)
 80003cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80003ce:	4b10      	ldr	r3, [pc, #64]	@ (8000410 <MX_USART2_UART_Init+0x4c>)
 80003d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80003d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000410 <MX_USART2_UART_Init+0x4c>)
 80003d8:	2200      	movs	r2, #0
 80003da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000410 <MX_USART2_UART_Init+0x4c>)
 80003de:	2200      	movs	r2, #0
 80003e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000410 <MX_USART2_UART_Init+0x4c>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003e8:	4b09      	ldr	r3, [pc, #36]	@ (8000410 <MX_USART2_UART_Init+0x4c>)
 80003ea:	220c      	movs	r2, #12
 80003ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003ee:	4b08      	ldr	r3, [pc, #32]	@ (8000410 <MX_USART2_UART_Init+0x4c>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003f4:	4b06      	ldr	r3, [pc, #24]	@ (8000410 <MX_USART2_UART_Init+0x4c>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003fa:	4805      	ldr	r0, [pc, #20]	@ (8000410 <MX_USART2_UART_Init+0x4c>)
 80003fc:	f001 f948 	bl	8001690 <HAL_UART_Init>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d001      	beq.n	800040a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000406:	f000 f88f 	bl	8000528 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800040a:	bf00      	nop
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	20000084 	.word	0x20000084
 8000414:	40004400 	.word	0x40004400

08000418 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b088      	sub	sp, #32
 800041c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800041e:	f107 0310 	add.w	r3, r7, #16
 8000422:	2200      	movs	r2, #0
 8000424:	601a      	str	r2, [r3, #0]
 8000426:	605a      	str	r2, [r3, #4]
 8000428:	609a      	str	r2, [r3, #8]
 800042a:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800042c:	4b39      	ldr	r3, [pc, #228]	@ (8000514 <MX_GPIO_Init+0xfc>)
 800042e:	699b      	ldr	r3, [r3, #24]
 8000430:	4a38      	ldr	r2, [pc, #224]	@ (8000514 <MX_GPIO_Init+0xfc>)
 8000432:	f043 0310 	orr.w	r3, r3, #16
 8000436:	6193      	str	r3, [r2, #24]
 8000438:	4b36      	ldr	r3, [pc, #216]	@ (8000514 <MX_GPIO_Init+0xfc>)
 800043a:	699b      	ldr	r3, [r3, #24]
 800043c:	f003 0310 	and.w	r3, r3, #16
 8000440:	60fb      	str	r3, [r7, #12]
 8000442:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000444:	4b33      	ldr	r3, [pc, #204]	@ (8000514 <MX_GPIO_Init+0xfc>)
 8000446:	699b      	ldr	r3, [r3, #24]
 8000448:	4a32      	ldr	r2, [pc, #200]	@ (8000514 <MX_GPIO_Init+0xfc>)
 800044a:	f043 0320 	orr.w	r3, r3, #32
 800044e:	6193      	str	r3, [r2, #24]
 8000450:	4b30      	ldr	r3, [pc, #192]	@ (8000514 <MX_GPIO_Init+0xfc>)
 8000452:	699b      	ldr	r3, [r3, #24]
 8000454:	f003 0320 	and.w	r3, r3, #32
 8000458:	60bb      	str	r3, [r7, #8]
 800045a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800045c:	4b2d      	ldr	r3, [pc, #180]	@ (8000514 <MX_GPIO_Init+0xfc>)
 800045e:	699b      	ldr	r3, [r3, #24]
 8000460:	4a2c      	ldr	r2, [pc, #176]	@ (8000514 <MX_GPIO_Init+0xfc>)
 8000462:	f043 0304 	orr.w	r3, r3, #4
 8000466:	6193      	str	r3, [r2, #24]
 8000468:	4b2a      	ldr	r3, [pc, #168]	@ (8000514 <MX_GPIO_Init+0xfc>)
 800046a:	699b      	ldr	r3, [r3, #24]
 800046c:	f003 0304 	and.w	r3, r3, #4
 8000470:	607b      	str	r3, [r7, #4]
 8000472:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000474:	4b27      	ldr	r3, [pc, #156]	@ (8000514 <MX_GPIO_Init+0xfc>)
 8000476:	699b      	ldr	r3, [r3, #24]
 8000478:	4a26      	ldr	r2, [pc, #152]	@ (8000514 <MX_GPIO_Init+0xfc>)
 800047a:	f043 0308 	orr.w	r3, r3, #8
 800047e:	6193      	str	r3, [r2, #24]
 8000480:	4b24      	ldr	r3, [pc, #144]	@ (8000514 <MX_GPIO_Init+0xfc>)
 8000482:	699b      	ldr	r3, [r3, #24]
 8000484:	f003 0308 	and.w	r3, r3, #8
 8000488:	603b      	str	r3, [r7, #0]
 800048a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED2_Pin|LD2_Pin|LBB_Pin|LFB_Pin, GPIO_PIN_RESET);
 800048c:	2200      	movs	r2, #0
 800048e:	f240 6121 	movw	r1, #1569	@ 0x621
 8000492:	4821      	ldr	r0, [pc, #132]	@ (8000518 <MX_GPIO_Init+0x100>)
 8000494:	f000 fcb2 	bl	8000dfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LBF_Pin|LFF_Pin|RFB_Pin|RFF_Pin
 8000498:	2200      	movs	r2, #0
 800049a:	f44f 61e7 	mov.w	r1, #1848	@ 0x738
 800049e:	481f      	ldr	r0, [pc, #124]	@ (800051c <MX_GPIO_Init+0x104>)
 80004a0:	f000 fcac 	bl	8000dfc <HAL_GPIO_WritePin>
                          |RBB_Pin|RBF_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80004a4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80004a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80004aa:	4b1d      	ldr	r3, [pc, #116]	@ (8000520 <MX_GPIO_Init+0x108>)
 80004ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ae:	2300      	movs	r3, #0
 80004b0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80004b2:	f107 0310 	add.w	r3, r7, #16
 80004b6:	4619      	mov	r1, r3
 80004b8:	481a      	ldr	r0, [pc, #104]	@ (8000524 <MX_GPIO_Init+0x10c>)
 80004ba:	f000 fb1b 	bl	8000af4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LD2_Pin LBB_Pin LFB_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LD2_Pin|LBB_Pin|LFB_Pin;
 80004be:	f240 6321 	movw	r3, #1569	@ 0x621
 80004c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004c4:	2301      	movs	r3, #1
 80004c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c8:	2300      	movs	r3, #0
 80004ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004cc:	2302      	movs	r3, #2
 80004ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004d0:	f107 0310 	add.w	r3, r7, #16
 80004d4:	4619      	mov	r1, r3
 80004d6:	4810      	ldr	r0, [pc, #64]	@ (8000518 <MX_GPIO_Init+0x100>)
 80004d8:	f000 fb0c 	bl	8000af4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LBF_Pin LFF_Pin RFB_Pin RFF_Pin
                           RBB_Pin RBF_Pin */
  GPIO_InitStruct.Pin = LBF_Pin|LFF_Pin|RFB_Pin|RFF_Pin
 80004dc:	f44f 63e7 	mov.w	r3, #1848	@ 0x738
 80004e0:	613b      	str	r3, [r7, #16]
                          |RBB_Pin|RBF_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004e2:	2301      	movs	r3, #1
 80004e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e6:	2300      	movs	r3, #0
 80004e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ea:	2302      	movs	r3, #2
 80004ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004ee:	f107 0310 	add.w	r3, r7, #16
 80004f2:	4619      	mov	r1, r3
 80004f4:	4809      	ldr	r0, [pc, #36]	@ (800051c <MX_GPIO_Init+0x104>)
 80004f6:	f000 fafd 	bl	8000af4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80004fa:	2200      	movs	r2, #0
 80004fc:	2100      	movs	r1, #0
 80004fe:	2028      	movs	r0, #40	@ 0x28
 8000500:	f000 fac1 	bl	8000a86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000504:	2028      	movs	r0, #40	@ 0x28
 8000506:	f000 fada 	bl	8000abe <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800050a:	bf00      	nop
 800050c:	3720      	adds	r7, #32
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	40021000 	.word	0x40021000
 8000518:	40010800 	.word	0x40010800
 800051c:	40010c00 	.word	0x40010c00
 8000520:	10110000 	.word	0x10110000
 8000524:	40011000 	.word	0x40011000

08000528 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800052c:	b672      	cpsid	i
}
 800052e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000530:	bf00      	nop
 8000532:	e7fd      	b.n	8000530 <Error_Handler+0x8>

08000534 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000534:	b480      	push	{r7}
 8000536:	b085      	sub	sp, #20
 8000538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800053a:	4b15      	ldr	r3, [pc, #84]	@ (8000590 <HAL_MspInit+0x5c>)
 800053c:	699b      	ldr	r3, [r3, #24]
 800053e:	4a14      	ldr	r2, [pc, #80]	@ (8000590 <HAL_MspInit+0x5c>)
 8000540:	f043 0301 	orr.w	r3, r3, #1
 8000544:	6193      	str	r3, [r2, #24]
 8000546:	4b12      	ldr	r3, [pc, #72]	@ (8000590 <HAL_MspInit+0x5c>)
 8000548:	699b      	ldr	r3, [r3, #24]
 800054a:	f003 0301 	and.w	r3, r3, #1
 800054e:	60bb      	str	r3, [r7, #8]
 8000550:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000552:	4b0f      	ldr	r3, [pc, #60]	@ (8000590 <HAL_MspInit+0x5c>)
 8000554:	69db      	ldr	r3, [r3, #28]
 8000556:	4a0e      	ldr	r2, [pc, #56]	@ (8000590 <HAL_MspInit+0x5c>)
 8000558:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800055c:	61d3      	str	r3, [r2, #28]
 800055e:	4b0c      	ldr	r3, [pc, #48]	@ (8000590 <HAL_MspInit+0x5c>)
 8000560:	69db      	ldr	r3, [r3, #28]
 8000562:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800056a:	4b0a      	ldr	r3, [pc, #40]	@ (8000594 <HAL_MspInit+0x60>)
 800056c:	685b      	ldr	r3, [r3, #4]
 800056e:	60fb      	str	r3, [r7, #12]
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000576:	60fb      	str	r3, [r7, #12]
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800057e:	60fb      	str	r3, [r7, #12]
 8000580:	4a04      	ldr	r2, [pc, #16]	@ (8000594 <HAL_MspInit+0x60>)
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000586:	bf00      	nop
 8000588:	3714      	adds	r7, #20
 800058a:	46bd      	mov	sp, r7
 800058c:	bc80      	pop	{r7}
 800058e:	4770      	bx	lr
 8000590:	40021000 	.word	0x40021000
 8000594:	40010000 	.word	0x40010000

08000598 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b088      	sub	sp, #32
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a0:	f107 0310 	add.w	r3, r7, #16
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	4a15      	ldr	r2, [pc, #84]	@ (8000608 <HAL_UART_MspInit+0x70>)
 80005b4:	4293      	cmp	r3, r2
 80005b6:	d123      	bne.n	8000600 <HAL_UART_MspInit+0x68>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80005b8:	4b14      	ldr	r3, [pc, #80]	@ (800060c <HAL_UART_MspInit+0x74>)
 80005ba:	69db      	ldr	r3, [r3, #28]
 80005bc:	4a13      	ldr	r2, [pc, #76]	@ (800060c <HAL_UART_MspInit+0x74>)
 80005be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005c2:	61d3      	str	r3, [r2, #28]
 80005c4:	4b11      	ldr	r3, [pc, #68]	@ (800060c <HAL_UART_MspInit+0x74>)
 80005c6:	69db      	ldr	r3, [r3, #28]
 80005c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80005cc:	60fb      	str	r3, [r7, #12]
 80005ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d0:	4b0e      	ldr	r3, [pc, #56]	@ (800060c <HAL_UART_MspInit+0x74>)
 80005d2:	699b      	ldr	r3, [r3, #24]
 80005d4:	4a0d      	ldr	r2, [pc, #52]	@ (800060c <HAL_UART_MspInit+0x74>)
 80005d6:	f043 0304 	orr.w	r3, r3, #4
 80005da:	6193      	str	r3, [r2, #24]
 80005dc:	4b0b      	ldr	r3, [pc, #44]	@ (800060c <HAL_UART_MspInit+0x74>)
 80005de:	699b      	ldr	r3, [r3, #24]
 80005e0:	f003 0304 	and.w	r3, r3, #4
 80005e4:	60bb      	str	r3, [r7, #8]
 80005e6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80005e8:	230c      	movs	r3, #12
 80005ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ec:	2302      	movs	r3, #2
 80005ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f0:	2302      	movs	r3, #2
 80005f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f4:	f107 0310 	add.w	r3, r7, #16
 80005f8:	4619      	mov	r1, r3
 80005fa:	4805      	ldr	r0, [pc, #20]	@ (8000610 <HAL_UART_MspInit+0x78>)
 80005fc:	f000 fa7a 	bl	8000af4 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000600:	bf00      	nop
 8000602:	3720      	adds	r7, #32
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	40004400 	.word	0x40004400
 800060c:	40021000 	.word	0x40021000
 8000610:	40010800 	.word	0x40010800

08000614 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000618:	bf00      	nop
 800061a:	e7fd      	b.n	8000618 <NMI_Handler+0x4>

0800061c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000620:	bf00      	nop
 8000622:	e7fd      	b.n	8000620 <HardFault_Handler+0x4>

08000624 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000628:	bf00      	nop
 800062a:	e7fd      	b.n	8000628 <MemManage_Handler+0x4>

0800062c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000630:	bf00      	nop
 8000632:	e7fd      	b.n	8000630 <BusFault_Handler+0x4>

08000634 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000638:	bf00      	nop
 800063a:	e7fd      	b.n	8000638 <UsageFault_Handler+0x4>

0800063c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000640:	bf00      	nop
 8000642:	46bd      	mov	sp, r7
 8000644:	bc80      	pop	{r7}
 8000646:	4770      	bx	lr

08000648 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800064c:	bf00      	nop
 800064e:	46bd      	mov	sp, r7
 8000650:	bc80      	pop	{r7}
 8000652:	4770      	bx	lr

08000654 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000658:	bf00      	nop
 800065a:	46bd      	mov	sp, r7
 800065c:	bc80      	pop	{r7}
 800065e:	4770      	bx	lr

08000660 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000664:	f000 f91c 	bl	80008a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000668:	bf00      	nop
 800066a:	bd80      	pop	{r7, pc}

0800066c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000670:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000674:	f000 fbda 	bl	8000e2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000678:	bf00      	nop
 800067a:	bd80      	pop	{r7, pc}

0800067c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b086      	sub	sp, #24
 8000680:	af00      	add	r7, sp, #0
 8000682:	60f8      	str	r0, [r7, #12]
 8000684:	60b9      	str	r1, [r7, #8]
 8000686:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000688:	2300      	movs	r3, #0
 800068a:	617b      	str	r3, [r7, #20]
 800068c:	e00a      	b.n	80006a4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800068e:	f3af 8000 	nop.w
 8000692:	4601      	mov	r1, r0
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	1c5a      	adds	r2, r3, #1
 8000698:	60ba      	str	r2, [r7, #8]
 800069a:	b2ca      	uxtb	r2, r1
 800069c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800069e:	697b      	ldr	r3, [r7, #20]
 80006a0:	3301      	adds	r3, #1
 80006a2:	617b      	str	r3, [r7, #20]
 80006a4:	697a      	ldr	r2, [r7, #20]
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	429a      	cmp	r2, r3
 80006aa:	dbf0      	blt.n	800068e <_read+0x12>
  }

  return len;
 80006ac:	687b      	ldr	r3, [r7, #4]
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	3718      	adds	r7, #24
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}

080006b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80006b6:	b580      	push	{r7, lr}
 80006b8:	b086      	sub	sp, #24
 80006ba:	af00      	add	r7, sp, #0
 80006bc:	60f8      	str	r0, [r7, #12]
 80006be:	60b9      	str	r1, [r7, #8]
 80006c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006c2:	2300      	movs	r3, #0
 80006c4:	617b      	str	r3, [r7, #20]
 80006c6:	e009      	b.n	80006dc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80006c8:	68bb      	ldr	r3, [r7, #8]
 80006ca:	1c5a      	adds	r2, r3, #1
 80006cc:	60ba      	str	r2, [r7, #8]
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	4618      	mov	r0, r3
 80006d2:	f7ff fd3b 	bl	800014c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006d6:	697b      	ldr	r3, [r7, #20]
 80006d8:	3301      	adds	r3, #1
 80006da:	617b      	str	r3, [r7, #20]
 80006dc:	697a      	ldr	r2, [r7, #20]
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	429a      	cmp	r2, r3
 80006e2:	dbf1      	blt.n	80006c8 <_write+0x12>
  }
  return len;
 80006e4:	687b      	ldr	r3, [r7, #4]
}
 80006e6:	4618      	mov	r0, r3
 80006e8:	3718      	adds	r7, #24
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}

080006ee <_close>:

int _close(int file)
{
 80006ee:	b480      	push	{r7}
 80006f0:	b083      	sub	sp, #12
 80006f2:	af00      	add	r7, sp, #0
 80006f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80006f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	370c      	adds	r7, #12
 80006fe:	46bd      	mov	sp, r7
 8000700:	bc80      	pop	{r7}
 8000702:	4770      	bx	lr

08000704 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000714:	605a      	str	r2, [r3, #4]
  return 0;
 8000716:	2300      	movs	r3, #0
}
 8000718:	4618      	mov	r0, r3
 800071a:	370c      	adds	r7, #12
 800071c:	46bd      	mov	sp, r7
 800071e:	bc80      	pop	{r7}
 8000720:	4770      	bx	lr

08000722 <_isatty>:

int _isatty(int file)
{
 8000722:	b480      	push	{r7}
 8000724:	b083      	sub	sp, #12
 8000726:	af00      	add	r7, sp, #0
 8000728:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800072a:	2301      	movs	r3, #1
}
 800072c:	4618      	mov	r0, r3
 800072e:	370c      	adds	r7, #12
 8000730:	46bd      	mov	sp, r7
 8000732:	bc80      	pop	{r7}
 8000734:	4770      	bx	lr

08000736 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000736:	b480      	push	{r7}
 8000738:	b085      	sub	sp, #20
 800073a:	af00      	add	r7, sp, #0
 800073c:	60f8      	str	r0, [r7, #12]
 800073e:	60b9      	str	r1, [r7, #8]
 8000740:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000742:	2300      	movs	r3, #0
}
 8000744:	4618      	mov	r0, r3
 8000746:	3714      	adds	r7, #20
 8000748:	46bd      	mov	sp, r7
 800074a:	bc80      	pop	{r7}
 800074c:	4770      	bx	lr
	...

08000750 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b086      	sub	sp, #24
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000758:	4a14      	ldr	r2, [pc, #80]	@ (80007ac <_sbrk+0x5c>)
 800075a:	4b15      	ldr	r3, [pc, #84]	@ (80007b0 <_sbrk+0x60>)
 800075c:	1ad3      	subs	r3, r2, r3
 800075e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000760:	697b      	ldr	r3, [r7, #20]
 8000762:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000764:	4b13      	ldr	r3, [pc, #76]	@ (80007b4 <_sbrk+0x64>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d102      	bne.n	8000772 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800076c:	4b11      	ldr	r3, [pc, #68]	@ (80007b4 <_sbrk+0x64>)
 800076e:	4a12      	ldr	r2, [pc, #72]	@ (80007b8 <_sbrk+0x68>)
 8000770:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000772:	4b10      	ldr	r3, [pc, #64]	@ (80007b4 <_sbrk+0x64>)
 8000774:	681a      	ldr	r2, [r3, #0]
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	4413      	add	r3, r2
 800077a:	693a      	ldr	r2, [r7, #16]
 800077c:	429a      	cmp	r2, r3
 800077e:	d207      	bcs.n	8000790 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000780:	f001 fc9a 	bl	80020b8 <__errno>
 8000784:	4603      	mov	r3, r0
 8000786:	220c      	movs	r2, #12
 8000788:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800078a:	f04f 33ff 	mov.w	r3, #4294967295
 800078e:	e009      	b.n	80007a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000790:	4b08      	ldr	r3, [pc, #32]	@ (80007b4 <_sbrk+0x64>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000796:	4b07      	ldr	r3, [pc, #28]	@ (80007b4 <_sbrk+0x64>)
 8000798:	681a      	ldr	r2, [r3, #0]
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	4413      	add	r3, r2
 800079e:	4a05      	ldr	r2, [pc, #20]	@ (80007b4 <_sbrk+0x64>)
 80007a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007a2:	68fb      	ldr	r3, [r7, #12]
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	3718      	adds	r7, #24
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	20005000 	.word	0x20005000
 80007b0:	00000400 	.word	0x00000400
 80007b4:	200000d0 	.word	0x200000d0
 80007b8:	20000228 	.word	0x20000228

080007bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007c0:	bf00      	nop
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bc80      	pop	{r7}
 80007c6:	4770      	bx	lr

080007c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007c8:	f7ff fff8 	bl	80007bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007cc:	480b      	ldr	r0, [pc, #44]	@ (80007fc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80007ce:	490c      	ldr	r1, [pc, #48]	@ (8000800 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80007d0:	4a0c      	ldr	r2, [pc, #48]	@ (8000804 <LoopFillZerobss+0x16>)
  movs r3, #0
 80007d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007d4:	e002      	b.n	80007dc <LoopCopyDataInit>

080007d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007da:	3304      	adds	r3, #4

080007dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007e0:	d3f9      	bcc.n	80007d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007e2:	4a09      	ldr	r2, [pc, #36]	@ (8000808 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80007e4:	4c09      	ldr	r4, [pc, #36]	@ (800080c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007e8:	e001      	b.n	80007ee <LoopFillZerobss>

080007ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007ec:	3204      	adds	r2, #4

080007ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007f0:	d3fb      	bcc.n	80007ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007f2:	f001 fc67 	bl	80020c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007f6:	f7ff fd69 	bl	80002cc <main>
  bx lr
 80007fa:	4770      	bx	lr
  ldr r0, =_sdata
 80007fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000800:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000804:	08002bdc 	.word	0x08002bdc
  ldr r2, =_sbss
 8000808:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800080c:	20000224 	.word	0x20000224

08000810 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000810:	e7fe      	b.n	8000810 <ADC1_2_IRQHandler>
	...

08000814 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000818:	4b08      	ldr	r3, [pc, #32]	@ (800083c <HAL_Init+0x28>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a07      	ldr	r2, [pc, #28]	@ (800083c <HAL_Init+0x28>)
 800081e:	f043 0310 	orr.w	r3, r3, #16
 8000822:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000824:	2003      	movs	r0, #3
 8000826:	f000 f923 	bl	8000a70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800082a:	2000      	movs	r0, #0
 800082c:	f000 f808 	bl	8000840 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000830:	f7ff fe80 	bl	8000534 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000834:	2300      	movs	r3, #0
}
 8000836:	4618      	mov	r0, r3
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	40022000 	.word	0x40022000

08000840 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000848:	4b12      	ldr	r3, [pc, #72]	@ (8000894 <HAL_InitTick+0x54>)
 800084a:	681a      	ldr	r2, [r3, #0]
 800084c:	4b12      	ldr	r3, [pc, #72]	@ (8000898 <HAL_InitTick+0x58>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	4619      	mov	r1, r3
 8000852:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000856:	fbb3 f3f1 	udiv	r3, r3, r1
 800085a:	fbb2 f3f3 	udiv	r3, r2, r3
 800085e:	4618      	mov	r0, r3
 8000860:	f000 f93b 	bl	8000ada <HAL_SYSTICK_Config>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800086a:	2301      	movs	r3, #1
 800086c:	e00e      	b.n	800088c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	2b0f      	cmp	r3, #15
 8000872:	d80a      	bhi.n	800088a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000874:	2200      	movs	r2, #0
 8000876:	6879      	ldr	r1, [r7, #4]
 8000878:	f04f 30ff 	mov.w	r0, #4294967295
 800087c:	f000 f903 	bl	8000a86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000880:	4a06      	ldr	r2, [pc, #24]	@ (800089c <HAL_InitTick+0x5c>)
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000886:	2300      	movs	r3, #0
 8000888:	e000      	b.n	800088c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800088a:	2301      	movs	r3, #1
}
 800088c:	4618      	mov	r0, r3
 800088e:	3708      	adds	r7, #8
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	20000000 	.word	0x20000000
 8000898:	20000008 	.word	0x20000008
 800089c:	20000004 	.word	0x20000004

080008a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008a4:	4b05      	ldr	r3, [pc, #20]	@ (80008bc <HAL_IncTick+0x1c>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	461a      	mov	r2, r3
 80008aa:	4b05      	ldr	r3, [pc, #20]	@ (80008c0 <HAL_IncTick+0x20>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	4413      	add	r3, r2
 80008b0:	4a03      	ldr	r2, [pc, #12]	@ (80008c0 <HAL_IncTick+0x20>)
 80008b2:	6013      	str	r3, [r2, #0]
}
 80008b4:	bf00      	nop
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bc80      	pop	{r7}
 80008ba:	4770      	bx	lr
 80008bc:	20000008 	.word	0x20000008
 80008c0:	200000d4 	.word	0x200000d4

080008c4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  return uwTick;
 80008c8:	4b02      	ldr	r3, [pc, #8]	@ (80008d4 <HAL_GetTick+0x10>)
 80008ca:	681b      	ldr	r3, [r3, #0]
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bc80      	pop	{r7}
 80008d2:	4770      	bx	lr
 80008d4:	200000d4 	.word	0x200000d4

080008d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008d8:	b480      	push	{r7}
 80008da:	b085      	sub	sp, #20
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	f003 0307 	and.w	r3, r3, #7
 80008e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008e8:	4b0c      	ldr	r3, [pc, #48]	@ (800091c <__NVIC_SetPriorityGrouping+0x44>)
 80008ea:	68db      	ldr	r3, [r3, #12]
 80008ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008ee:	68ba      	ldr	r2, [r7, #8]
 80008f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80008f4:	4013      	ands	r3, r2
 80008f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008fc:	68bb      	ldr	r3, [r7, #8]
 80008fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000900:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000904:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000908:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800090a:	4a04      	ldr	r2, [pc, #16]	@ (800091c <__NVIC_SetPriorityGrouping+0x44>)
 800090c:	68bb      	ldr	r3, [r7, #8]
 800090e:	60d3      	str	r3, [r2, #12]
}
 8000910:	bf00      	nop
 8000912:	3714      	adds	r7, #20
 8000914:	46bd      	mov	sp, r7
 8000916:	bc80      	pop	{r7}
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	e000ed00 	.word	0xe000ed00

08000920 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000924:	4b04      	ldr	r3, [pc, #16]	@ (8000938 <__NVIC_GetPriorityGrouping+0x18>)
 8000926:	68db      	ldr	r3, [r3, #12]
 8000928:	0a1b      	lsrs	r3, r3, #8
 800092a:	f003 0307 	and.w	r3, r3, #7
}
 800092e:	4618      	mov	r0, r3
 8000930:	46bd      	mov	sp, r7
 8000932:	bc80      	pop	{r7}
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	e000ed00 	.word	0xe000ed00

0800093c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	4603      	mov	r3, r0
 8000944:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800094a:	2b00      	cmp	r3, #0
 800094c:	db0b      	blt.n	8000966 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800094e:	79fb      	ldrb	r3, [r7, #7]
 8000950:	f003 021f 	and.w	r2, r3, #31
 8000954:	4906      	ldr	r1, [pc, #24]	@ (8000970 <__NVIC_EnableIRQ+0x34>)
 8000956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800095a:	095b      	lsrs	r3, r3, #5
 800095c:	2001      	movs	r0, #1
 800095e:	fa00 f202 	lsl.w	r2, r0, r2
 8000962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000966:	bf00      	nop
 8000968:	370c      	adds	r7, #12
 800096a:	46bd      	mov	sp, r7
 800096c:	bc80      	pop	{r7}
 800096e:	4770      	bx	lr
 8000970:	e000e100 	.word	0xe000e100

08000974 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	4603      	mov	r3, r0
 800097c:	6039      	str	r1, [r7, #0]
 800097e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000984:	2b00      	cmp	r3, #0
 8000986:	db0a      	blt.n	800099e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	b2da      	uxtb	r2, r3
 800098c:	490c      	ldr	r1, [pc, #48]	@ (80009c0 <__NVIC_SetPriority+0x4c>)
 800098e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000992:	0112      	lsls	r2, r2, #4
 8000994:	b2d2      	uxtb	r2, r2
 8000996:	440b      	add	r3, r1
 8000998:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800099c:	e00a      	b.n	80009b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	b2da      	uxtb	r2, r3
 80009a2:	4908      	ldr	r1, [pc, #32]	@ (80009c4 <__NVIC_SetPriority+0x50>)
 80009a4:	79fb      	ldrb	r3, [r7, #7]
 80009a6:	f003 030f 	and.w	r3, r3, #15
 80009aa:	3b04      	subs	r3, #4
 80009ac:	0112      	lsls	r2, r2, #4
 80009ae:	b2d2      	uxtb	r2, r2
 80009b0:	440b      	add	r3, r1
 80009b2:	761a      	strb	r2, [r3, #24]
}
 80009b4:	bf00      	nop
 80009b6:	370c      	adds	r7, #12
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bc80      	pop	{r7}
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	e000e100 	.word	0xe000e100
 80009c4:	e000ed00 	.word	0xe000ed00

080009c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b089      	sub	sp, #36	@ 0x24
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	60f8      	str	r0, [r7, #12]
 80009d0:	60b9      	str	r1, [r7, #8]
 80009d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	f003 0307 	and.w	r3, r3, #7
 80009da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009dc:	69fb      	ldr	r3, [r7, #28]
 80009de:	f1c3 0307 	rsb	r3, r3, #7
 80009e2:	2b04      	cmp	r3, #4
 80009e4:	bf28      	it	cs
 80009e6:	2304      	movcs	r3, #4
 80009e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009ea:	69fb      	ldr	r3, [r7, #28]
 80009ec:	3304      	adds	r3, #4
 80009ee:	2b06      	cmp	r3, #6
 80009f0:	d902      	bls.n	80009f8 <NVIC_EncodePriority+0x30>
 80009f2:	69fb      	ldr	r3, [r7, #28]
 80009f4:	3b03      	subs	r3, #3
 80009f6:	e000      	b.n	80009fa <NVIC_EncodePriority+0x32>
 80009f8:	2300      	movs	r3, #0
 80009fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009fc:	f04f 32ff 	mov.w	r2, #4294967295
 8000a00:	69bb      	ldr	r3, [r7, #24]
 8000a02:	fa02 f303 	lsl.w	r3, r2, r3
 8000a06:	43da      	mvns	r2, r3
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	401a      	ands	r2, r3
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a10:	f04f 31ff 	mov.w	r1, #4294967295
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	fa01 f303 	lsl.w	r3, r1, r3
 8000a1a:	43d9      	mvns	r1, r3
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a20:	4313      	orrs	r3, r2
         );
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3724      	adds	r7, #36	@ 0x24
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bc80      	pop	{r7}
 8000a2a:	4770      	bx	lr

08000a2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	3b01      	subs	r3, #1
 8000a38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a3c:	d301      	bcc.n	8000a42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a3e:	2301      	movs	r3, #1
 8000a40:	e00f      	b.n	8000a62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a42:	4a0a      	ldr	r2, [pc, #40]	@ (8000a6c <SysTick_Config+0x40>)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	3b01      	subs	r3, #1
 8000a48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a4a:	210f      	movs	r1, #15
 8000a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a50:	f7ff ff90 	bl	8000974 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a54:	4b05      	ldr	r3, [pc, #20]	@ (8000a6c <SysTick_Config+0x40>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a5a:	4b04      	ldr	r3, [pc, #16]	@ (8000a6c <SysTick_Config+0x40>)
 8000a5c:	2207      	movs	r2, #7
 8000a5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a60:	2300      	movs	r3, #0
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	e000e010 	.word	0xe000e010

08000a70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a78:	6878      	ldr	r0, [r7, #4]
 8000a7a:	f7ff ff2d 	bl	80008d8 <__NVIC_SetPriorityGrouping>
}
 8000a7e:	bf00      	nop
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}

08000a86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a86:	b580      	push	{r7, lr}
 8000a88:	b086      	sub	sp, #24
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	60b9      	str	r1, [r7, #8]
 8000a90:	607a      	str	r2, [r7, #4]
 8000a92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a94:	2300      	movs	r3, #0
 8000a96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a98:	f7ff ff42 	bl	8000920 <__NVIC_GetPriorityGrouping>
 8000a9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a9e:	687a      	ldr	r2, [r7, #4]
 8000aa0:	68b9      	ldr	r1, [r7, #8]
 8000aa2:	6978      	ldr	r0, [r7, #20]
 8000aa4:	f7ff ff90 	bl	80009c8 <NVIC_EncodePriority>
 8000aa8:	4602      	mov	r2, r0
 8000aaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aae:	4611      	mov	r1, r2
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f7ff ff5f 	bl	8000974 <__NVIC_SetPriority>
}
 8000ab6:	bf00      	nop
 8000ab8:	3718      	adds	r7, #24
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}

08000abe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000abe:	b580      	push	{r7, lr}
 8000ac0:	b082      	sub	sp, #8
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ac8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff ff35 	bl	800093c <__NVIC_EnableIRQ>
}
 8000ad2:	bf00      	nop
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ada:	b580      	push	{r7, lr}
 8000adc:	b082      	sub	sp, #8
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ae2:	6878      	ldr	r0, [r7, #4]
 8000ae4:	f7ff ffa2 	bl	8000a2c <SysTick_Config>
 8000ae8:	4603      	mov	r3, r0
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
	...

08000af4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b08b      	sub	sp, #44	@ 0x2c
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
 8000afc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000afe:	2300      	movs	r3, #0
 8000b00:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b02:	2300      	movs	r3, #0
 8000b04:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b06:	e169      	b.n	8000ddc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b08:	2201      	movs	r2, #1
 8000b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b10:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	69fa      	ldr	r2, [r7, #28]
 8000b18:	4013      	ands	r3, r2
 8000b1a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b1c:	69ba      	ldr	r2, [r7, #24]
 8000b1e:	69fb      	ldr	r3, [r7, #28]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	f040 8158 	bne.w	8000dd6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	685b      	ldr	r3, [r3, #4]
 8000b2a:	4a9a      	ldr	r2, [pc, #616]	@ (8000d94 <HAL_GPIO_Init+0x2a0>)
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	d05e      	beq.n	8000bee <HAL_GPIO_Init+0xfa>
 8000b30:	4a98      	ldr	r2, [pc, #608]	@ (8000d94 <HAL_GPIO_Init+0x2a0>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d875      	bhi.n	8000c22 <HAL_GPIO_Init+0x12e>
 8000b36:	4a98      	ldr	r2, [pc, #608]	@ (8000d98 <HAL_GPIO_Init+0x2a4>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d058      	beq.n	8000bee <HAL_GPIO_Init+0xfa>
 8000b3c:	4a96      	ldr	r2, [pc, #600]	@ (8000d98 <HAL_GPIO_Init+0x2a4>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d86f      	bhi.n	8000c22 <HAL_GPIO_Init+0x12e>
 8000b42:	4a96      	ldr	r2, [pc, #600]	@ (8000d9c <HAL_GPIO_Init+0x2a8>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d052      	beq.n	8000bee <HAL_GPIO_Init+0xfa>
 8000b48:	4a94      	ldr	r2, [pc, #592]	@ (8000d9c <HAL_GPIO_Init+0x2a8>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d869      	bhi.n	8000c22 <HAL_GPIO_Init+0x12e>
 8000b4e:	4a94      	ldr	r2, [pc, #592]	@ (8000da0 <HAL_GPIO_Init+0x2ac>)
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d04c      	beq.n	8000bee <HAL_GPIO_Init+0xfa>
 8000b54:	4a92      	ldr	r2, [pc, #584]	@ (8000da0 <HAL_GPIO_Init+0x2ac>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d863      	bhi.n	8000c22 <HAL_GPIO_Init+0x12e>
 8000b5a:	4a92      	ldr	r2, [pc, #584]	@ (8000da4 <HAL_GPIO_Init+0x2b0>)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d046      	beq.n	8000bee <HAL_GPIO_Init+0xfa>
 8000b60:	4a90      	ldr	r2, [pc, #576]	@ (8000da4 <HAL_GPIO_Init+0x2b0>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d85d      	bhi.n	8000c22 <HAL_GPIO_Init+0x12e>
 8000b66:	2b12      	cmp	r3, #18
 8000b68:	d82a      	bhi.n	8000bc0 <HAL_GPIO_Init+0xcc>
 8000b6a:	2b12      	cmp	r3, #18
 8000b6c:	d859      	bhi.n	8000c22 <HAL_GPIO_Init+0x12e>
 8000b6e:	a201      	add	r2, pc, #4	@ (adr r2, 8000b74 <HAL_GPIO_Init+0x80>)
 8000b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b74:	08000bef 	.word	0x08000bef
 8000b78:	08000bc9 	.word	0x08000bc9
 8000b7c:	08000bdb 	.word	0x08000bdb
 8000b80:	08000c1d 	.word	0x08000c1d
 8000b84:	08000c23 	.word	0x08000c23
 8000b88:	08000c23 	.word	0x08000c23
 8000b8c:	08000c23 	.word	0x08000c23
 8000b90:	08000c23 	.word	0x08000c23
 8000b94:	08000c23 	.word	0x08000c23
 8000b98:	08000c23 	.word	0x08000c23
 8000b9c:	08000c23 	.word	0x08000c23
 8000ba0:	08000c23 	.word	0x08000c23
 8000ba4:	08000c23 	.word	0x08000c23
 8000ba8:	08000c23 	.word	0x08000c23
 8000bac:	08000c23 	.word	0x08000c23
 8000bb0:	08000c23 	.word	0x08000c23
 8000bb4:	08000c23 	.word	0x08000c23
 8000bb8:	08000bd1 	.word	0x08000bd1
 8000bbc:	08000be5 	.word	0x08000be5
 8000bc0:	4a79      	ldr	r2, [pc, #484]	@ (8000da8 <HAL_GPIO_Init+0x2b4>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d013      	beq.n	8000bee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000bc6:	e02c      	b.n	8000c22 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	623b      	str	r3, [r7, #32]
          break;
 8000bce:	e029      	b.n	8000c24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	68db      	ldr	r3, [r3, #12]
 8000bd4:	3304      	adds	r3, #4
 8000bd6:	623b      	str	r3, [r7, #32]
          break;
 8000bd8:	e024      	b.n	8000c24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	68db      	ldr	r3, [r3, #12]
 8000bde:	3308      	adds	r3, #8
 8000be0:	623b      	str	r3, [r7, #32]
          break;
 8000be2:	e01f      	b.n	8000c24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	68db      	ldr	r3, [r3, #12]
 8000be8:	330c      	adds	r3, #12
 8000bea:	623b      	str	r3, [r7, #32]
          break;
 8000bec:	e01a      	b.n	8000c24 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	689b      	ldr	r3, [r3, #8]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d102      	bne.n	8000bfc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000bf6:	2304      	movs	r3, #4
 8000bf8:	623b      	str	r3, [r7, #32]
          break;
 8000bfa:	e013      	b.n	8000c24 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	689b      	ldr	r3, [r3, #8]
 8000c00:	2b01      	cmp	r3, #1
 8000c02:	d105      	bne.n	8000c10 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c04:	2308      	movs	r3, #8
 8000c06:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	69fa      	ldr	r2, [r7, #28]
 8000c0c:	611a      	str	r2, [r3, #16]
          break;
 8000c0e:	e009      	b.n	8000c24 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c10:	2308      	movs	r3, #8
 8000c12:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	69fa      	ldr	r2, [r7, #28]
 8000c18:	615a      	str	r2, [r3, #20]
          break;
 8000c1a:	e003      	b.n	8000c24 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	623b      	str	r3, [r7, #32]
          break;
 8000c20:	e000      	b.n	8000c24 <HAL_GPIO_Init+0x130>
          break;
 8000c22:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c24:	69bb      	ldr	r3, [r7, #24]
 8000c26:	2bff      	cmp	r3, #255	@ 0xff
 8000c28:	d801      	bhi.n	8000c2e <HAL_GPIO_Init+0x13a>
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	e001      	b.n	8000c32 <HAL_GPIO_Init+0x13e>
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	3304      	adds	r3, #4
 8000c32:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c34:	69bb      	ldr	r3, [r7, #24]
 8000c36:	2bff      	cmp	r3, #255	@ 0xff
 8000c38:	d802      	bhi.n	8000c40 <HAL_GPIO_Init+0x14c>
 8000c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c3c:	009b      	lsls	r3, r3, #2
 8000c3e:	e002      	b.n	8000c46 <HAL_GPIO_Init+0x152>
 8000c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c42:	3b08      	subs	r3, #8
 8000c44:	009b      	lsls	r3, r3, #2
 8000c46:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	210f      	movs	r1, #15
 8000c4e:	693b      	ldr	r3, [r7, #16]
 8000c50:	fa01 f303 	lsl.w	r3, r1, r3
 8000c54:	43db      	mvns	r3, r3
 8000c56:	401a      	ands	r2, r3
 8000c58:	6a39      	ldr	r1, [r7, #32]
 8000c5a:	693b      	ldr	r3, [r7, #16]
 8000c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c60:	431a      	orrs	r2, r3
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	f000 80b1 	beq.w	8000dd6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c74:	4b4d      	ldr	r3, [pc, #308]	@ (8000dac <HAL_GPIO_Init+0x2b8>)
 8000c76:	699b      	ldr	r3, [r3, #24]
 8000c78:	4a4c      	ldr	r2, [pc, #304]	@ (8000dac <HAL_GPIO_Init+0x2b8>)
 8000c7a:	f043 0301 	orr.w	r3, r3, #1
 8000c7e:	6193      	str	r3, [r2, #24]
 8000c80:	4b4a      	ldr	r3, [pc, #296]	@ (8000dac <HAL_GPIO_Init+0x2b8>)
 8000c82:	699b      	ldr	r3, [r3, #24]
 8000c84:	f003 0301 	and.w	r3, r3, #1
 8000c88:	60bb      	str	r3, [r7, #8]
 8000c8a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c8c:	4a48      	ldr	r2, [pc, #288]	@ (8000db0 <HAL_GPIO_Init+0x2bc>)
 8000c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c90:	089b      	lsrs	r3, r3, #2
 8000c92:	3302      	adds	r3, #2
 8000c94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c98:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c9c:	f003 0303 	and.w	r3, r3, #3
 8000ca0:	009b      	lsls	r3, r3, #2
 8000ca2:	220f      	movs	r2, #15
 8000ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca8:	43db      	mvns	r3, r3
 8000caa:	68fa      	ldr	r2, [r7, #12]
 8000cac:	4013      	ands	r3, r2
 8000cae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	4a40      	ldr	r2, [pc, #256]	@ (8000db4 <HAL_GPIO_Init+0x2c0>)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d013      	beq.n	8000ce0 <HAL_GPIO_Init+0x1ec>
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	4a3f      	ldr	r2, [pc, #252]	@ (8000db8 <HAL_GPIO_Init+0x2c4>)
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	d00d      	beq.n	8000cdc <HAL_GPIO_Init+0x1e8>
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	4a3e      	ldr	r2, [pc, #248]	@ (8000dbc <HAL_GPIO_Init+0x2c8>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d007      	beq.n	8000cd8 <HAL_GPIO_Init+0x1e4>
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	4a3d      	ldr	r2, [pc, #244]	@ (8000dc0 <HAL_GPIO_Init+0x2cc>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d101      	bne.n	8000cd4 <HAL_GPIO_Init+0x1e0>
 8000cd0:	2303      	movs	r3, #3
 8000cd2:	e006      	b.n	8000ce2 <HAL_GPIO_Init+0x1ee>
 8000cd4:	2304      	movs	r3, #4
 8000cd6:	e004      	b.n	8000ce2 <HAL_GPIO_Init+0x1ee>
 8000cd8:	2302      	movs	r3, #2
 8000cda:	e002      	b.n	8000ce2 <HAL_GPIO_Init+0x1ee>
 8000cdc:	2301      	movs	r3, #1
 8000cde:	e000      	b.n	8000ce2 <HAL_GPIO_Init+0x1ee>
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ce4:	f002 0203 	and.w	r2, r2, #3
 8000ce8:	0092      	lsls	r2, r2, #2
 8000cea:	4093      	lsls	r3, r2
 8000cec:	68fa      	ldr	r2, [r7, #12]
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000cf2:	492f      	ldr	r1, [pc, #188]	@ (8000db0 <HAL_GPIO_Init+0x2bc>)
 8000cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cf6:	089b      	lsrs	r3, r3, #2
 8000cf8:	3302      	adds	r3, #2
 8000cfa:	68fa      	ldr	r2, [r7, #12]
 8000cfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d006      	beq.n	8000d1a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d0c:	4b2d      	ldr	r3, [pc, #180]	@ (8000dc4 <HAL_GPIO_Init+0x2d0>)
 8000d0e:	689a      	ldr	r2, [r3, #8]
 8000d10:	492c      	ldr	r1, [pc, #176]	@ (8000dc4 <HAL_GPIO_Init+0x2d0>)
 8000d12:	69bb      	ldr	r3, [r7, #24]
 8000d14:	4313      	orrs	r3, r2
 8000d16:	608b      	str	r3, [r1, #8]
 8000d18:	e006      	b.n	8000d28 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d1a:	4b2a      	ldr	r3, [pc, #168]	@ (8000dc4 <HAL_GPIO_Init+0x2d0>)
 8000d1c:	689a      	ldr	r2, [r3, #8]
 8000d1e:	69bb      	ldr	r3, [r7, #24]
 8000d20:	43db      	mvns	r3, r3
 8000d22:	4928      	ldr	r1, [pc, #160]	@ (8000dc4 <HAL_GPIO_Init+0x2d0>)
 8000d24:	4013      	ands	r3, r2
 8000d26:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d006      	beq.n	8000d42 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d34:	4b23      	ldr	r3, [pc, #140]	@ (8000dc4 <HAL_GPIO_Init+0x2d0>)
 8000d36:	68da      	ldr	r2, [r3, #12]
 8000d38:	4922      	ldr	r1, [pc, #136]	@ (8000dc4 <HAL_GPIO_Init+0x2d0>)
 8000d3a:	69bb      	ldr	r3, [r7, #24]
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	60cb      	str	r3, [r1, #12]
 8000d40:	e006      	b.n	8000d50 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d42:	4b20      	ldr	r3, [pc, #128]	@ (8000dc4 <HAL_GPIO_Init+0x2d0>)
 8000d44:	68da      	ldr	r2, [r3, #12]
 8000d46:	69bb      	ldr	r3, [r7, #24]
 8000d48:	43db      	mvns	r3, r3
 8000d4a:	491e      	ldr	r1, [pc, #120]	@ (8000dc4 <HAL_GPIO_Init+0x2d0>)
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d006      	beq.n	8000d6a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d5c:	4b19      	ldr	r3, [pc, #100]	@ (8000dc4 <HAL_GPIO_Init+0x2d0>)
 8000d5e:	685a      	ldr	r2, [r3, #4]
 8000d60:	4918      	ldr	r1, [pc, #96]	@ (8000dc4 <HAL_GPIO_Init+0x2d0>)
 8000d62:	69bb      	ldr	r3, [r7, #24]
 8000d64:	4313      	orrs	r3, r2
 8000d66:	604b      	str	r3, [r1, #4]
 8000d68:	e006      	b.n	8000d78 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d6a:	4b16      	ldr	r3, [pc, #88]	@ (8000dc4 <HAL_GPIO_Init+0x2d0>)
 8000d6c:	685a      	ldr	r2, [r3, #4]
 8000d6e:	69bb      	ldr	r3, [r7, #24]
 8000d70:	43db      	mvns	r3, r3
 8000d72:	4914      	ldr	r1, [pc, #80]	@ (8000dc4 <HAL_GPIO_Init+0x2d0>)
 8000d74:	4013      	ands	r3, r2
 8000d76:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d021      	beq.n	8000dc8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d84:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc4 <HAL_GPIO_Init+0x2d0>)
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	490e      	ldr	r1, [pc, #56]	@ (8000dc4 <HAL_GPIO_Init+0x2d0>)
 8000d8a:	69bb      	ldr	r3, [r7, #24]
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	600b      	str	r3, [r1, #0]
 8000d90:	e021      	b.n	8000dd6 <HAL_GPIO_Init+0x2e2>
 8000d92:	bf00      	nop
 8000d94:	10320000 	.word	0x10320000
 8000d98:	10310000 	.word	0x10310000
 8000d9c:	10220000 	.word	0x10220000
 8000da0:	10210000 	.word	0x10210000
 8000da4:	10120000 	.word	0x10120000
 8000da8:	10110000 	.word	0x10110000
 8000dac:	40021000 	.word	0x40021000
 8000db0:	40010000 	.word	0x40010000
 8000db4:	40010800 	.word	0x40010800
 8000db8:	40010c00 	.word	0x40010c00
 8000dbc:	40011000 	.word	0x40011000
 8000dc0:	40011400 	.word	0x40011400
 8000dc4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000dc8:	4b0b      	ldr	r3, [pc, #44]	@ (8000df8 <HAL_GPIO_Init+0x304>)
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	69bb      	ldr	r3, [r7, #24]
 8000dce:	43db      	mvns	r3, r3
 8000dd0:	4909      	ldr	r1, [pc, #36]	@ (8000df8 <HAL_GPIO_Init+0x304>)
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dd8:	3301      	adds	r3, #1
 8000dda:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000de2:	fa22 f303 	lsr.w	r3, r2, r3
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	f47f ae8e 	bne.w	8000b08 <HAL_GPIO_Init+0x14>
  }
}
 8000dec:	bf00      	nop
 8000dee:	bf00      	nop
 8000df0:	372c      	adds	r7, #44	@ 0x2c
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bc80      	pop	{r7}
 8000df6:	4770      	bx	lr
 8000df8:	40010400 	.word	0x40010400

08000dfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	460b      	mov	r3, r1
 8000e06:	807b      	strh	r3, [r7, #2]
 8000e08:	4613      	mov	r3, r2
 8000e0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e0c:	787b      	ldrb	r3, [r7, #1]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d003      	beq.n	8000e1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e12:	887a      	ldrh	r2, [r7, #2]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e18:	e003      	b.n	8000e22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e1a:	887b      	ldrh	r3, [r7, #2]
 8000e1c:	041a      	lsls	r2, r3, #16
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	611a      	str	r2, [r3, #16]
}
 8000e22:	bf00      	nop
 8000e24:	370c      	adds	r7, #12
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bc80      	pop	{r7}
 8000e2a:	4770      	bx	lr

08000e2c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000e36:	4b08      	ldr	r3, [pc, #32]	@ (8000e58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e38:	695a      	ldr	r2, [r3, #20]
 8000e3a:	88fb      	ldrh	r3, [r7, #6]
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d006      	beq.n	8000e50 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000e42:	4a05      	ldr	r2, [pc, #20]	@ (8000e58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e44:	88fb      	ldrh	r3, [r7, #6]
 8000e46:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000e48:	88fb      	ldrh	r3, [r7, #6]
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f000 f806 	bl	8000e5c <HAL_GPIO_EXTI_Callback>
  }
}
 8000e50:	bf00      	nop
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	40010400 	.word	0x40010400

08000e5c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000e66:	bf00      	nop
 8000e68:	370c      	adds	r7, #12
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bc80      	pop	{r7}
 8000e6e:	4770      	bx	lr

08000e70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b086      	sub	sp, #24
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d101      	bne.n	8000e82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e272      	b.n	8001368 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f003 0301 	and.w	r3, r3, #1
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	f000 8087 	beq.w	8000f9e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e90:	4b92      	ldr	r3, [pc, #584]	@ (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f003 030c 	and.w	r3, r3, #12
 8000e98:	2b04      	cmp	r3, #4
 8000e9a:	d00c      	beq.n	8000eb6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e9c:	4b8f      	ldr	r3, [pc, #572]	@ (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f003 030c 	and.w	r3, r3, #12
 8000ea4:	2b08      	cmp	r3, #8
 8000ea6:	d112      	bne.n	8000ece <HAL_RCC_OscConfig+0x5e>
 8000ea8:	4b8c      	ldr	r3, [pc, #560]	@ (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000eb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000eb4:	d10b      	bne.n	8000ece <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000eb6:	4b89      	ldr	r3, [pc, #548]	@ (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d06c      	beq.n	8000f9c <HAL_RCC_OscConfig+0x12c>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d168      	bne.n	8000f9c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e24c      	b.n	8001368 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000ed6:	d106      	bne.n	8000ee6 <HAL_RCC_OscConfig+0x76>
 8000ed8:	4b80      	ldr	r3, [pc, #512]	@ (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a7f      	ldr	r2, [pc, #508]	@ (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000ede:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ee2:	6013      	str	r3, [r2, #0]
 8000ee4:	e02e      	b.n	8000f44 <HAL_RCC_OscConfig+0xd4>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d10c      	bne.n	8000f08 <HAL_RCC_OscConfig+0x98>
 8000eee:	4b7b      	ldr	r3, [pc, #492]	@ (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a7a      	ldr	r2, [pc, #488]	@ (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000ef4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000ef8:	6013      	str	r3, [r2, #0]
 8000efa:	4b78      	ldr	r3, [pc, #480]	@ (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a77      	ldr	r2, [pc, #476]	@ (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000f00:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f04:	6013      	str	r3, [r2, #0]
 8000f06:	e01d      	b.n	8000f44 <HAL_RCC_OscConfig+0xd4>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000f10:	d10c      	bne.n	8000f2c <HAL_RCC_OscConfig+0xbc>
 8000f12:	4b72      	ldr	r3, [pc, #456]	@ (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a71      	ldr	r2, [pc, #452]	@ (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000f18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f1c:	6013      	str	r3, [r2, #0]
 8000f1e:	4b6f      	ldr	r3, [pc, #444]	@ (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a6e      	ldr	r2, [pc, #440]	@ (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000f24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f28:	6013      	str	r3, [r2, #0]
 8000f2a:	e00b      	b.n	8000f44 <HAL_RCC_OscConfig+0xd4>
 8000f2c:	4b6b      	ldr	r3, [pc, #428]	@ (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a6a      	ldr	r2, [pc, #424]	@ (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000f32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f36:	6013      	str	r3, [r2, #0]
 8000f38:	4b68      	ldr	r3, [pc, #416]	@ (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a67      	ldr	r2, [pc, #412]	@ (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000f3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f42:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d013      	beq.n	8000f74 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f4c:	f7ff fcba 	bl	80008c4 <HAL_GetTick>
 8000f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f52:	e008      	b.n	8000f66 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f54:	f7ff fcb6 	bl	80008c4 <HAL_GetTick>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	2b64      	cmp	r3, #100	@ 0x64
 8000f60:	d901      	bls.n	8000f66 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000f62:	2303      	movs	r3, #3
 8000f64:	e200      	b.n	8001368 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f66:	4b5d      	ldr	r3, [pc, #372]	@ (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d0f0      	beq.n	8000f54 <HAL_RCC_OscConfig+0xe4>
 8000f72:	e014      	b.n	8000f9e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f74:	f7ff fca6 	bl	80008c4 <HAL_GetTick>
 8000f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f7a:	e008      	b.n	8000f8e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f7c:	f7ff fca2 	bl	80008c4 <HAL_GetTick>
 8000f80:	4602      	mov	r2, r0
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	2b64      	cmp	r3, #100	@ 0x64
 8000f88:	d901      	bls.n	8000f8e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	e1ec      	b.n	8001368 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f8e:	4b53      	ldr	r3, [pc, #332]	@ (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d1f0      	bne.n	8000f7c <HAL_RCC_OscConfig+0x10c>
 8000f9a:	e000      	b.n	8000f9e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f003 0302 	and.w	r3, r3, #2
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d063      	beq.n	8001072 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000faa:	4b4c      	ldr	r3, [pc, #304]	@ (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f003 030c 	and.w	r3, r3, #12
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d00b      	beq.n	8000fce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000fb6:	4b49      	ldr	r3, [pc, #292]	@ (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f003 030c 	and.w	r3, r3, #12
 8000fbe:	2b08      	cmp	r3, #8
 8000fc0:	d11c      	bne.n	8000ffc <HAL_RCC_OscConfig+0x18c>
 8000fc2:	4b46      	ldr	r3, [pc, #280]	@ (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d116      	bne.n	8000ffc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fce:	4b43      	ldr	r3, [pc, #268]	@ (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f003 0302 	and.w	r3, r3, #2
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d005      	beq.n	8000fe6 <HAL_RCC_OscConfig+0x176>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	691b      	ldr	r3, [r3, #16]
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d001      	beq.n	8000fe6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e1c0      	b.n	8001368 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fe6:	4b3d      	ldr	r3, [pc, #244]	@ (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	695b      	ldr	r3, [r3, #20]
 8000ff2:	00db      	lsls	r3, r3, #3
 8000ff4:	4939      	ldr	r1, [pc, #228]	@ (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ffa:	e03a      	b.n	8001072 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	691b      	ldr	r3, [r3, #16]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d020      	beq.n	8001046 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001004:	4b36      	ldr	r3, [pc, #216]	@ (80010e0 <HAL_RCC_OscConfig+0x270>)
 8001006:	2201      	movs	r2, #1
 8001008:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800100a:	f7ff fc5b 	bl	80008c4 <HAL_GetTick>
 800100e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001010:	e008      	b.n	8001024 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001012:	f7ff fc57 	bl	80008c4 <HAL_GetTick>
 8001016:	4602      	mov	r2, r0
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	1ad3      	subs	r3, r2, r3
 800101c:	2b02      	cmp	r3, #2
 800101e:	d901      	bls.n	8001024 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001020:	2303      	movs	r3, #3
 8001022:	e1a1      	b.n	8001368 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001024:	4b2d      	ldr	r3, [pc, #180]	@ (80010dc <HAL_RCC_OscConfig+0x26c>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f003 0302 	and.w	r3, r3, #2
 800102c:	2b00      	cmp	r3, #0
 800102e:	d0f0      	beq.n	8001012 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001030:	4b2a      	ldr	r3, [pc, #168]	@ (80010dc <HAL_RCC_OscConfig+0x26c>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	695b      	ldr	r3, [r3, #20]
 800103c:	00db      	lsls	r3, r3, #3
 800103e:	4927      	ldr	r1, [pc, #156]	@ (80010dc <HAL_RCC_OscConfig+0x26c>)
 8001040:	4313      	orrs	r3, r2
 8001042:	600b      	str	r3, [r1, #0]
 8001044:	e015      	b.n	8001072 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001046:	4b26      	ldr	r3, [pc, #152]	@ (80010e0 <HAL_RCC_OscConfig+0x270>)
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800104c:	f7ff fc3a 	bl	80008c4 <HAL_GetTick>
 8001050:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001052:	e008      	b.n	8001066 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001054:	f7ff fc36 	bl	80008c4 <HAL_GetTick>
 8001058:	4602      	mov	r2, r0
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	2b02      	cmp	r3, #2
 8001060:	d901      	bls.n	8001066 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001062:	2303      	movs	r3, #3
 8001064:	e180      	b.n	8001368 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001066:	4b1d      	ldr	r3, [pc, #116]	@ (80010dc <HAL_RCC_OscConfig+0x26c>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f003 0302 	and.w	r3, r3, #2
 800106e:	2b00      	cmp	r3, #0
 8001070:	d1f0      	bne.n	8001054 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f003 0308 	and.w	r3, r3, #8
 800107a:	2b00      	cmp	r3, #0
 800107c:	d03a      	beq.n	80010f4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	699b      	ldr	r3, [r3, #24]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d019      	beq.n	80010ba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001086:	4b17      	ldr	r3, [pc, #92]	@ (80010e4 <HAL_RCC_OscConfig+0x274>)
 8001088:	2201      	movs	r2, #1
 800108a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800108c:	f7ff fc1a 	bl	80008c4 <HAL_GetTick>
 8001090:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001092:	e008      	b.n	80010a6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001094:	f7ff fc16 	bl	80008c4 <HAL_GetTick>
 8001098:	4602      	mov	r2, r0
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	2b02      	cmp	r3, #2
 80010a0:	d901      	bls.n	80010a6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80010a2:	2303      	movs	r3, #3
 80010a4:	e160      	b.n	8001368 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010a6:	4b0d      	ldr	r3, [pc, #52]	@ (80010dc <HAL_RCC_OscConfig+0x26c>)
 80010a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010aa:	f003 0302 	and.w	r3, r3, #2
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d0f0      	beq.n	8001094 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80010b2:	2001      	movs	r0, #1
 80010b4:	f000 face 	bl	8001654 <RCC_Delay>
 80010b8:	e01c      	b.n	80010f4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010ba:	4b0a      	ldr	r3, [pc, #40]	@ (80010e4 <HAL_RCC_OscConfig+0x274>)
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010c0:	f7ff fc00 	bl	80008c4 <HAL_GetTick>
 80010c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010c6:	e00f      	b.n	80010e8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010c8:	f7ff fbfc 	bl	80008c4 <HAL_GetTick>
 80010cc:	4602      	mov	r2, r0
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	d908      	bls.n	80010e8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80010d6:	2303      	movs	r3, #3
 80010d8:	e146      	b.n	8001368 <HAL_RCC_OscConfig+0x4f8>
 80010da:	bf00      	nop
 80010dc:	40021000 	.word	0x40021000
 80010e0:	42420000 	.word	0x42420000
 80010e4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010e8:	4b92      	ldr	r3, [pc, #584]	@ (8001334 <HAL_RCC_OscConfig+0x4c4>)
 80010ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010ec:	f003 0302 	and.w	r3, r3, #2
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d1e9      	bne.n	80010c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f003 0304 	and.w	r3, r3, #4
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	f000 80a6 	beq.w	800124e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001102:	2300      	movs	r3, #0
 8001104:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001106:	4b8b      	ldr	r3, [pc, #556]	@ (8001334 <HAL_RCC_OscConfig+0x4c4>)
 8001108:	69db      	ldr	r3, [r3, #28]
 800110a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800110e:	2b00      	cmp	r3, #0
 8001110:	d10d      	bne.n	800112e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001112:	4b88      	ldr	r3, [pc, #544]	@ (8001334 <HAL_RCC_OscConfig+0x4c4>)
 8001114:	69db      	ldr	r3, [r3, #28]
 8001116:	4a87      	ldr	r2, [pc, #540]	@ (8001334 <HAL_RCC_OscConfig+0x4c4>)
 8001118:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800111c:	61d3      	str	r3, [r2, #28]
 800111e:	4b85      	ldr	r3, [pc, #532]	@ (8001334 <HAL_RCC_OscConfig+0x4c4>)
 8001120:	69db      	ldr	r3, [r3, #28]
 8001122:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001126:	60bb      	str	r3, [r7, #8]
 8001128:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800112a:	2301      	movs	r3, #1
 800112c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800112e:	4b82      	ldr	r3, [pc, #520]	@ (8001338 <HAL_RCC_OscConfig+0x4c8>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001136:	2b00      	cmp	r3, #0
 8001138:	d118      	bne.n	800116c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800113a:	4b7f      	ldr	r3, [pc, #508]	@ (8001338 <HAL_RCC_OscConfig+0x4c8>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a7e      	ldr	r2, [pc, #504]	@ (8001338 <HAL_RCC_OscConfig+0x4c8>)
 8001140:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001144:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001146:	f7ff fbbd 	bl	80008c4 <HAL_GetTick>
 800114a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800114c:	e008      	b.n	8001160 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800114e:	f7ff fbb9 	bl	80008c4 <HAL_GetTick>
 8001152:	4602      	mov	r2, r0
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	1ad3      	subs	r3, r2, r3
 8001158:	2b64      	cmp	r3, #100	@ 0x64
 800115a:	d901      	bls.n	8001160 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800115c:	2303      	movs	r3, #3
 800115e:	e103      	b.n	8001368 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001160:	4b75      	ldr	r3, [pc, #468]	@ (8001338 <HAL_RCC_OscConfig+0x4c8>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001168:	2b00      	cmp	r3, #0
 800116a:	d0f0      	beq.n	800114e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	2b01      	cmp	r3, #1
 8001172:	d106      	bne.n	8001182 <HAL_RCC_OscConfig+0x312>
 8001174:	4b6f      	ldr	r3, [pc, #444]	@ (8001334 <HAL_RCC_OscConfig+0x4c4>)
 8001176:	6a1b      	ldr	r3, [r3, #32]
 8001178:	4a6e      	ldr	r2, [pc, #440]	@ (8001334 <HAL_RCC_OscConfig+0x4c4>)
 800117a:	f043 0301 	orr.w	r3, r3, #1
 800117e:	6213      	str	r3, [r2, #32]
 8001180:	e02d      	b.n	80011de <HAL_RCC_OscConfig+0x36e>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	68db      	ldr	r3, [r3, #12]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d10c      	bne.n	80011a4 <HAL_RCC_OscConfig+0x334>
 800118a:	4b6a      	ldr	r3, [pc, #424]	@ (8001334 <HAL_RCC_OscConfig+0x4c4>)
 800118c:	6a1b      	ldr	r3, [r3, #32]
 800118e:	4a69      	ldr	r2, [pc, #420]	@ (8001334 <HAL_RCC_OscConfig+0x4c4>)
 8001190:	f023 0301 	bic.w	r3, r3, #1
 8001194:	6213      	str	r3, [r2, #32]
 8001196:	4b67      	ldr	r3, [pc, #412]	@ (8001334 <HAL_RCC_OscConfig+0x4c4>)
 8001198:	6a1b      	ldr	r3, [r3, #32]
 800119a:	4a66      	ldr	r2, [pc, #408]	@ (8001334 <HAL_RCC_OscConfig+0x4c4>)
 800119c:	f023 0304 	bic.w	r3, r3, #4
 80011a0:	6213      	str	r3, [r2, #32]
 80011a2:	e01c      	b.n	80011de <HAL_RCC_OscConfig+0x36e>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	2b05      	cmp	r3, #5
 80011aa:	d10c      	bne.n	80011c6 <HAL_RCC_OscConfig+0x356>
 80011ac:	4b61      	ldr	r3, [pc, #388]	@ (8001334 <HAL_RCC_OscConfig+0x4c4>)
 80011ae:	6a1b      	ldr	r3, [r3, #32]
 80011b0:	4a60      	ldr	r2, [pc, #384]	@ (8001334 <HAL_RCC_OscConfig+0x4c4>)
 80011b2:	f043 0304 	orr.w	r3, r3, #4
 80011b6:	6213      	str	r3, [r2, #32]
 80011b8:	4b5e      	ldr	r3, [pc, #376]	@ (8001334 <HAL_RCC_OscConfig+0x4c4>)
 80011ba:	6a1b      	ldr	r3, [r3, #32]
 80011bc:	4a5d      	ldr	r2, [pc, #372]	@ (8001334 <HAL_RCC_OscConfig+0x4c4>)
 80011be:	f043 0301 	orr.w	r3, r3, #1
 80011c2:	6213      	str	r3, [r2, #32]
 80011c4:	e00b      	b.n	80011de <HAL_RCC_OscConfig+0x36e>
 80011c6:	4b5b      	ldr	r3, [pc, #364]	@ (8001334 <HAL_RCC_OscConfig+0x4c4>)
 80011c8:	6a1b      	ldr	r3, [r3, #32]
 80011ca:	4a5a      	ldr	r2, [pc, #360]	@ (8001334 <HAL_RCC_OscConfig+0x4c4>)
 80011cc:	f023 0301 	bic.w	r3, r3, #1
 80011d0:	6213      	str	r3, [r2, #32]
 80011d2:	4b58      	ldr	r3, [pc, #352]	@ (8001334 <HAL_RCC_OscConfig+0x4c4>)
 80011d4:	6a1b      	ldr	r3, [r3, #32]
 80011d6:	4a57      	ldr	r2, [pc, #348]	@ (8001334 <HAL_RCC_OscConfig+0x4c4>)
 80011d8:	f023 0304 	bic.w	r3, r3, #4
 80011dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	68db      	ldr	r3, [r3, #12]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d015      	beq.n	8001212 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011e6:	f7ff fb6d 	bl	80008c4 <HAL_GetTick>
 80011ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011ec:	e00a      	b.n	8001204 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011ee:	f7ff fb69 	bl	80008c4 <HAL_GetTick>
 80011f2:	4602      	mov	r2, r0
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	1ad3      	subs	r3, r2, r3
 80011f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d901      	bls.n	8001204 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001200:	2303      	movs	r3, #3
 8001202:	e0b1      	b.n	8001368 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001204:	4b4b      	ldr	r3, [pc, #300]	@ (8001334 <HAL_RCC_OscConfig+0x4c4>)
 8001206:	6a1b      	ldr	r3, [r3, #32]
 8001208:	f003 0302 	and.w	r3, r3, #2
 800120c:	2b00      	cmp	r3, #0
 800120e:	d0ee      	beq.n	80011ee <HAL_RCC_OscConfig+0x37e>
 8001210:	e014      	b.n	800123c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001212:	f7ff fb57 	bl	80008c4 <HAL_GetTick>
 8001216:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001218:	e00a      	b.n	8001230 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800121a:	f7ff fb53 	bl	80008c4 <HAL_GetTick>
 800121e:	4602      	mov	r2, r0
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001228:	4293      	cmp	r3, r2
 800122a:	d901      	bls.n	8001230 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800122c:	2303      	movs	r3, #3
 800122e:	e09b      	b.n	8001368 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001230:	4b40      	ldr	r3, [pc, #256]	@ (8001334 <HAL_RCC_OscConfig+0x4c4>)
 8001232:	6a1b      	ldr	r3, [r3, #32]
 8001234:	f003 0302 	and.w	r3, r3, #2
 8001238:	2b00      	cmp	r3, #0
 800123a:	d1ee      	bne.n	800121a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800123c:	7dfb      	ldrb	r3, [r7, #23]
 800123e:	2b01      	cmp	r3, #1
 8001240:	d105      	bne.n	800124e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001242:	4b3c      	ldr	r3, [pc, #240]	@ (8001334 <HAL_RCC_OscConfig+0x4c4>)
 8001244:	69db      	ldr	r3, [r3, #28]
 8001246:	4a3b      	ldr	r2, [pc, #236]	@ (8001334 <HAL_RCC_OscConfig+0x4c4>)
 8001248:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800124c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	69db      	ldr	r3, [r3, #28]
 8001252:	2b00      	cmp	r3, #0
 8001254:	f000 8087 	beq.w	8001366 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001258:	4b36      	ldr	r3, [pc, #216]	@ (8001334 <HAL_RCC_OscConfig+0x4c4>)
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f003 030c 	and.w	r3, r3, #12
 8001260:	2b08      	cmp	r3, #8
 8001262:	d061      	beq.n	8001328 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	69db      	ldr	r3, [r3, #28]
 8001268:	2b02      	cmp	r3, #2
 800126a:	d146      	bne.n	80012fa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800126c:	4b33      	ldr	r3, [pc, #204]	@ (800133c <HAL_RCC_OscConfig+0x4cc>)
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001272:	f7ff fb27 	bl	80008c4 <HAL_GetTick>
 8001276:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001278:	e008      	b.n	800128c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800127a:	f7ff fb23 	bl	80008c4 <HAL_GetTick>
 800127e:	4602      	mov	r2, r0
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	2b02      	cmp	r3, #2
 8001286:	d901      	bls.n	800128c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001288:	2303      	movs	r3, #3
 800128a:	e06d      	b.n	8001368 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800128c:	4b29      	ldr	r3, [pc, #164]	@ (8001334 <HAL_RCC_OscConfig+0x4c4>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001294:	2b00      	cmp	r3, #0
 8001296:	d1f0      	bne.n	800127a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6a1b      	ldr	r3, [r3, #32]
 800129c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012a0:	d108      	bne.n	80012b4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80012a2:	4b24      	ldr	r3, [pc, #144]	@ (8001334 <HAL_RCC_OscConfig+0x4c4>)
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	4921      	ldr	r1, [pc, #132]	@ (8001334 <HAL_RCC_OscConfig+0x4c4>)
 80012b0:	4313      	orrs	r3, r2
 80012b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001334 <HAL_RCC_OscConfig+0x4c4>)
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6a19      	ldr	r1, [r3, #32]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012c4:	430b      	orrs	r3, r1
 80012c6:	491b      	ldr	r1, [pc, #108]	@ (8001334 <HAL_RCC_OscConfig+0x4c4>)
 80012c8:	4313      	orrs	r3, r2
 80012ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012cc:	4b1b      	ldr	r3, [pc, #108]	@ (800133c <HAL_RCC_OscConfig+0x4cc>)
 80012ce:	2201      	movs	r2, #1
 80012d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d2:	f7ff faf7 	bl	80008c4 <HAL_GetTick>
 80012d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012d8:	e008      	b.n	80012ec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012da:	f7ff faf3 	bl	80008c4 <HAL_GetTick>
 80012de:	4602      	mov	r2, r0
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	1ad3      	subs	r3, r2, r3
 80012e4:	2b02      	cmp	r3, #2
 80012e6:	d901      	bls.n	80012ec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80012e8:	2303      	movs	r3, #3
 80012ea:	e03d      	b.n	8001368 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012ec:	4b11      	ldr	r3, [pc, #68]	@ (8001334 <HAL_RCC_OscConfig+0x4c4>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d0f0      	beq.n	80012da <HAL_RCC_OscConfig+0x46a>
 80012f8:	e035      	b.n	8001366 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012fa:	4b10      	ldr	r3, [pc, #64]	@ (800133c <HAL_RCC_OscConfig+0x4cc>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001300:	f7ff fae0 	bl	80008c4 <HAL_GetTick>
 8001304:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001306:	e008      	b.n	800131a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001308:	f7ff fadc 	bl	80008c4 <HAL_GetTick>
 800130c:	4602      	mov	r2, r0
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	2b02      	cmp	r3, #2
 8001314:	d901      	bls.n	800131a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001316:	2303      	movs	r3, #3
 8001318:	e026      	b.n	8001368 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800131a:	4b06      	ldr	r3, [pc, #24]	@ (8001334 <HAL_RCC_OscConfig+0x4c4>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d1f0      	bne.n	8001308 <HAL_RCC_OscConfig+0x498>
 8001326:	e01e      	b.n	8001366 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	69db      	ldr	r3, [r3, #28]
 800132c:	2b01      	cmp	r3, #1
 800132e:	d107      	bne.n	8001340 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	e019      	b.n	8001368 <HAL_RCC_OscConfig+0x4f8>
 8001334:	40021000 	.word	0x40021000
 8001338:	40007000 	.word	0x40007000
 800133c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001340:	4b0b      	ldr	r3, [pc, #44]	@ (8001370 <HAL_RCC_OscConfig+0x500>)
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6a1b      	ldr	r3, [r3, #32]
 8001350:	429a      	cmp	r2, r3
 8001352:	d106      	bne.n	8001362 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800135e:	429a      	cmp	r2, r3
 8001360:	d001      	beq.n	8001366 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e000      	b.n	8001368 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001366:	2300      	movs	r3, #0
}
 8001368:	4618      	mov	r0, r3
 800136a:	3718      	adds	r7, #24
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	40021000 	.word	0x40021000

08001374 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d101      	bne.n	8001388 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	e0d0      	b.n	800152a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001388:	4b6a      	ldr	r3, [pc, #424]	@ (8001534 <HAL_RCC_ClockConfig+0x1c0>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f003 0307 	and.w	r3, r3, #7
 8001390:	683a      	ldr	r2, [r7, #0]
 8001392:	429a      	cmp	r2, r3
 8001394:	d910      	bls.n	80013b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001396:	4b67      	ldr	r3, [pc, #412]	@ (8001534 <HAL_RCC_ClockConfig+0x1c0>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f023 0207 	bic.w	r2, r3, #7
 800139e:	4965      	ldr	r1, [pc, #404]	@ (8001534 <HAL_RCC_ClockConfig+0x1c0>)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013a6:	4b63      	ldr	r3, [pc, #396]	@ (8001534 <HAL_RCC_ClockConfig+0x1c0>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 0307 	and.w	r3, r3, #7
 80013ae:	683a      	ldr	r2, [r7, #0]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d001      	beq.n	80013b8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e0b8      	b.n	800152a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 0302 	and.w	r3, r3, #2
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d020      	beq.n	8001406 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f003 0304 	and.w	r3, r3, #4
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d005      	beq.n	80013dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013d0:	4b59      	ldr	r3, [pc, #356]	@ (8001538 <HAL_RCC_ClockConfig+0x1c4>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	4a58      	ldr	r2, [pc, #352]	@ (8001538 <HAL_RCC_ClockConfig+0x1c4>)
 80013d6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80013da:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0308 	and.w	r3, r3, #8
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d005      	beq.n	80013f4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013e8:	4b53      	ldr	r3, [pc, #332]	@ (8001538 <HAL_RCC_ClockConfig+0x1c4>)
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	4a52      	ldr	r2, [pc, #328]	@ (8001538 <HAL_RCC_ClockConfig+0x1c4>)
 80013ee:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80013f2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013f4:	4b50      	ldr	r3, [pc, #320]	@ (8001538 <HAL_RCC_ClockConfig+0x1c4>)
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	494d      	ldr	r1, [pc, #308]	@ (8001538 <HAL_RCC_ClockConfig+0x1c4>)
 8001402:	4313      	orrs	r3, r2
 8001404:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	2b00      	cmp	r3, #0
 8001410:	d040      	beq.n	8001494 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	2b01      	cmp	r3, #1
 8001418:	d107      	bne.n	800142a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800141a:	4b47      	ldr	r3, [pc, #284]	@ (8001538 <HAL_RCC_ClockConfig+0x1c4>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d115      	bne.n	8001452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e07f      	b.n	800152a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	2b02      	cmp	r3, #2
 8001430:	d107      	bne.n	8001442 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001432:	4b41      	ldr	r3, [pc, #260]	@ (8001538 <HAL_RCC_ClockConfig+0x1c4>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d109      	bne.n	8001452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e073      	b.n	800152a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001442:	4b3d      	ldr	r3, [pc, #244]	@ (8001538 <HAL_RCC_ClockConfig+0x1c4>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 0302 	and.w	r3, r3, #2
 800144a:	2b00      	cmp	r3, #0
 800144c:	d101      	bne.n	8001452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e06b      	b.n	800152a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001452:	4b39      	ldr	r3, [pc, #228]	@ (8001538 <HAL_RCC_ClockConfig+0x1c4>)
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f023 0203 	bic.w	r2, r3, #3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	4936      	ldr	r1, [pc, #216]	@ (8001538 <HAL_RCC_ClockConfig+0x1c4>)
 8001460:	4313      	orrs	r3, r2
 8001462:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001464:	f7ff fa2e 	bl	80008c4 <HAL_GetTick>
 8001468:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800146a:	e00a      	b.n	8001482 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800146c:	f7ff fa2a 	bl	80008c4 <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	f241 3288 	movw	r2, #5000	@ 0x1388
 800147a:	4293      	cmp	r3, r2
 800147c:	d901      	bls.n	8001482 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e053      	b.n	800152a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001482:	4b2d      	ldr	r3, [pc, #180]	@ (8001538 <HAL_RCC_ClockConfig+0x1c4>)
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f003 020c 	and.w	r2, r3, #12
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	429a      	cmp	r2, r3
 8001492:	d1eb      	bne.n	800146c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001494:	4b27      	ldr	r3, [pc, #156]	@ (8001534 <HAL_RCC_ClockConfig+0x1c0>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0307 	and.w	r3, r3, #7
 800149c:	683a      	ldr	r2, [r7, #0]
 800149e:	429a      	cmp	r2, r3
 80014a0:	d210      	bcs.n	80014c4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014a2:	4b24      	ldr	r3, [pc, #144]	@ (8001534 <HAL_RCC_ClockConfig+0x1c0>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f023 0207 	bic.w	r2, r3, #7
 80014aa:	4922      	ldr	r1, [pc, #136]	@ (8001534 <HAL_RCC_ClockConfig+0x1c0>)
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014b2:	4b20      	ldr	r3, [pc, #128]	@ (8001534 <HAL_RCC_ClockConfig+0x1c0>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0307 	and.w	r3, r3, #7
 80014ba:	683a      	ldr	r2, [r7, #0]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d001      	beq.n	80014c4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	e032      	b.n	800152a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 0304 	and.w	r3, r3, #4
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d008      	beq.n	80014e2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014d0:	4b19      	ldr	r3, [pc, #100]	@ (8001538 <HAL_RCC_ClockConfig+0x1c4>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	4916      	ldr	r1, [pc, #88]	@ (8001538 <HAL_RCC_ClockConfig+0x1c4>)
 80014de:	4313      	orrs	r3, r2
 80014e0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0308 	and.w	r3, r3, #8
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d009      	beq.n	8001502 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80014ee:	4b12      	ldr	r3, [pc, #72]	@ (8001538 <HAL_RCC_ClockConfig+0x1c4>)
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	691b      	ldr	r3, [r3, #16]
 80014fa:	00db      	lsls	r3, r3, #3
 80014fc:	490e      	ldr	r1, [pc, #56]	@ (8001538 <HAL_RCC_ClockConfig+0x1c4>)
 80014fe:	4313      	orrs	r3, r2
 8001500:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001502:	f000 f821 	bl	8001548 <HAL_RCC_GetSysClockFreq>
 8001506:	4602      	mov	r2, r0
 8001508:	4b0b      	ldr	r3, [pc, #44]	@ (8001538 <HAL_RCC_ClockConfig+0x1c4>)
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	091b      	lsrs	r3, r3, #4
 800150e:	f003 030f 	and.w	r3, r3, #15
 8001512:	490a      	ldr	r1, [pc, #40]	@ (800153c <HAL_RCC_ClockConfig+0x1c8>)
 8001514:	5ccb      	ldrb	r3, [r1, r3]
 8001516:	fa22 f303 	lsr.w	r3, r2, r3
 800151a:	4a09      	ldr	r2, [pc, #36]	@ (8001540 <HAL_RCC_ClockConfig+0x1cc>)
 800151c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800151e:	4b09      	ldr	r3, [pc, #36]	@ (8001544 <HAL_RCC_ClockConfig+0x1d0>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff f98c 	bl	8000840 <HAL_InitTick>

  return HAL_OK;
 8001528:	2300      	movs	r3, #0
}
 800152a:	4618      	mov	r0, r3
 800152c:	3710      	adds	r7, #16
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40022000 	.word	0x40022000
 8001538:	40021000 	.word	0x40021000
 800153c:	08002b74 	.word	0x08002b74
 8001540:	20000000 	.word	0x20000000
 8001544:	20000004 	.word	0x20000004

08001548 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001548:	b480      	push	{r7}
 800154a:	b087      	sub	sp, #28
 800154c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800154e:	2300      	movs	r3, #0
 8001550:	60fb      	str	r3, [r7, #12]
 8001552:	2300      	movs	r3, #0
 8001554:	60bb      	str	r3, [r7, #8]
 8001556:	2300      	movs	r3, #0
 8001558:	617b      	str	r3, [r7, #20]
 800155a:	2300      	movs	r3, #0
 800155c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800155e:	2300      	movs	r3, #0
 8001560:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001562:	4b1e      	ldr	r3, [pc, #120]	@ (80015dc <HAL_RCC_GetSysClockFreq+0x94>)
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	f003 030c 	and.w	r3, r3, #12
 800156e:	2b04      	cmp	r3, #4
 8001570:	d002      	beq.n	8001578 <HAL_RCC_GetSysClockFreq+0x30>
 8001572:	2b08      	cmp	r3, #8
 8001574:	d003      	beq.n	800157e <HAL_RCC_GetSysClockFreq+0x36>
 8001576:	e027      	b.n	80015c8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001578:	4b19      	ldr	r3, [pc, #100]	@ (80015e0 <HAL_RCC_GetSysClockFreq+0x98>)
 800157a:	613b      	str	r3, [r7, #16]
      break;
 800157c:	e027      	b.n	80015ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	0c9b      	lsrs	r3, r3, #18
 8001582:	f003 030f 	and.w	r3, r3, #15
 8001586:	4a17      	ldr	r2, [pc, #92]	@ (80015e4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001588:	5cd3      	ldrb	r3, [r2, r3]
 800158a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d010      	beq.n	80015b8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001596:	4b11      	ldr	r3, [pc, #68]	@ (80015dc <HAL_RCC_GetSysClockFreq+0x94>)
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	0c5b      	lsrs	r3, r3, #17
 800159c:	f003 0301 	and.w	r3, r3, #1
 80015a0:	4a11      	ldr	r2, [pc, #68]	@ (80015e8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80015a2:	5cd3      	ldrb	r3, [r2, r3]
 80015a4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4a0d      	ldr	r2, [pc, #52]	@ (80015e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80015aa:	fb03 f202 	mul.w	r2, r3, r2
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80015b4:	617b      	str	r3, [r7, #20]
 80015b6:	e004      	b.n	80015c2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	4a0c      	ldr	r2, [pc, #48]	@ (80015ec <HAL_RCC_GetSysClockFreq+0xa4>)
 80015bc:	fb02 f303 	mul.w	r3, r2, r3
 80015c0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	613b      	str	r3, [r7, #16]
      break;
 80015c6:	e002      	b.n	80015ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80015c8:	4b05      	ldr	r3, [pc, #20]	@ (80015e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80015ca:	613b      	str	r3, [r7, #16]
      break;
 80015cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80015ce:	693b      	ldr	r3, [r7, #16]
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	371c      	adds	r7, #28
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bc80      	pop	{r7}
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	40021000 	.word	0x40021000
 80015e0:	007a1200 	.word	0x007a1200
 80015e4:	08002b8c 	.word	0x08002b8c
 80015e8:	08002b9c 	.word	0x08002b9c
 80015ec:	003d0900 	.word	0x003d0900

080015f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015f4:	4b02      	ldr	r3, [pc, #8]	@ (8001600 <HAL_RCC_GetHCLKFreq+0x10>)
 80015f6:	681b      	ldr	r3, [r3, #0]
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bc80      	pop	{r7}
 80015fe:	4770      	bx	lr
 8001600:	20000000 	.word	0x20000000

08001604 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001608:	f7ff fff2 	bl	80015f0 <HAL_RCC_GetHCLKFreq>
 800160c:	4602      	mov	r2, r0
 800160e:	4b05      	ldr	r3, [pc, #20]	@ (8001624 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	0a1b      	lsrs	r3, r3, #8
 8001614:	f003 0307 	and.w	r3, r3, #7
 8001618:	4903      	ldr	r1, [pc, #12]	@ (8001628 <HAL_RCC_GetPCLK1Freq+0x24>)
 800161a:	5ccb      	ldrb	r3, [r1, r3]
 800161c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001620:	4618      	mov	r0, r3
 8001622:	bd80      	pop	{r7, pc}
 8001624:	40021000 	.word	0x40021000
 8001628:	08002b84 	.word	0x08002b84

0800162c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001630:	f7ff ffde 	bl	80015f0 <HAL_RCC_GetHCLKFreq>
 8001634:	4602      	mov	r2, r0
 8001636:	4b05      	ldr	r3, [pc, #20]	@ (800164c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	0adb      	lsrs	r3, r3, #11
 800163c:	f003 0307 	and.w	r3, r3, #7
 8001640:	4903      	ldr	r1, [pc, #12]	@ (8001650 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001642:	5ccb      	ldrb	r3, [r1, r3]
 8001644:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001648:	4618      	mov	r0, r3
 800164a:	bd80      	pop	{r7, pc}
 800164c:	40021000 	.word	0x40021000
 8001650:	08002b84 	.word	0x08002b84

08001654 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800165c:	4b0a      	ldr	r3, [pc, #40]	@ (8001688 <RCC_Delay+0x34>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a0a      	ldr	r2, [pc, #40]	@ (800168c <RCC_Delay+0x38>)
 8001662:	fba2 2303 	umull	r2, r3, r2, r3
 8001666:	0a5b      	lsrs	r3, r3, #9
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	fb02 f303 	mul.w	r3, r2, r3
 800166e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001670:	bf00      	nop
  }
  while (Delay --);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	1e5a      	subs	r2, r3, #1
 8001676:	60fa      	str	r2, [r7, #12]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d1f9      	bne.n	8001670 <RCC_Delay+0x1c>
}
 800167c:	bf00      	nop
 800167e:	bf00      	nop
 8001680:	3714      	adds	r7, #20
 8001682:	46bd      	mov	sp, r7
 8001684:	bc80      	pop	{r7}
 8001686:	4770      	bx	lr
 8001688:	20000000 	.word	0x20000000
 800168c:	10624dd3 	.word	0x10624dd3

08001690 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d101      	bne.n	80016a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e042      	b.n	8001728 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d106      	bne.n	80016bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2200      	movs	r2, #0
 80016b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f7fe ff6e 	bl	8000598 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2224      	movs	r2, #36	@ 0x24
 80016c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	68da      	ldr	r2, [r3, #12]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80016d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f000 fa09 	bl	8001aec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	691a      	ldr	r2, [r3, #16]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80016e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	695a      	ldr	r2, [r3, #20]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80016f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	68da      	ldr	r2, [r3, #12]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001708:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2200      	movs	r2, #0
 800170e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2220      	movs	r2, #32
 8001714:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2220      	movs	r2, #32
 800171c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2200      	movs	r2, #0
 8001724:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001726:	2300      	movs	r3, #0
}
 8001728:	4618      	mov	r0, r3
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}

08001730 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b08a      	sub	sp, #40	@ 0x28
 8001734:	af02      	add	r7, sp, #8
 8001736:	60f8      	str	r0, [r7, #12]
 8001738:	60b9      	str	r1, [r7, #8]
 800173a:	603b      	str	r3, [r7, #0]
 800173c:	4613      	mov	r3, r2
 800173e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001740:	2300      	movs	r3, #0
 8001742:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800174a:	b2db      	uxtb	r3, r3
 800174c:	2b20      	cmp	r3, #32
 800174e:	d175      	bne.n	800183c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d002      	beq.n	800175c <HAL_UART_Transmit+0x2c>
 8001756:	88fb      	ldrh	r3, [r7, #6]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d101      	bne.n	8001760 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e06e      	b.n	800183e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	2200      	movs	r2, #0
 8001764:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	2221      	movs	r2, #33	@ 0x21
 800176a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800176e:	f7ff f8a9 	bl	80008c4 <HAL_GetTick>
 8001772:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	88fa      	ldrh	r2, [r7, #6]
 8001778:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	88fa      	ldrh	r2, [r7, #6]
 800177e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001788:	d108      	bne.n	800179c <HAL_UART_Transmit+0x6c>
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	691b      	ldr	r3, [r3, #16]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d104      	bne.n	800179c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001792:	2300      	movs	r3, #0
 8001794:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	61bb      	str	r3, [r7, #24]
 800179a:	e003      	b.n	80017a4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80017a0:	2300      	movs	r3, #0
 80017a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80017a4:	e02e      	b.n	8001804 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	9300      	str	r3, [sp, #0]
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	2200      	movs	r2, #0
 80017ae:	2180      	movs	r1, #128	@ 0x80
 80017b0:	68f8      	ldr	r0, [r7, #12]
 80017b2:	f000 f8df 	bl	8001974 <UART_WaitOnFlagUntilTimeout>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d005      	beq.n	80017c8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2220      	movs	r2, #32
 80017c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80017c4:	2303      	movs	r3, #3
 80017c6:	e03a      	b.n	800183e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d10b      	bne.n	80017e6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	881b      	ldrh	r3, [r3, #0]
 80017d2:	461a      	mov	r2, r3
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80017dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	3302      	adds	r3, #2
 80017e2:	61bb      	str	r3, [r7, #24]
 80017e4:	e007      	b.n	80017f6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	781a      	ldrb	r2, [r3, #0]
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	3301      	adds	r3, #1
 80017f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	3b01      	subs	r3, #1
 80017fe:	b29a      	uxth	r2, r3
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001808:	b29b      	uxth	r3, r3
 800180a:	2b00      	cmp	r3, #0
 800180c:	d1cb      	bne.n	80017a6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	9300      	str	r3, [sp, #0]
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	2200      	movs	r2, #0
 8001816:	2140      	movs	r1, #64	@ 0x40
 8001818:	68f8      	ldr	r0, [r7, #12]
 800181a:	f000 f8ab 	bl	8001974 <UART_WaitOnFlagUntilTimeout>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d005      	beq.n	8001830 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2220      	movs	r2, #32
 8001828:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800182c:	2303      	movs	r3, #3
 800182e:	e006      	b.n	800183e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2220      	movs	r2, #32
 8001834:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001838:	2300      	movs	r3, #0
 800183a:	e000      	b.n	800183e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800183c:	2302      	movs	r3, #2
  }
}
 800183e:	4618      	mov	r0, r3
 8001840:	3720      	adds	r7, #32
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}

08001846 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001846:	b580      	push	{r7, lr}
 8001848:	b08a      	sub	sp, #40	@ 0x28
 800184a:	af02      	add	r7, sp, #8
 800184c:	60f8      	str	r0, [r7, #12]
 800184e:	60b9      	str	r1, [r7, #8]
 8001850:	603b      	str	r3, [r7, #0]
 8001852:	4613      	mov	r3, r2
 8001854:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001856:	2300      	movs	r3, #0
 8001858:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001860:	b2db      	uxtb	r3, r3
 8001862:	2b20      	cmp	r3, #32
 8001864:	f040 8081 	bne.w	800196a <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d002      	beq.n	8001874 <HAL_UART_Receive+0x2e>
 800186e:	88fb      	ldrh	r3, [r7, #6]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d101      	bne.n	8001878 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e079      	b.n	800196c <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	2200      	movs	r2, #0
 800187c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	2222      	movs	r2, #34	@ 0x22
 8001882:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	2200      	movs	r2, #0
 800188a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800188c:	f7ff f81a 	bl	80008c4 <HAL_GetTick>
 8001890:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	88fa      	ldrh	r2, [r7, #6]
 8001896:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	88fa      	ldrh	r2, [r7, #6]
 800189c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80018a6:	d108      	bne.n	80018ba <HAL_UART_Receive+0x74>
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	691b      	ldr	r3, [r3, #16]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d104      	bne.n	80018ba <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80018b0:	2300      	movs	r3, #0
 80018b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	61bb      	str	r3, [r7, #24]
 80018b8:	e003      	b.n	80018c2 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80018be:	2300      	movs	r3, #0
 80018c0:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80018c2:	e047      	b.n	8001954 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	9300      	str	r3, [sp, #0]
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	2200      	movs	r2, #0
 80018cc:	2120      	movs	r1, #32
 80018ce:	68f8      	ldr	r0, [r7, #12]
 80018d0:	f000 f850 	bl	8001974 <UART_WaitOnFlagUntilTimeout>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d005      	beq.n	80018e6 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	2220      	movs	r2, #32
 80018de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e042      	b.n	800196c <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d10c      	bne.n	8001906 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018f8:	b29a      	uxth	r2, r3
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	3302      	adds	r3, #2
 8001902:	61bb      	str	r3, [r7, #24]
 8001904:	e01f      	b.n	8001946 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800190e:	d007      	beq.n	8001920 <HAL_UART_Receive+0xda>
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d10a      	bne.n	800192e <HAL_UART_Receive+0xe8>
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	691b      	ldr	r3, [r3, #16]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d106      	bne.n	800192e <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	b2da      	uxtb	r2, r3
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	701a      	strb	r2, [r3, #0]
 800192c:	e008      	b.n	8001940 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	b2db      	uxtb	r3, r3
 8001936:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800193a:	b2da      	uxtb	r2, r3
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	3301      	adds	r3, #1
 8001944:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800194a:	b29b      	uxth	r3, r3
 800194c:	3b01      	subs	r3, #1
 800194e:	b29a      	uxth	r2, r3
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001958:	b29b      	uxth	r3, r3
 800195a:	2b00      	cmp	r3, #0
 800195c:	d1b2      	bne.n	80018c4 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	2220      	movs	r2, #32
 8001962:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8001966:	2300      	movs	r3, #0
 8001968:	e000      	b.n	800196c <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800196a:	2302      	movs	r3, #2
  }
}
 800196c:	4618      	mov	r0, r3
 800196e:	3720      	adds	r7, #32
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}

08001974 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b086      	sub	sp, #24
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	60b9      	str	r1, [r7, #8]
 800197e:	603b      	str	r3, [r7, #0]
 8001980:	4613      	mov	r3, r2
 8001982:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001984:	e03b      	b.n	80019fe <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001986:	6a3b      	ldr	r3, [r7, #32]
 8001988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800198c:	d037      	beq.n	80019fe <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800198e:	f7fe ff99 	bl	80008c4 <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	6a3a      	ldr	r2, [r7, #32]
 800199a:	429a      	cmp	r2, r3
 800199c:	d302      	bcc.n	80019a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800199e:	6a3b      	ldr	r3, [r7, #32]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d101      	bne.n	80019a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80019a4:	2303      	movs	r3, #3
 80019a6:	e03a      	b.n	8001a1e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	f003 0304 	and.w	r3, r3, #4
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d023      	beq.n	80019fe <UART_WaitOnFlagUntilTimeout+0x8a>
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	2b80      	cmp	r3, #128	@ 0x80
 80019ba:	d020      	beq.n	80019fe <UART_WaitOnFlagUntilTimeout+0x8a>
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	2b40      	cmp	r3, #64	@ 0x40
 80019c0:	d01d      	beq.n	80019fe <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0308 	and.w	r3, r3, #8
 80019cc:	2b08      	cmp	r3, #8
 80019ce:	d116      	bne.n	80019fe <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80019d0:	2300      	movs	r3, #0
 80019d2:	617b      	str	r3, [r7, #20]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	617b      	str	r3, [r7, #20]
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	617b      	str	r3, [r7, #20]
 80019e4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80019e6:	68f8      	ldr	r0, [r7, #12]
 80019e8:	f000 f81d 	bl	8001a26 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2208      	movs	r2, #8
 80019f0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2200      	movs	r2, #0
 80019f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e00f      	b.n	8001a1e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	4013      	ands	r3, r2
 8001a08:	68ba      	ldr	r2, [r7, #8]
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	bf0c      	ite	eq
 8001a0e:	2301      	moveq	r3, #1
 8001a10:	2300      	movne	r3, #0
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	461a      	mov	r2, r3
 8001a16:	79fb      	ldrb	r3, [r7, #7]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d0b4      	beq.n	8001986 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3718      	adds	r7, #24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001a26:	b480      	push	{r7}
 8001a28:	b095      	sub	sp, #84	@ 0x54
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	330c      	adds	r3, #12
 8001a34:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001a36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a38:	e853 3f00 	ldrex	r3, [r3]
 8001a3c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a40:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001a44:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	330c      	adds	r3, #12
 8001a4c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001a4e:	643a      	str	r2, [r7, #64]	@ 0x40
 8001a50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001a52:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001a54:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001a56:	e841 2300 	strex	r3, r2, [r1]
 8001a5a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001a5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d1e5      	bne.n	8001a2e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	3314      	adds	r3, #20
 8001a68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001a6a:	6a3b      	ldr	r3, [r7, #32]
 8001a6c:	e853 3f00 	ldrex	r3, [r3]
 8001a70:	61fb      	str	r3, [r7, #28]
   return(result);
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	f023 0301 	bic.w	r3, r3, #1
 8001a78:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	3314      	adds	r3, #20
 8001a80:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001a82:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001a84:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001a86:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001a88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001a8a:	e841 2300 	strex	r3, r2, [r1]
 8001a8e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d1e5      	bne.n	8001a62 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d119      	bne.n	8001ad2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	330c      	adds	r3, #12
 8001aa4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	e853 3f00 	ldrex	r3, [r3]
 8001aac:	60bb      	str	r3, [r7, #8]
   return(result);
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	f023 0310 	bic.w	r3, r3, #16
 8001ab4:	647b      	str	r3, [r7, #68]	@ 0x44
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	330c      	adds	r3, #12
 8001abc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001abe:	61ba      	str	r2, [r7, #24]
 8001ac0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ac2:	6979      	ldr	r1, [r7, #20]
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	e841 2300 	strex	r3, r2, [r1]
 8001aca:	613b      	str	r3, [r7, #16]
   return(result);
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d1e5      	bne.n	8001a9e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2220      	movs	r2, #32
 8001ad6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2200      	movs	r2, #0
 8001ade:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001ae0:	bf00      	nop
 8001ae2:	3754      	adds	r7, #84	@ 0x54
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bc80      	pop	{r7}
 8001ae8:	4770      	bx	lr
	...

08001aec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	691b      	ldr	r3, [r3, #16]
 8001afa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	68da      	ldr	r2, [r3, #12]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	430a      	orrs	r2, r1
 8001b08:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	689a      	ldr	r2, [r3, #8]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	691b      	ldr	r3, [r3, #16]
 8001b12:	431a      	orrs	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	695b      	ldr	r3, [r3, #20]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	68db      	ldr	r3, [r3, #12]
 8001b22:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8001b26:	f023 030c 	bic.w	r3, r3, #12
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	6812      	ldr	r2, [r2, #0]
 8001b2e:	68b9      	ldr	r1, [r7, #8]
 8001b30:	430b      	orrs	r3, r1
 8001b32:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	695b      	ldr	r3, [r3, #20]
 8001b3a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	699a      	ldr	r2, [r3, #24]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	430a      	orrs	r2, r1
 8001b48:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a2c      	ldr	r2, [pc, #176]	@ (8001c00 <UART_SetConfig+0x114>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d103      	bne.n	8001b5c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001b54:	f7ff fd6a 	bl	800162c <HAL_RCC_GetPCLK2Freq>
 8001b58:	60f8      	str	r0, [r7, #12]
 8001b5a:	e002      	b.n	8001b62 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001b5c:	f7ff fd52 	bl	8001604 <HAL_RCC_GetPCLK1Freq>
 8001b60:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001b62:	68fa      	ldr	r2, [r7, #12]
 8001b64:	4613      	mov	r3, r2
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	4413      	add	r3, r2
 8001b6a:	009a      	lsls	r2, r3, #2
 8001b6c:	441a      	add	r2, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b78:	4a22      	ldr	r2, [pc, #136]	@ (8001c04 <UART_SetConfig+0x118>)
 8001b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b7e:	095b      	lsrs	r3, r3, #5
 8001b80:	0119      	lsls	r1, r3, #4
 8001b82:	68fa      	ldr	r2, [r7, #12]
 8001b84:	4613      	mov	r3, r2
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	4413      	add	r3, r2
 8001b8a:	009a      	lsls	r2, r3, #2
 8001b8c:	441a      	add	r2, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b98:	4b1a      	ldr	r3, [pc, #104]	@ (8001c04 <UART_SetConfig+0x118>)
 8001b9a:	fba3 0302 	umull	r0, r3, r3, r2
 8001b9e:	095b      	lsrs	r3, r3, #5
 8001ba0:	2064      	movs	r0, #100	@ 0x64
 8001ba2:	fb00 f303 	mul.w	r3, r0, r3
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	011b      	lsls	r3, r3, #4
 8001baa:	3332      	adds	r3, #50	@ 0x32
 8001bac:	4a15      	ldr	r2, [pc, #84]	@ (8001c04 <UART_SetConfig+0x118>)
 8001bae:	fba2 2303 	umull	r2, r3, r2, r3
 8001bb2:	095b      	lsrs	r3, r3, #5
 8001bb4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001bb8:	4419      	add	r1, r3
 8001bba:	68fa      	ldr	r2, [r7, #12]
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	4413      	add	r3, r2
 8001bc2:	009a      	lsls	r2, r3, #2
 8001bc4:	441a      	add	r2, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	fbb2 f2f3 	udiv	r2, r2, r3
 8001bd0:	4b0c      	ldr	r3, [pc, #48]	@ (8001c04 <UART_SetConfig+0x118>)
 8001bd2:	fba3 0302 	umull	r0, r3, r3, r2
 8001bd6:	095b      	lsrs	r3, r3, #5
 8001bd8:	2064      	movs	r0, #100	@ 0x64
 8001bda:	fb00 f303 	mul.w	r3, r0, r3
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	011b      	lsls	r3, r3, #4
 8001be2:	3332      	adds	r3, #50	@ 0x32
 8001be4:	4a07      	ldr	r2, [pc, #28]	@ (8001c04 <UART_SetConfig+0x118>)
 8001be6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bea:	095b      	lsrs	r3, r3, #5
 8001bec:	f003 020f 	and.w	r2, r3, #15
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	440a      	add	r2, r1
 8001bf6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001bf8:	bf00      	nop
 8001bfa:	3710      	adds	r7, #16
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	40013800 	.word	0x40013800
 8001c04:	51eb851f 	.word	0x51eb851f

08001c08 <std>:
 8001c08:	2300      	movs	r3, #0
 8001c0a:	b510      	push	{r4, lr}
 8001c0c:	4604      	mov	r4, r0
 8001c0e:	e9c0 3300 	strd	r3, r3, [r0]
 8001c12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001c16:	6083      	str	r3, [r0, #8]
 8001c18:	8181      	strh	r1, [r0, #12]
 8001c1a:	6643      	str	r3, [r0, #100]	@ 0x64
 8001c1c:	81c2      	strh	r2, [r0, #14]
 8001c1e:	6183      	str	r3, [r0, #24]
 8001c20:	4619      	mov	r1, r3
 8001c22:	2208      	movs	r2, #8
 8001c24:	305c      	adds	r0, #92	@ 0x5c
 8001c26:	f000 f9f9 	bl	800201c <memset>
 8001c2a:	4b0d      	ldr	r3, [pc, #52]	@ (8001c60 <std+0x58>)
 8001c2c:	6224      	str	r4, [r4, #32]
 8001c2e:	6263      	str	r3, [r4, #36]	@ 0x24
 8001c30:	4b0c      	ldr	r3, [pc, #48]	@ (8001c64 <std+0x5c>)
 8001c32:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001c34:	4b0c      	ldr	r3, [pc, #48]	@ (8001c68 <std+0x60>)
 8001c36:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001c38:	4b0c      	ldr	r3, [pc, #48]	@ (8001c6c <std+0x64>)
 8001c3a:	6323      	str	r3, [r4, #48]	@ 0x30
 8001c3c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c70 <std+0x68>)
 8001c3e:	429c      	cmp	r4, r3
 8001c40:	d006      	beq.n	8001c50 <std+0x48>
 8001c42:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001c46:	4294      	cmp	r4, r2
 8001c48:	d002      	beq.n	8001c50 <std+0x48>
 8001c4a:	33d0      	adds	r3, #208	@ 0xd0
 8001c4c:	429c      	cmp	r4, r3
 8001c4e:	d105      	bne.n	8001c5c <std+0x54>
 8001c50:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001c54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001c58:	f000 ba58 	b.w	800210c <__retarget_lock_init_recursive>
 8001c5c:	bd10      	pop	{r4, pc}
 8001c5e:	bf00      	nop
 8001c60:	08001e6d 	.word	0x08001e6d
 8001c64:	08001e8f 	.word	0x08001e8f
 8001c68:	08001ec7 	.word	0x08001ec7
 8001c6c:	08001eeb 	.word	0x08001eeb
 8001c70:	200000d8 	.word	0x200000d8

08001c74 <stdio_exit_handler>:
 8001c74:	4a02      	ldr	r2, [pc, #8]	@ (8001c80 <stdio_exit_handler+0xc>)
 8001c76:	4903      	ldr	r1, [pc, #12]	@ (8001c84 <stdio_exit_handler+0x10>)
 8001c78:	4803      	ldr	r0, [pc, #12]	@ (8001c88 <stdio_exit_handler+0x14>)
 8001c7a:	f000 b869 	b.w	8001d50 <_fwalk_sglue>
 8001c7e:	bf00      	nop
 8001c80:	2000000c 	.word	0x2000000c
 8001c84:	080029a1 	.word	0x080029a1
 8001c88:	2000001c 	.word	0x2000001c

08001c8c <cleanup_stdio>:
 8001c8c:	6841      	ldr	r1, [r0, #4]
 8001c8e:	4b0c      	ldr	r3, [pc, #48]	@ (8001cc0 <cleanup_stdio+0x34>)
 8001c90:	b510      	push	{r4, lr}
 8001c92:	4299      	cmp	r1, r3
 8001c94:	4604      	mov	r4, r0
 8001c96:	d001      	beq.n	8001c9c <cleanup_stdio+0x10>
 8001c98:	f000 fe82 	bl	80029a0 <_fflush_r>
 8001c9c:	68a1      	ldr	r1, [r4, #8]
 8001c9e:	4b09      	ldr	r3, [pc, #36]	@ (8001cc4 <cleanup_stdio+0x38>)
 8001ca0:	4299      	cmp	r1, r3
 8001ca2:	d002      	beq.n	8001caa <cleanup_stdio+0x1e>
 8001ca4:	4620      	mov	r0, r4
 8001ca6:	f000 fe7b 	bl	80029a0 <_fflush_r>
 8001caa:	68e1      	ldr	r1, [r4, #12]
 8001cac:	4b06      	ldr	r3, [pc, #24]	@ (8001cc8 <cleanup_stdio+0x3c>)
 8001cae:	4299      	cmp	r1, r3
 8001cb0:	d004      	beq.n	8001cbc <cleanup_stdio+0x30>
 8001cb2:	4620      	mov	r0, r4
 8001cb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001cb8:	f000 be72 	b.w	80029a0 <_fflush_r>
 8001cbc:	bd10      	pop	{r4, pc}
 8001cbe:	bf00      	nop
 8001cc0:	200000d8 	.word	0x200000d8
 8001cc4:	20000140 	.word	0x20000140
 8001cc8:	200001a8 	.word	0x200001a8

08001ccc <global_stdio_init.part.0>:
 8001ccc:	b510      	push	{r4, lr}
 8001cce:	4b0b      	ldr	r3, [pc, #44]	@ (8001cfc <global_stdio_init.part.0+0x30>)
 8001cd0:	4c0b      	ldr	r4, [pc, #44]	@ (8001d00 <global_stdio_init.part.0+0x34>)
 8001cd2:	4a0c      	ldr	r2, [pc, #48]	@ (8001d04 <global_stdio_init.part.0+0x38>)
 8001cd4:	4620      	mov	r0, r4
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	2104      	movs	r1, #4
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f7ff ff94 	bl	8001c08 <std>
 8001ce0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	2109      	movs	r1, #9
 8001ce8:	f7ff ff8e 	bl	8001c08 <std>
 8001cec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001cf0:	2202      	movs	r2, #2
 8001cf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001cf6:	2112      	movs	r1, #18
 8001cf8:	f7ff bf86 	b.w	8001c08 <std>
 8001cfc:	20000210 	.word	0x20000210
 8001d00:	200000d8 	.word	0x200000d8
 8001d04:	08001c75 	.word	0x08001c75

08001d08 <__sfp_lock_acquire>:
 8001d08:	4801      	ldr	r0, [pc, #4]	@ (8001d10 <__sfp_lock_acquire+0x8>)
 8001d0a:	f000 ba00 	b.w	800210e <__retarget_lock_acquire_recursive>
 8001d0e:	bf00      	nop
 8001d10:	20000219 	.word	0x20000219

08001d14 <__sfp_lock_release>:
 8001d14:	4801      	ldr	r0, [pc, #4]	@ (8001d1c <__sfp_lock_release+0x8>)
 8001d16:	f000 b9fb 	b.w	8002110 <__retarget_lock_release_recursive>
 8001d1a:	bf00      	nop
 8001d1c:	20000219 	.word	0x20000219

08001d20 <__sinit>:
 8001d20:	b510      	push	{r4, lr}
 8001d22:	4604      	mov	r4, r0
 8001d24:	f7ff fff0 	bl	8001d08 <__sfp_lock_acquire>
 8001d28:	6a23      	ldr	r3, [r4, #32]
 8001d2a:	b11b      	cbz	r3, 8001d34 <__sinit+0x14>
 8001d2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001d30:	f7ff bff0 	b.w	8001d14 <__sfp_lock_release>
 8001d34:	4b04      	ldr	r3, [pc, #16]	@ (8001d48 <__sinit+0x28>)
 8001d36:	6223      	str	r3, [r4, #32]
 8001d38:	4b04      	ldr	r3, [pc, #16]	@ (8001d4c <__sinit+0x2c>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d1f5      	bne.n	8001d2c <__sinit+0xc>
 8001d40:	f7ff ffc4 	bl	8001ccc <global_stdio_init.part.0>
 8001d44:	e7f2      	b.n	8001d2c <__sinit+0xc>
 8001d46:	bf00      	nop
 8001d48:	08001c8d 	.word	0x08001c8d
 8001d4c:	20000210 	.word	0x20000210

08001d50 <_fwalk_sglue>:
 8001d50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001d54:	4607      	mov	r7, r0
 8001d56:	4688      	mov	r8, r1
 8001d58:	4614      	mov	r4, r2
 8001d5a:	2600      	movs	r6, #0
 8001d5c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001d60:	f1b9 0901 	subs.w	r9, r9, #1
 8001d64:	d505      	bpl.n	8001d72 <_fwalk_sglue+0x22>
 8001d66:	6824      	ldr	r4, [r4, #0]
 8001d68:	2c00      	cmp	r4, #0
 8001d6a:	d1f7      	bne.n	8001d5c <_fwalk_sglue+0xc>
 8001d6c:	4630      	mov	r0, r6
 8001d6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001d72:	89ab      	ldrh	r3, [r5, #12]
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d907      	bls.n	8001d88 <_fwalk_sglue+0x38>
 8001d78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	d003      	beq.n	8001d88 <_fwalk_sglue+0x38>
 8001d80:	4629      	mov	r1, r5
 8001d82:	4638      	mov	r0, r7
 8001d84:	47c0      	blx	r8
 8001d86:	4306      	orrs	r6, r0
 8001d88:	3568      	adds	r5, #104	@ 0x68
 8001d8a:	e7e9      	b.n	8001d60 <_fwalk_sglue+0x10>

08001d8c <iprintf>:
 8001d8c:	b40f      	push	{r0, r1, r2, r3}
 8001d8e:	b507      	push	{r0, r1, r2, lr}
 8001d90:	4906      	ldr	r1, [pc, #24]	@ (8001dac <iprintf+0x20>)
 8001d92:	ab04      	add	r3, sp, #16
 8001d94:	6808      	ldr	r0, [r1, #0]
 8001d96:	f853 2b04 	ldr.w	r2, [r3], #4
 8001d9a:	6881      	ldr	r1, [r0, #8]
 8001d9c:	9301      	str	r3, [sp, #4]
 8001d9e:	f000 fad7 	bl	8002350 <_vfiprintf_r>
 8001da2:	b003      	add	sp, #12
 8001da4:	f85d eb04 	ldr.w	lr, [sp], #4
 8001da8:	b004      	add	sp, #16
 8001daa:	4770      	bx	lr
 8001dac:	20000018 	.word	0x20000018

08001db0 <_puts_r>:
 8001db0:	6a03      	ldr	r3, [r0, #32]
 8001db2:	b570      	push	{r4, r5, r6, lr}
 8001db4:	4605      	mov	r5, r0
 8001db6:	460e      	mov	r6, r1
 8001db8:	6884      	ldr	r4, [r0, #8]
 8001dba:	b90b      	cbnz	r3, 8001dc0 <_puts_r+0x10>
 8001dbc:	f7ff ffb0 	bl	8001d20 <__sinit>
 8001dc0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001dc2:	07db      	lsls	r3, r3, #31
 8001dc4:	d405      	bmi.n	8001dd2 <_puts_r+0x22>
 8001dc6:	89a3      	ldrh	r3, [r4, #12]
 8001dc8:	0598      	lsls	r0, r3, #22
 8001dca:	d402      	bmi.n	8001dd2 <_puts_r+0x22>
 8001dcc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001dce:	f000 f99e 	bl	800210e <__retarget_lock_acquire_recursive>
 8001dd2:	89a3      	ldrh	r3, [r4, #12]
 8001dd4:	0719      	lsls	r1, r3, #28
 8001dd6:	d502      	bpl.n	8001dde <_puts_r+0x2e>
 8001dd8:	6923      	ldr	r3, [r4, #16]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d135      	bne.n	8001e4a <_puts_r+0x9a>
 8001dde:	4621      	mov	r1, r4
 8001de0:	4628      	mov	r0, r5
 8001de2:	f000 f8c5 	bl	8001f70 <__swsetup_r>
 8001de6:	b380      	cbz	r0, 8001e4a <_puts_r+0x9a>
 8001de8:	f04f 35ff 	mov.w	r5, #4294967295
 8001dec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001dee:	07da      	lsls	r2, r3, #31
 8001df0:	d405      	bmi.n	8001dfe <_puts_r+0x4e>
 8001df2:	89a3      	ldrh	r3, [r4, #12]
 8001df4:	059b      	lsls	r3, r3, #22
 8001df6:	d402      	bmi.n	8001dfe <_puts_r+0x4e>
 8001df8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001dfa:	f000 f989 	bl	8002110 <__retarget_lock_release_recursive>
 8001dfe:	4628      	mov	r0, r5
 8001e00:	bd70      	pop	{r4, r5, r6, pc}
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	da04      	bge.n	8001e10 <_puts_r+0x60>
 8001e06:	69a2      	ldr	r2, [r4, #24]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	dc17      	bgt.n	8001e3c <_puts_r+0x8c>
 8001e0c:	290a      	cmp	r1, #10
 8001e0e:	d015      	beq.n	8001e3c <_puts_r+0x8c>
 8001e10:	6823      	ldr	r3, [r4, #0]
 8001e12:	1c5a      	adds	r2, r3, #1
 8001e14:	6022      	str	r2, [r4, #0]
 8001e16:	7019      	strb	r1, [r3, #0]
 8001e18:	68a3      	ldr	r3, [r4, #8]
 8001e1a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001e1e:	3b01      	subs	r3, #1
 8001e20:	60a3      	str	r3, [r4, #8]
 8001e22:	2900      	cmp	r1, #0
 8001e24:	d1ed      	bne.n	8001e02 <_puts_r+0x52>
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	da11      	bge.n	8001e4e <_puts_r+0x9e>
 8001e2a:	4622      	mov	r2, r4
 8001e2c:	210a      	movs	r1, #10
 8001e2e:	4628      	mov	r0, r5
 8001e30:	f000 f85f 	bl	8001ef2 <__swbuf_r>
 8001e34:	3001      	adds	r0, #1
 8001e36:	d0d7      	beq.n	8001de8 <_puts_r+0x38>
 8001e38:	250a      	movs	r5, #10
 8001e3a:	e7d7      	b.n	8001dec <_puts_r+0x3c>
 8001e3c:	4622      	mov	r2, r4
 8001e3e:	4628      	mov	r0, r5
 8001e40:	f000 f857 	bl	8001ef2 <__swbuf_r>
 8001e44:	3001      	adds	r0, #1
 8001e46:	d1e7      	bne.n	8001e18 <_puts_r+0x68>
 8001e48:	e7ce      	b.n	8001de8 <_puts_r+0x38>
 8001e4a:	3e01      	subs	r6, #1
 8001e4c:	e7e4      	b.n	8001e18 <_puts_r+0x68>
 8001e4e:	6823      	ldr	r3, [r4, #0]
 8001e50:	1c5a      	adds	r2, r3, #1
 8001e52:	6022      	str	r2, [r4, #0]
 8001e54:	220a      	movs	r2, #10
 8001e56:	701a      	strb	r2, [r3, #0]
 8001e58:	e7ee      	b.n	8001e38 <_puts_r+0x88>
	...

08001e5c <puts>:
 8001e5c:	4b02      	ldr	r3, [pc, #8]	@ (8001e68 <puts+0xc>)
 8001e5e:	4601      	mov	r1, r0
 8001e60:	6818      	ldr	r0, [r3, #0]
 8001e62:	f7ff bfa5 	b.w	8001db0 <_puts_r>
 8001e66:	bf00      	nop
 8001e68:	20000018 	.word	0x20000018

08001e6c <__sread>:
 8001e6c:	b510      	push	{r4, lr}
 8001e6e:	460c      	mov	r4, r1
 8001e70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e74:	f000 f8fc 	bl	8002070 <_read_r>
 8001e78:	2800      	cmp	r0, #0
 8001e7a:	bfab      	itete	ge
 8001e7c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8001e7e:	89a3      	ldrhlt	r3, [r4, #12]
 8001e80:	181b      	addge	r3, r3, r0
 8001e82:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001e86:	bfac      	ite	ge
 8001e88:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001e8a:	81a3      	strhlt	r3, [r4, #12]
 8001e8c:	bd10      	pop	{r4, pc}

08001e8e <__swrite>:
 8001e8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e92:	461f      	mov	r7, r3
 8001e94:	898b      	ldrh	r3, [r1, #12]
 8001e96:	4605      	mov	r5, r0
 8001e98:	05db      	lsls	r3, r3, #23
 8001e9a:	460c      	mov	r4, r1
 8001e9c:	4616      	mov	r6, r2
 8001e9e:	d505      	bpl.n	8001eac <__swrite+0x1e>
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ea8:	f000 f8d0 	bl	800204c <_lseek_r>
 8001eac:	89a3      	ldrh	r3, [r4, #12]
 8001eae:	4632      	mov	r2, r6
 8001eb0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001eb4:	81a3      	strh	r3, [r4, #12]
 8001eb6:	4628      	mov	r0, r5
 8001eb8:	463b      	mov	r3, r7
 8001eba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001ebe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001ec2:	f000 b8e7 	b.w	8002094 <_write_r>

08001ec6 <__sseek>:
 8001ec6:	b510      	push	{r4, lr}
 8001ec8:	460c      	mov	r4, r1
 8001eca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ece:	f000 f8bd 	bl	800204c <_lseek_r>
 8001ed2:	1c43      	adds	r3, r0, #1
 8001ed4:	89a3      	ldrh	r3, [r4, #12]
 8001ed6:	bf15      	itete	ne
 8001ed8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001eda:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001ede:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001ee2:	81a3      	strheq	r3, [r4, #12]
 8001ee4:	bf18      	it	ne
 8001ee6:	81a3      	strhne	r3, [r4, #12]
 8001ee8:	bd10      	pop	{r4, pc}

08001eea <__sclose>:
 8001eea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001eee:	f000 b89d 	b.w	800202c <_close_r>

08001ef2 <__swbuf_r>:
 8001ef2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ef4:	460e      	mov	r6, r1
 8001ef6:	4614      	mov	r4, r2
 8001ef8:	4605      	mov	r5, r0
 8001efa:	b118      	cbz	r0, 8001f04 <__swbuf_r+0x12>
 8001efc:	6a03      	ldr	r3, [r0, #32]
 8001efe:	b90b      	cbnz	r3, 8001f04 <__swbuf_r+0x12>
 8001f00:	f7ff ff0e 	bl	8001d20 <__sinit>
 8001f04:	69a3      	ldr	r3, [r4, #24]
 8001f06:	60a3      	str	r3, [r4, #8]
 8001f08:	89a3      	ldrh	r3, [r4, #12]
 8001f0a:	071a      	lsls	r2, r3, #28
 8001f0c:	d501      	bpl.n	8001f12 <__swbuf_r+0x20>
 8001f0e:	6923      	ldr	r3, [r4, #16]
 8001f10:	b943      	cbnz	r3, 8001f24 <__swbuf_r+0x32>
 8001f12:	4621      	mov	r1, r4
 8001f14:	4628      	mov	r0, r5
 8001f16:	f000 f82b 	bl	8001f70 <__swsetup_r>
 8001f1a:	b118      	cbz	r0, 8001f24 <__swbuf_r+0x32>
 8001f1c:	f04f 37ff 	mov.w	r7, #4294967295
 8001f20:	4638      	mov	r0, r7
 8001f22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f24:	6823      	ldr	r3, [r4, #0]
 8001f26:	6922      	ldr	r2, [r4, #16]
 8001f28:	b2f6      	uxtb	r6, r6
 8001f2a:	1a98      	subs	r0, r3, r2
 8001f2c:	6963      	ldr	r3, [r4, #20]
 8001f2e:	4637      	mov	r7, r6
 8001f30:	4283      	cmp	r3, r0
 8001f32:	dc05      	bgt.n	8001f40 <__swbuf_r+0x4e>
 8001f34:	4621      	mov	r1, r4
 8001f36:	4628      	mov	r0, r5
 8001f38:	f000 fd32 	bl	80029a0 <_fflush_r>
 8001f3c:	2800      	cmp	r0, #0
 8001f3e:	d1ed      	bne.n	8001f1c <__swbuf_r+0x2a>
 8001f40:	68a3      	ldr	r3, [r4, #8]
 8001f42:	3b01      	subs	r3, #1
 8001f44:	60a3      	str	r3, [r4, #8]
 8001f46:	6823      	ldr	r3, [r4, #0]
 8001f48:	1c5a      	adds	r2, r3, #1
 8001f4a:	6022      	str	r2, [r4, #0]
 8001f4c:	701e      	strb	r6, [r3, #0]
 8001f4e:	6962      	ldr	r2, [r4, #20]
 8001f50:	1c43      	adds	r3, r0, #1
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d004      	beq.n	8001f60 <__swbuf_r+0x6e>
 8001f56:	89a3      	ldrh	r3, [r4, #12]
 8001f58:	07db      	lsls	r3, r3, #31
 8001f5a:	d5e1      	bpl.n	8001f20 <__swbuf_r+0x2e>
 8001f5c:	2e0a      	cmp	r6, #10
 8001f5e:	d1df      	bne.n	8001f20 <__swbuf_r+0x2e>
 8001f60:	4621      	mov	r1, r4
 8001f62:	4628      	mov	r0, r5
 8001f64:	f000 fd1c 	bl	80029a0 <_fflush_r>
 8001f68:	2800      	cmp	r0, #0
 8001f6a:	d0d9      	beq.n	8001f20 <__swbuf_r+0x2e>
 8001f6c:	e7d6      	b.n	8001f1c <__swbuf_r+0x2a>
	...

08001f70 <__swsetup_r>:
 8001f70:	b538      	push	{r3, r4, r5, lr}
 8001f72:	4b29      	ldr	r3, [pc, #164]	@ (8002018 <__swsetup_r+0xa8>)
 8001f74:	4605      	mov	r5, r0
 8001f76:	6818      	ldr	r0, [r3, #0]
 8001f78:	460c      	mov	r4, r1
 8001f7a:	b118      	cbz	r0, 8001f84 <__swsetup_r+0x14>
 8001f7c:	6a03      	ldr	r3, [r0, #32]
 8001f7e:	b90b      	cbnz	r3, 8001f84 <__swsetup_r+0x14>
 8001f80:	f7ff fece 	bl	8001d20 <__sinit>
 8001f84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001f88:	0719      	lsls	r1, r3, #28
 8001f8a:	d422      	bmi.n	8001fd2 <__swsetup_r+0x62>
 8001f8c:	06da      	lsls	r2, r3, #27
 8001f8e:	d407      	bmi.n	8001fa0 <__swsetup_r+0x30>
 8001f90:	2209      	movs	r2, #9
 8001f92:	602a      	str	r2, [r5, #0]
 8001f94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001f98:	f04f 30ff 	mov.w	r0, #4294967295
 8001f9c:	81a3      	strh	r3, [r4, #12]
 8001f9e:	e033      	b.n	8002008 <__swsetup_r+0x98>
 8001fa0:	0758      	lsls	r0, r3, #29
 8001fa2:	d512      	bpl.n	8001fca <__swsetup_r+0x5a>
 8001fa4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001fa6:	b141      	cbz	r1, 8001fba <__swsetup_r+0x4a>
 8001fa8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001fac:	4299      	cmp	r1, r3
 8001fae:	d002      	beq.n	8001fb6 <__swsetup_r+0x46>
 8001fb0:	4628      	mov	r0, r5
 8001fb2:	f000 f8af 	bl	8002114 <_free_r>
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	6363      	str	r3, [r4, #52]	@ 0x34
 8001fba:	89a3      	ldrh	r3, [r4, #12]
 8001fbc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001fc0:	81a3      	strh	r3, [r4, #12]
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	6063      	str	r3, [r4, #4]
 8001fc6:	6923      	ldr	r3, [r4, #16]
 8001fc8:	6023      	str	r3, [r4, #0]
 8001fca:	89a3      	ldrh	r3, [r4, #12]
 8001fcc:	f043 0308 	orr.w	r3, r3, #8
 8001fd0:	81a3      	strh	r3, [r4, #12]
 8001fd2:	6923      	ldr	r3, [r4, #16]
 8001fd4:	b94b      	cbnz	r3, 8001fea <__swsetup_r+0x7a>
 8001fd6:	89a3      	ldrh	r3, [r4, #12]
 8001fd8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001fdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001fe0:	d003      	beq.n	8001fea <__swsetup_r+0x7a>
 8001fe2:	4621      	mov	r1, r4
 8001fe4:	4628      	mov	r0, r5
 8001fe6:	f000 fd28 	bl	8002a3a <__smakebuf_r>
 8001fea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001fee:	f013 0201 	ands.w	r2, r3, #1
 8001ff2:	d00a      	beq.n	800200a <__swsetup_r+0x9a>
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	60a2      	str	r2, [r4, #8]
 8001ff8:	6962      	ldr	r2, [r4, #20]
 8001ffa:	4252      	negs	r2, r2
 8001ffc:	61a2      	str	r2, [r4, #24]
 8001ffe:	6922      	ldr	r2, [r4, #16]
 8002000:	b942      	cbnz	r2, 8002014 <__swsetup_r+0xa4>
 8002002:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002006:	d1c5      	bne.n	8001f94 <__swsetup_r+0x24>
 8002008:	bd38      	pop	{r3, r4, r5, pc}
 800200a:	0799      	lsls	r1, r3, #30
 800200c:	bf58      	it	pl
 800200e:	6962      	ldrpl	r2, [r4, #20]
 8002010:	60a2      	str	r2, [r4, #8]
 8002012:	e7f4      	b.n	8001ffe <__swsetup_r+0x8e>
 8002014:	2000      	movs	r0, #0
 8002016:	e7f7      	b.n	8002008 <__swsetup_r+0x98>
 8002018:	20000018 	.word	0x20000018

0800201c <memset>:
 800201c:	4603      	mov	r3, r0
 800201e:	4402      	add	r2, r0
 8002020:	4293      	cmp	r3, r2
 8002022:	d100      	bne.n	8002026 <memset+0xa>
 8002024:	4770      	bx	lr
 8002026:	f803 1b01 	strb.w	r1, [r3], #1
 800202a:	e7f9      	b.n	8002020 <memset+0x4>

0800202c <_close_r>:
 800202c:	b538      	push	{r3, r4, r5, lr}
 800202e:	2300      	movs	r3, #0
 8002030:	4d05      	ldr	r5, [pc, #20]	@ (8002048 <_close_r+0x1c>)
 8002032:	4604      	mov	r4, r0
 8002034:	4608      	mov	r0, r1
 8002036:	602b      	str	r3, [r5, #0]
 8002038:	f7fe fb59 	bl	80006ee <_close>
 800203c:	1c43      	adds	r3, r0, #1
 800203e:	d102      	bne.n	8002046 <_close_r+0x1a>
 8002040:	682b      	ldr	r3, [r5, #0]
 8002042:	b103      	cbz	r3, 8002046 <_close_r+0x1a>
 8002044:	6023      	str	r3, [r4, #0]
 8002046:	bd38      	pop	{r3, r4, r5, pc}
 8002048:	20000214 	.word	0x20000214

0800204c <_lseek_r>:
 800204c:	b538      	push	{r3, r4, r5, lr}
 800204e:	4604      	mov	r4, r0
 8002050:	4608      	mov	r0, r1
 8002052:	4611      	mov	r1, r2
 8002054:	2200      	movs	r2, #0
 8002056:	4d05      	ldr	r5, [pc, #20]	@ (800206c <_lseek_r+0x20>)
 8002058:	602a      	str	r2, [r5, #0]
 800205a:	461a      	mov	r2, r3
 800205c:	f7fe fb6b 	bl	8000736 <_lseek>
 8002060:	1c43      	adds	r3, r0, #1
 8002062:	d102      	bne.n	800206a <_lseek_r+0x1e>
 8002064:	682b      	ldr	r3, [r5, #0]
 8002066:	b103      	cbz	r3, 800206a <_lseek_r+0x1e>
 8002068:	6023      	str	r3, [r4, #0]
 800206a:	bd38      	pop	{r3, r4, r5, pc}
 800206c:	20000214 	.word	0x20000214

08002070 <_read_r>:
 8002070:	b538      	push	{r3, r4, r5, lr}
 8002072:	4604      	mov	r4, r0
 8002074:	4608      	mov	r0, r1
 8002076:	4611      	mov	r1, r2
 8002078:	2200      	movs	r2, #0
 800207a:	4d05      	ldr	r5, [pc, #20]	@ (8002090 <_read_r+0x20>)
 800207c:	602a      	str	r2, [r5, #0]
 800207e:	461a      	mov	r2, r3
 8002080:	f7fe fafc 	bl	800067c <_read>
 8002084:	1c43      	adds	r3, r0, #1
 8002086:	d102      	bne.n	800208e <_read_r+0x1e>
 8002088:	682b      	ldr	r3, [r5, #0]
 800208a:	b103      	cbz	r3, 800208e <_read_r+0x1e>
 800208c:	6023      	str	r3, [r4, #0]
 800208e:	bd38      	pop	{r3, r4, r5, pc}
 8002090:	20000214 	.word	0x20000214

08002094 <_write_r>:
 8002094:	b538      	push	{r3, r4, r5, lr}
 8002096:	4604      	mov	r4, r0
 8002098:	4608      	mov	r0, r1
 800209a:	4611      	mov	r1, r2
 800209c:	2200      	movs	r2, #0
 800209e:	4d05      	ldr	r5, [pc, #20]	@ (80020b4 <_write_r+0x20>)
 80020a0:	602a      	str	r2, [r5, #0]
 80020a2:	461a      	mov	r2, r3
 80020a4:	f7fe fb07 	bl	80006b6 <_write>
 80020a8:	1c43      	adds	r3, r0, #1
 80020aa:	d102      	bne.n	80020b2 <_write_r+0x1e>
 80020ac:	682b      	ldr	r3, [r5, #0]
 80020ae:	b103      	cbz	r3, 80020b2 <_write_r+0x1e>
 80020b0:	6023      	str	r3, [r4, #0]
 80020b2:	bd38      	pop	{r3, r4, r5, pc}
 80020b4:	20000214 	.word	0x20000214

080020b8 <__errno>:
 80020b8:	4b01      	ldr	r3, [pc, #4]	@ (80020c0 <__errno+0x8>)
 80020ba:	6818      	ldr	r0, [r3, #0]
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	20000018 	.word	0x20000018

080020c4 <__libc_init_array>:
 80020c4:	b570      	push	{r4, r5, r6, lr}
 80020c6:	2600      	movs	r6, #0
 80020c8:	4d0c      	ldr	r5, [pc, #48]	@ (80020fc <__libc_init_array+0x38>)
 80020ca:	4c0d      	ldr	r4, [pc, #52]	@ (8002100 <__libc_init_array+0x3c>)
 80020cc:	1b64      	subs	r4, r4, r5
 80020ce:	10a4      	asrs	r4, r4, #2
 80020d0:	42a6      	cmp	r6, r4
 80020d2:	d109      	bne.n	80020e8 <__libc_init_array+0x24>
 80020d4:	f000 fd2e 	bl	8002b34 <_init>
 80020d8:	2600      	movs	r6, #0
 80020da:	4d0a      	ldr	r5, [pc, #40]	@ (8002104 <__libc_init_array+0x40>)
 80020dc:	4c0a      	ldr	r4, [pc, #40]	@ (8002108 <__libc_init_array+0x44>)
 80020de:	1b64      	subs	r4, r4, r5
 80020e0:	10a4      	asrs	r4, r4, #2
 80020e2:	42a6      	cmp	r6, r4
 80020e4:	d105      	bne.n	80020f2 <__libc_init_array+0x2e>
 80020e6:	bd70      	pop	{r4, r5, r6, pc}
 80020e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80020ec:	4798      	blx	r3
 80020ee:	3601      	adds	r6, #1
 80020f0:	e7ee      	b.n	80020d0 <__libc_init_array+0xc>
 80020f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80020f6:	4798      	blx	r3
 80020f8:	3601      	adds	r6, #1
 80020fa:	e7f2      	b.n	80020e2 <__libc_init_array+0x1e>
 80020fc:	08002bd4 	.word	0x08002bd4
 8002100:	08002bd4 	.word	0x08002bd4
 8002104:	08002bd4 	.word	0x08002bd4
 8002108:	08002bd8 	.word	0x08002bd8

0800210c <__retarget_lock_init_recursive>:
 800210c:	4770      	bx	lr

0800210e <__retarget_lock_acquire_recursive>:
 800210e:	4770      	bx	lr

08002110 <__retarget_lock_release_recursive>:
 8002110:	4770      	bx	lr
	...

08002114 <_free_r>:
 8002114:	b538      	push	{r3, r4, r5, lr}
 8002116:	4605      	mov	r5, r0
 8002118:	2900      	cmp	r1, #0
 800211a:	d040      	beq.n	800219e <_free_r+0x8a>
 800211c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002120:	1f0c      	subs	r4, r1, #4
 8002122:	2b00      	cmp	r3, #0
 8002124:	bfb8      	it	lt
 8002126:	18e4      	addlt	r4, r4, r3
 8002128:	f000 f8de 	bl	80022e8 <__malloc_lock>
 800212c:	4a1c      	ldr	r2, [pc, #112]	@ (80021a0 <_free_r+0x8c>)
 800212e:	6813      	ldr	r3, [r2, #0]
 8002130:	b933      	cbnz	r3, 8002140 <_free_r+0x2c>
 8002132:	6063      	str	r3, [r4, #4]
 8002134:	6014      	str	r4, [r2, #0]
 8002136:	4628      	mov	r0, r5
 8002138:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800213c:	f000 b8da 	b.w	80022f4 <__malloc_unlock>
 8002140:	42a3      	cmp	r3, r4
 8002142:	d908      	bls.n	8002156 <_free_r+0x42>
 8002144:	6820      	ldr	r0, [r4, #0]
 8002146:	1821      	adds	r1, r4, r0
 8002148:	428b      	cmp	r3, r1
 800214a:	bf01      	itttt	eq
 800214c:	6819      	ldreq	r1, [r3, #0]
 800214e:	685b      	ldreq	r3, [r3, #4]
 8002150:	1809      	addeq	r1, r1, r0
 8002152:	6021      	streq	r1, [r4, #0]
 8002154:	e7ed      	b.n	8002132 <_free_r+0x1e>
 8002156:	461a      	mov	r2, r3
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	b10b      	cbz	r3, 8002160 <_free_r+0x4c>
 800215c:	42a3      	cmp	r3, r4
 800215e:	d9fa      	bls.n	8002156 <_free_r+0x42>
 8002160:	6811      	ldr	r1, [r2, #0]
 8002162:	1850      	adds	r0, r2, r1
 8002164:	42a0      	cmp	r0, r4
 8002166:	d10b      	bne.n	8002180 <_free_r+0x6c>
 8002168:	6820      	ldr	r0, [r4, #0]
 800216a:	4401      	add	r1, r0
 800216c:	1850      	adds	r0, r2, r1
 800216e:	4283      	cmp	r3, r0
 8002170:	6011      	str	r1, [r2, #0]
 8002172:	d1e0      	bne.n	8002136 <_free_r+0x22>
 8002174:	6818      	ldr	r0, [r3, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	4408      	add	r0, r1
 800217a:	6010      	str	r0, [r2, #0]
 800217c:	6053      	str	r3, [r2, #4]
 800217e:	e7da      	b.n	8002136 <_free_r+0x22>
 8002180:	d902      	bls.n	8002188 <_free_r+0x74>
 8002182:	230c      	movs	r3, #12
 8002184:	602b      	str	r3, [r5, #0]
 8002186:	e7d6      	b.n	8002136 <_free_r+0x22>
 8002188:	6820      	ldr	r0, [r4, #0]
 800218a:	1821      	adds	r1, r4, r0
 800218c:	428b      	cmp	r3, r1
 800218e:	bf01      	itttt	eq
 8002190:	6819      	ldreq	r1, [r3, #0]
 8002192:	685b      	ldreq	r3, [r3, #4]
 8002194:	1809      	addeq	r1, r1, r0
 8002196:	6021      	streq	r1, [r4, #0]
 8002198:	6063      	str	r3, [r4, #4]
 800219a:	6054      	str	r4, [r2, #4]
 800219c:	e7cb      	b.n	8002136 <_free_r+0x22>
 800219e:	bd38      	pop	{r3, r4, r5, pc}
 80021a0:	20000220 	.word	0x20000220

080021a4 <sbrk_aligned>:
 80021a4:	b570      	push	{r4, r5, r6, lr}
 80021a6:	4e0f      	ldr	r6, [pc, #60]	@ (80021e4 <sbrk_aligned+0x40>)
 80021a8:	460c      	mov	r4, r1
 80021aa:	6831      	ldr	r1, [r6, #0]
 80021ac:	4605      	mov	r5, r0
 80021ae:	b911      	cbnz	r1, 80021b6 <sbrk_aligned+0x12>
 80021b0:	f000 fca2 	bl	8002af8 <_sbrk_r>
 80021b4:	6030      	str	r0, [r6, #0]
 80021b6:	4621      	mov	r1, r4
 80021b8:	4628      	mov	r0, r5
 80021ba:	f000 fc9d 	bl	8002af8 <_sbrk_r>
 80021be:	1c43      	adds	r3, r0, #1
 80021c0:	d103      	bne.n	80021ca <sbrk_aligned+0x26>
 80021c2:	f04f 34ff 	mov.w	r4, #4294967295
 80021c6:	4620      	mov	r0, r4
 80021c8:	bd70      	pop	{r4, r5, r6, pc}
 80021ca:	1cc4      	adds	r4, r0, #3
 80021cc:	f024 0403 	bic.w	r4, r4, #3
 80021d0:	42a0      	cmp	r0, r4
 80021d2:	d0f8      	beq.n	80021c6 <sbrk_aligned+0x22>
 80021d4:	1a21      	subs	r1, r4, r0
 80021d6:	4628      	mov	r0, r5
 80021d8:	f000 fc8e 	bl	8002af8 <_sbrk_r>
 80021dc:	3001      	adds	r0, #1
 80021de:	d1f2      	bne.n	80021c6 <sbrk_aligned+0x22>
 80021e0:	e7ef      	b.n	80021c2 <sbrk_aligned+0x1e>
 80021e2:	bf00      	nop
 80021e4:	2000021c 	.word	0x2000021c

080021e8 <_malloc_r>:
 80021e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80021ec:	1ccd      	adds	r5, r1, #3
 80021ee:	f025 0503 	bic.w	r5, r5, #3
 80021f2:	3508      	adds	r5, #8
 80021f4:	2d0c      	cmp	r5, #12
 80021f6:	bf38      	it	cc
 80021f8:	250c      	movcc	r5, #12
 80021fa:	2d00      	cmp	r5, #0
 80021fc:	4606      	mov	r6, r0
 80021fe:	db01      	blt.n	8002204 <_malloc_r+0x1c>
 8002200:	42a9      	cmp	r1, r5
 8002202:	d904      	bls.n	800220e <_malloc_r+0x26>
 8002204:	230c      	movs	r3, #12
 8002206:	6033      	str	r3, [r6, #0]
 8002208:	2000      	movs	r0, #0
 800220a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800220e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80022e4 <_malloc_r+0xfc>
 8002212:	f000 f869 	bl	80022e8 <__malloc_lock>
 8002216:	f8d8 3000 	ldr.w	r3, [r8]
 800221a:	461c      	mov	r4, r3
 800221c:	bb44      	cbnz	r4, 8002270 <_malloc_r+0x88>
 800221e:	4629      	mov	r1, r5
 8002220:	4630      	mov	r0, r6
 8002222:	f7ff ffbf 	bl	80021a4 <sbrk_aligned>
 8002226:	1c43      	adds	r3, r0, #1
 8002228:	4604      	mov	r4, r0
 800222a:	d158      	bne.n	80022de <_malloc_r+0xf6>
 800222c:	f8d8 4000 	ldr.w	r4, [r8]
 8002230:	4627      	mov	r7, r4
 8002232:	2f00      	cmp	r7, #0
 8002234:	d143      	bne.n	80022be <_malloc_r+0xd6>
 8002236:	2c00      	cmp	r4, #0
 8002238:	d04b      	beq.n	80022d2 <_malloc_r+0xea>
 800223a:	6823      	ldr	r3, [r4, #0]
 800223c:	4639      	mov	r1, r7
 800223e:	4630      	mov	r0, r6
 8002240:	eb04 0903 	add.w	r9, r4, r3
 8002244:	f000 fc58 	bl	8002af8 <_sbrk_r>
 8002248:	4581      	cmp	r9, r0
 800224a:	d142      	bne.n	80022d2 <_malloc_r+0xea>
 800224c:	6821      	ldr	r1, [r4, #0]
 800224e:	4630      	mov	r0, r6
 8002250:	1a6d      	subs	r5, r5, r1
 8002252:	4629      	mov	r1, r5
 8002254:	f7ff ffa6 	bl	80021a4 <sbrk_aligned>
 8002258:	3001      	adds	r0, #1
 800225a:	d03a      	beq.n	80022d2 <_malloc_r+0xea>
 800225c:	6823      	ldr	r3, [r4, #0]
 800225e:	442b      	add	r3, r5
 8002260:	6023      	str	r3, [r4, #0]
 8002262:	f8d8 3000 	ldr.w	r3, [r8]
 8002266:	685a      	ldr	r2, [r3, #4]
 8002268:	bb62      	cbnz	r2, 80022c4 <_malloc_r+0xdc>
 800226a:	f8c8 7000 	str.w	r7, [r8]
 800226e:	e00f      	b.n	8002290 <_malloc_r+0xa8>
 8002270:	6822      	ldr	r2, [r4, #0]
 8002272:	1b52      	subs	r2, r2, r5
 8002274:	d420      	bmi.n	80022b8 <_malloc_r+0xd0>
 8002276:	2a0b      	cmp	r2, #11
 8002278:	d917      	bls.n	80022aa <_malloc_r+0xc2>
 800227a:	1961      	adds	r1, r4, r5
 800227c:	42a3      	cmp	r3, r4
 800227e:	6025      	str	r5, [r4, #0]
 8002280:	bf18      	it	ne
 8002282:	6059      	strne	r1, [r3, #4]
 8002284:	6863      	ldr	r3, [r4, #4]
 8002286:	bf08      	it	eq
 8002288:	f8c8 1000 	streq.w	r1, [r8]
 800228c:	5162      	str	r2, [r4, r5]
 800228e:	604b      	str	r3, [r1, #4]
 8002290:	4630      	mov	r0, r6
 8002292:	f000 f82f 	bl	80022f4 <__malloc_unlock>
 8002296:	f104 000b 	add.w	r0, r4, #11
 800229a:	1d23      	adds	r3, r4, #4
 800229c:	f020 0007 	bic.w	r0, r0, #7
 80022a0:	1ac2      	subs	r2, r0, r3
 80022a2:	bf1c      	itt	ne
 80022a4:	1a1b      	subne	r3, r3, r0
 80022a6:	50a3      	strne	r3, [r4, r2]
 80022a8:	e7af      	b.n	800220a <_malloc_r+0x22>
 80022aa:	6862      	ldr	r2, [r4, #4]
 80022ac:	42a3      	cmp	r3, r4
 80022ae:	bf0c      	ite	eq
 80022b0:	f8c8 2000 	streq.w	r2, [r8]
 80022b4:	605a      	strne	r2, [r3, #4]
 80022b6:	e7eb      	b.n	8002290 <_malloc_r+0xa8>
 80022b8:	4623      	mov	r3, r4
 80022ba:	6864      	ldr	r4, [r4, #4]
 80022bc:	e7ae      	b.n	800221c <_malloc_r+0x34>
 80022be:	463c      	mov	r4, r7
 80022c0:	687f      	ldr	r7, [r7, #4]
 80022c2:	e7b6      	b.n	8002232 <_malloc_r+0x4a>
 80022c4:	461a      	mov	r2, r3
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	42a3      	cmp	r3, r4
 80022ca:	d1fb      	bne.n	80022c4 <_malloc_r+0xdc>
 80022cc:	2300      	movs	r3, #0
 80022ce:	6053      	str	r3, [r2, #4]
 80022d0:	e7de      	b.n	8002290 <_malloc_r+0xa8>
 80022d2:	230c      	movs	r3, #12
 80022d4:	4630      	mov	r0, r6
 80022d6:	6033      	str	r3, [r6, #0]
 80022d8:	f000 f80c 	bl	80022f4 <__malloc_unlock>
 80022dc:	e794      	b.n	8002208 <_malloc_r+0x20>
 80022de:	6005      	str	r5, [r0, #0]
 80022e0:	e7d6      	b.n	8002290 <_malloc_r+0xa8>
 80022e2:	bf00      	nop
 80022e4:	20000220 	.word	0x20000220

080022e8 <__malloc_lock>:
 80022e8:	4801      	ldr	r0, [pc, #4]	@ (80022f0 <__malloc_lock+0x8>)
 80022ea:	f7ff bf10 	b.w	800210e <__retarget_lock_acquire_recursive>
 80022ee:	bf00      	nop
 80022f0:	20000218 	.word	0x20000218

080022f4 <__malloc_unlock>:
 80022f4:	4801      	ldr	r0, [pc, #4]	@ (80022fc <__malloc_unlock+0x8>)
 80022f6:	f7ff bf0b 	b.w	8002110 <__retarget_lock_release_recursive>
 80022fa:	bf00      	nop
 80022fc:	20000218 	.word	0x20000218

08002300 <__sfputc_r>:
 8002300:	6893      	ldr	r3, [r2, #8]
 8002302:	b410      	push	{r4}
 8002304:	3b01      	subs	r3, #1
 8002306:	2b00      	cmp	r3, #0
 8002308:	6093      	str	r3, [r2, #8]
 800230a:	da07      	bge.n	800231c <__sfputc_r+0x1c>
 800230c:	6994      	ldr	r4, [r2, #24]
 800230e:	42a3      	cmp	r3, r4
 8002310:	db01      	blt.n	8002316 <__sfputc_r+0x16>
 8002312:	290a      	cmp	r1, #10
 8002314:	d102      	bne.n	800231c <__sfputc_r+0x1c>
 8002316:	bc10      	pop	{r4}
 8002318:	f7ff bdeb 	b.w	8001ef2 <__swbuf_r>
 800231c:	6813      	ldr	r3, [r2, #0]
 800231e:	1c58      	adds	r0, r3, #1
 8002320:	6010      	str	r0, [r2, #0]
 8002322:	7019      	strb	r1, [r3, #0]
 8002324:	4608      	mov	r0, r1
 8002326:	bc10      	pop	{r4}
 8002328:	4770      	bx	lr

0800232a <__sfputs_r>:
 800232a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800232c:	4606      	mov	r6, r0
 800232e:	460f      	mov	r7, r1
 8002330:	4614      	mov	r4, r2
 8002332:	18d5      	adds	r5, r2, r3
 8002334:	42ac      	cmp	r4, r5
 8002336:	d101      	bne.n	800233c <__sfputs_r+0x12>
 8002338:	2000      	movs	r0, #0
 800233a:	e007      	b.n	800234c <__sfputs_r+0x22>
 800233c:	463a      	mov	r2, r7
 800233e:	4630      	mov	r0, r6
 8002340:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002344:	f7ff ffdc 	bl	8002300 <__sfputc_r>
 8002348:	1c43      	adds	r3, r0, #1
 800234a:	d1f3      	bne.n	8002334 <__sfputs_r+0xa>
 800234c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002350 <_vfiprintf_r>:
 8002350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002354:	460d      	mov	r5, r1
 8002356:	4614      	mov	r4, r2
 8002358:	4698      	mov	r8, r3
 800235a:	4606      	mov	r6, r0
 800235c:	b09d      	sub	sp, #116	@ 0x74
 800235e:	b118      	cbz	r0, 8002368 <_vfiprintf_r+0x18>
 8002360:	6a03      	ldr	r3, [r0, #32]
 8002362:	b90b      	cbnz	r3, 8002368 <_vfiprintf_r+0x18>
 8002364:	f7ff fcdc 	bl	8001d20 <__sinit>
 8002368:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800236a:	07d9      	lsls	r1, r3, #31
 800236c:	d405      	bmi.n	800237a <_vfiprintf_r+0x2a>
 800236e:	89ab      	ldrh	r3, [r5, #12]
 8002370:	059a      	lsls	r2, r3, #22
 8002372:	d402      	bmi.n	800237a <_vfiprintf_r+0x2a>
 8002374:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002376:	f7ff feca 	bl	800210e <__retarget_lock_acquire_recursive>
 800237a:	89ab      	ldrh	r3, [r5, #12]
 800237c:	071b      	lsls	r3, r3, #28
 800237e:	d501      	bpl.n	8002384 <_vfiprintf_r+0x34>
 8002380:	692b      	ldr	r3, [r5, #16]
 8002382:	b99b      	cbnz	r3, 80023ac <_vfiprintf_r+0x5c>
 8002384:	4629      	mov	r1, r5
 8002386:	4630      	mov	r0, r6
 8002388:	f7ff fdf2 	bl	8001f70 <__swsetup_r>
 800238c:	b170      	cbz	r0, 80023ac <_vfiprintf_r+0x5c>
 800238e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002390:	07dc      	lsls	r4, r3, #31
 8002392:	d504      	bpl.n	800239e <_vfiprintf_r+0x4e>
 8002394:	f04f 30ff 	mov.w	r0, #4294967295
 8002398:	b01d      	add	sp, #116	@ 0x74
 800239a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800239e:	89ab      	ldrh	r3, [r5, #12]
 80023a0:	0598      	lsls	r0, r3, #22
 80023a2:	d4f7      	bmi.n	8002394 <_vfiprintf_r+0x44>
 80023a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80023a6:	f7ff feb3 	bl	8002110 <__retarget_lock_release_recursive>
 80023aa:	e7f3      	b.n	8002394 <_vfiprintf_r+0x44>
 80023ac:	2300      	movs	r3, #0
 80023ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80023b0:	2320      	movs	r3, #32
 80023b2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80023b6:	2330      	movs	r3, #48	@ 0x30
 80023b8:	f04f 0901 	mov.w	r9, #1
 80023bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80023c0:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800256c <_vfiprintf_r+0x21c>
 80023c4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80023c8:	4623      	mov	r3, r4
 80023ca:	469a      	mov	sl, r3
 80023cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80023d0:	b10a      	cbz	r2, 80023d6 <_vfiprintf_r+0x86>
 80023d2:	2a25      	cmp	r2, #37	@ 0x25
 80023d4:	d1f9      	bne.n	80023ca <_vfiprintf_r+0x7a>
 80023d6:	ebba 0b04 	subs.w	fp, sl, r4
 80023da:	d00b      	beq.n	80023f4 <_vfiprintf_r+0xa4>
 80023dc:	465b      	mov	r3, fp
 80023de:	4622      	mov	r2, r4
 80023e0:	4629      	mov	r1, r5
 80023e2:	4630      	mov	r0, r6
 80023e4:	f7ff ffa1 	bl	800232a <__sfputs_r>
 80023e8:	3001      	adds	r0, #1
 80023ea:	f000 80a7 	beq.w	800253c <_vfiprintf_r+0x1ec>
 80023ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80023f0:	445a      	add	r2, fp
 80023f2:	9209      	str	r2, [sp, #36]	@ 0x24
 80023f4:	f89a 3000 	ldrb.w	r3, [sl]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	f000 809f 	beq.w	800253c <_vfiprintf_r+0x1ec>
 80023fe:	2300      	movs	r3, #0
 8002400:	f04f 32ff 	mov.w	r2, #4294967295
 8002404:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002408:	f10a 0a01 	add.w	sl, sl, #1
 800240c:	9304      	str	r3, [sp, #16]
 800240e:	9307      	str	r3, [sp, #28]
 8002410:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002414:	931a      	str	r3, [sp, #104]	@ 0x68
 8002416:	4654      	mov	r4, sl
 8002418:	2205      	movs	r2, #5
 800241a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800241e:	4853      	ldr	r0, [pc, #332]	@ (800256c <_vfiprintf_r+0x21c>)
 8002420:	f000 fb7a 	bl	8002b18 <memchr>
 8002424:	9a04      	ldr	r2, [sp, #16]
 8002426:	b9d8      	cbnz	r0, 8002460 <_vfiprintf_r+0x110>
 8002428:	06d1      	lsls	r1, r2, #27
 800242a:	bf44      	itt	mi
 800242c:	2320      	movmi	r3, #32
 800242e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002432:	0713      	lsls	r3, r2, #28
 8002434:	bf44      	itt	mi
 8002436:	232b      	movmi	r3, #43	@ 0x2b
 8002438:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800243c:	f89a 3000 	ldrb.w	r3, [sl]
 8002440:	2b2a      	cmp	r3, #42	@ 0x2a
 8002442:	d015      	beq.n	8002470 <_vfiprintf_r+0x120>
 8002444:	4654      	mov	r4, sl
 8002446:	2000      	movs	r0, #0
 8002448:	f04f 0c0a 	mov.w	ip, #10
 800244c:	9a07      	ldr	r2, [sp, #28]
 800244e:	4621      	mov	r1, r4
 8002450:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002454:	3b30      	subs	r3, #48	@ 0x30
 8002456:	2b09      	cmp	r3, #9
 8002458:	d94b      	bls.n	80024f2 <_vfiprintf_r+0x1a2>
 800245a:	b1b0      	cbz	r0, 800248a <_vfiprintf_r+0x13a>
 800245c:	9207      	str	r2, [sp, #28]
 800245e:	e014      	b.n	800248a <_vfiprintf_r+0x13a>
 8002460:	eba0 0308 	sub.w	r3, r0, r8
 8002464:	fa09 f303 	lsl.w	r3, r9, r3
 8002468:	4313      	orrs	r3, r2
 800246a:	46a2      	mov	sl, r4
 800246c:	9304      	str	r3, [sp, #16]
 800246e:	e7d2      	b.n	8002416 <_vfiprintf_r+0xc6>
 8002470:	9b03      	ldr	r3, [sp, #12]
 8002472:	1d19      	adds	r1, r3, #4
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	9103      	str	r1, [sp, #12]
 8002478:	2b00      	cmp	r3, #0
 800247a:	bfbb      	ittet	lt
 800247c:	425b      	neglt	r3, r3
 800247e:	f042 0202 	orrlt.w	r2, r2, #2
 8002482:	9307      	strge	r3, [sp, #28]
 8002484:	9307      	strlt	r3, [sp, #28]
 8002486:	bfb8      	it	lt
 8002488:	9204      	strlt	r2, [sp, #16]
 800248a:	7823      	ldrb	r3, [r4, #0]
 800248c:	2b2e      	cmp	r3, #46	@ 0x2e
 800248e:	d10a      	bne.n	80024a6 <_vfiprintf_r+0x156>
 8002490:	7863      	ldrb	r3, [r4, #1]
 8002492:	2b2a      	cmp	r3, #42	@ 0x2a
 8002494:	d132      	bne.n	80024fc <_vfiprintf_r+0x1ac>
 8002496:	9b03      	ldr	r3, [sp, #12]
 8002498:	3402      	adds	r4, #2
 800249a:	1d1a      	adds	r2, r3, #4
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	9203      	str	r2, [sp, #12]
 80024a0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80024a4:	9305      	str	r3, [sp, #20]
 80024a6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8002570 <_vfiprintf_r+0x220>
 80024aa:	2203      	movs	r2, #3
 80024ac:	4650      	mov	r0, sl
 80024ae:	7821      	ldrb	r1, [r4, #0]
 80024b0:	f000 fb32 	bl	8002b18 <memchr>
 80024b4:	b138      	cbz	r0, 80024c6 <_vfiprintf_r+0x176>
 80024b6:	2240      	movs	r2, #64	@ 0x40
 80024b8:	9b04      	ldr	r3, [sp, #16]
 80024ba:	eba0 000a 	sub.w	r0, r0, sl
 80024be:	4082      	lsls	r2, r0
 80024c0:	4313      	orrs	r3, r2
 80024c2:	3401      	adds	r4, #1
 80024c4:	9304      	str	r3, [sp, #16]
 80024c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80024ca:	2206      	movs	r2, #6
 80024cc:	4829      	ldr	r0, [pc, #164]	@ (8002574 <_vfiprintf_r+0x224>)
 80024ce:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80024d2:	f000 fb21 	bl	8002b18 <memchr>
 80024d6:	2800      	cmp	r0, #0
 80024d8:	d03f      	beq.n	800255a <_vfiprintf_r+0x20a>
 80024da:	4b27      	ldr	r3, [pc, #156]	@ (8002578 <_vfiprintf_r+0x228>)
 80024dc:	bb1b      	cbnz	r3, 8002526 <_vfiprintf_r+0x1d6>
 80024de:	9b03      	ldr	r3, [sp, #12]
 80024e0:	3307      	adds	r3, #7
 80024e2:	f023 0307 	bic.w	r3, r3, #7
 80024e6:	3308      	adds	r3, #8
 80024e8:	9303      	str	r3, [sp, #12]
 80024ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80024ec:	443b      	add	r3, r7
 80024ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80024f0:	e76a      	b.n	80023c8 <_vfiprintf_r+0x78>
 80024f2:	460c      	mov	r4, r1
 80024f4:	2001      	movs	r0, #1
 80024f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80024fa:	e7a8      	b.n	800244e <_vfiprintf_r+0xfe>
 80024fc:	2300      	movs	r3, #0
 80024fe:	f04f 0c0a 	mov.w	ip, #10
 8002502:	4619      	mov	r1, r3
 8002504:	3401      	adds	r4, #1
 8002506:	9305      	str	r3, [sp, #20]
 8002508:	4620      	mov	r0, r4
 800250a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800250e:	3a30      	subs	r2, #48	@ 0x30
 8002510:	2a09      	cmp	r2, #9
 8002512:	d903      	bls.n	800251c <_vfiprintf_r+0x1cc>
 8002514:	2b00      	cmp	r3, #0
 8002516:	d0c6      	beq.n	80024a6 <_vfiprintf_r+0x156>
 8002518:	9105      	str	r1, [sp, #20]
 800251a:	e7c4      	b.n	80024a6 <_vfiprintf_r+0x156>
 800251c:	4604      	mov	r4, r0
 800251e:	2301      	movs	r3, #1
 8002520:	fb0c 2101 	mla	r1, ip, r1, r2
 8002524:	e7f0      	b.n	8002508 <_vfiprintf_r+0x1b8>
 8002526:	ab03      	add	r3, sp, #12
 8002528:	9300      	str	r3, [sp, #0]
 800252a:	462a      	mov	r2, r5
 800252c:	4630      	mov	r0, r6
 800252e:	4b13      	ldr	r3, [pc, #76]	@ (800257c <_vfiprintf_r+0x22c>)
 8002530:	a904      	add	r1, sp, #16
 8002532:	f3af 8000 	nop.w
 8002536:	4607      	mov	r7, r0
 8002538:	1c78      	adds	r0, r7, #1
 800253a:	d1d6      	bne.n	80024ea <_vfiprintf_r+0x19a>
 800253c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800253e:	07d9      	lsls	r1, r3, #31
 8002540:	d405      	bmi.n	800254e <_vfiprintf_r+0x1fe>
 8002542:	89ab      	ldrh	r3, [r5, #12]
 8002544:	059a      	lsls	r2, r3, #22
 8002546:	d402      	bmi.n	800254e <_vfiprintf_r+0x1fe>
 8002548:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800254a:	f7ff fde1 	bl	8002110 <__retarget_lock_release_recursive>
 800254e:	89ab      	ldrh	r3, [r5, #12]
 8002550:	065b      	lsls	r3, r3, #25
 8002552:	f53f af1f 	bmi.w	8002394 <_vfiprintf_r+0x44>
 8002556:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002558:	e71e      	b.n	8002398 <_vfiprintf_r+0x48>
 800255a:	ab03      	add	r3, sp, #12
 800255c:	9300      	str	r3, [sp, #0]
 800255e:	462a      	mov	r2, r5
 8002560:	4630      	mov	r0, r6
 8002562:	4b06      	ldr	r3, [pc, #24]	@ (800257c <_vfiprintf_r+0x22c>)
 8002564:	a904      	add	r1, sp, #16
 8002566:	f000 f87d 	bl	8002664 <_printf_i>
 800256a:	e7e4      	b.n	8002536 <_vfiprintf_r+0x1e6>
 800256c:	08002b9e 	.word	0x08002b9e
 8002570:	08002ba4 	.word	0x08002ba4
 8002574:	08002ba8 	.word	0x08002ba8
 8002578:	00000000 	.word	0x00000000
 800257c:	0800232b 	.word	0x0800232b

08002580 <_printf_common>:
 8002580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002584:	4616      	mov	r6, r2
 8002586:	4698      	mov	r8, r3
 8002588:	688a      	ldr	r2, [r1, #8]
 800258a:	690b      	ldr	r3, [r1, #16]
 800258c:	4607      	mov	r7, r0
 800258e:	4293      	cmp	r3, r2
 8002590:	bfb8      	it	lt
 8002592:	4613      	movlt	r3, r2
 8002594:	6033      	str	r3, [r6, #0]
 8002596:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800259a:	460c      	mov	r4, r1
 800259c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80025a0:	b10a      	cbz	r2, 80025a6 <_printf_common+0x26>
 80025a2:	3301      	adds	r3, #1
 80025a4:	6033      	str	r3, [r6, #0]
 80025a6:	6823      	ldr	r3, [r4, #0]
 80025a8:	0699      	lsls	r1, r3, #26
 80025aa:	bf42      	ittt	mi
 80025ac:	6833      	ldrmi	r3, [r6, #0]
 80025ae:	3302      	addmi	r3, #2
 80025b0:	6033      	strmi	r3, [r6, #0]
 80025b2:	6825      	ldr	r5, [r4, #0]
 80025b4:	f015 0506 	ands.w	r5, r5, #6
 80025b8:	d106      	bne.n	80025c8 <_printf_common+0x48>
 80025ba:	f104 0a19 	add.w	sl, r4, #25
 80025be:	68e3      	ldr	r3, [r4, #12]
 80025c0:	6832      	ldr	r2, [r6, #0]
 80025c2:	1a9b      	subs	r3, r3, r2
 80025c4:	42ab      	cmp	r3, r5
 80025c6:	dc2b      	bgt.n	8002620 <_printf_common+0xa0>
 80025c8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80025cc:	6822      	ldr	r2, [r4, #0]
 80025ce:	3b00      	subs	r3, #0
 80025d0:	bf18      	it	ne
 80025d2:	2301      	movne	r3, #1
 80025d4:	0692      	lsls	r2, r2, #26
 80025d6:	d430      	bmi.n	800263a <_printf_common+0xba>
 80025d8:	4641      	mov	r1, r8
 80025da:	4638      	mov	r0, r7
 80025dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80025e0:	47c8      	blx	r9
 80025e2:	3001      	adds	r0, #1
 80025e4:	d023      	beq.n	800262e <_printf_common+0xae>
 80025e6:	6823      	ldr	r3, [r4, #0]
 80025e8:	6922      	ldr	r2, [r4, #16]
 80025ea:	f003 0306 	and.w	r3, r3, #6
 80025ee:	2b04      	cmp	r3, #4
 80025f0:	bf14      	ite	ne
 80025f2:	2500      	movne	r5, #0
 80025f4:	6833      	ldreq	r3, [r6, #0]
 80025f6:	f04f 0600 	mov.w	r6, #0
 80025fa:	bf08      	it	eq
 80025fc:	68e5      	ldreq	r5, [r4, #12]
 80025fe:	f104 041a 	add.w	r4, r4, #26
 8002602:	bf08      	it	eq
 8002604:	1aed      	subeq	r5, r5, r3
 8002606:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800260a:	bf08      	it	eq
 800260c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002610:	4293      	cmp	r3, r2
 8002612:	bfc4      	itt	gt
 8002614:	1a9b      	subgt	r3, r3, r2
 8002616:	18ed      	addgt	r5, r5, r3
 8002618:	42b5      	cmp	r5, r6
 800261a:	d11a      	bne.n	8002652 <_printf_common+0xd2>
 800261c:	2000      	movs	r0, #0
 800261e:	e008      	b.n	8002632 <_printf_common+0xb2>
 8002620:	2301      	movs	r3, #1
 8002622:	4652      	mov	r2, sl
 8002624:	4641      	mov	r1, r8
 8002626:	4638      	mov	r0, r7
 8002628:	47c8      	blx	r9
 800262a:	3001      	adds	r0, #1
 800262c:	d103      	bne.n	8002636 <_printf_common+0xb6>
 800262e:	f04f 30ff 	mov.w	r0, #4294967295
 8002632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002636:	3501      	adds	r5, #1
 8002638:	e7c1      	b.n	80025be <_printf_common+0x3e>
 800263a:	2030      	movs	r0, #48	@ 0x30
 800263c:	18e1      	adds	r1, r4, r3
 800263e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002642:	1c5a      	adds	r2, r3, #1
 8002644:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002648:	4422      	add	r2, r4
 800264a:	3302      	adds	r3, #2
 800264c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002650:	e7c2      	b.n	80025d8 <_printf_common+0x58>
 8002652:	2301      	movs	r3, #1
 8002654:	4622      	mov	r2, r4
 8002656:	4641      	mov	r1, r8
 8002658:	4638      	mov	r0, r7
 800265a:	47c8      	blx	r9
 800265c:	3001      	adds	r0, #1
 800265e:	d0e6      	beq.n	800262e <_printf_common+0xae>
 8002660:	3601      	adds	r6, #1
 8002662:	e7d9      	b.n	8002618 <_printf_common+0x98>

08002664 <_printf_i>:
 8002664:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002668:	7e0f      	ldrb	r7, [r1, #24]
 800266a:	4691      	mov	r9, r2
 800266c:	2f78      	cmp	r7, #120	@ 0x78
 800266e:	4680      	mov	r8, r0
 8002670:	460c      	mov	r4, r1
 8002672:	469a      	mov	sl, r3
 8002674:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002676:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800267a:	d807      	bhi.n	800268c <_printf_i+0x28>
 800267c:	2f62      	cmp	r7, #98	@ 0x62
 800267e:	d80a      	bhi.n	8002696 <_printf_i+0x32>
 8002680:	2f00      	cmp	r7, #0
 8002682:	f000 80d1 	beq.w	8002828 <_printf_i+0x1c4>
 8002686:	2f58      	cmp	r7, #88	@ 0x58
 8002688:	f000 80b8 	beq.w	80027fc <_printf_i+0x198>
 800268c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002690:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002694:	e03a      	b.n	800270c <_printf_i+0xa8>
 8002696:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800269a:	2b15      	cmp	r3, #21
 800269c:	d8f6      	bhi.n	800268c <_printf_i+0x28>
 800269e:	a101      	add	r1, pc, #4	@ (adr r1, 80026a4 <_printf_i+0x40>)
 80026a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80026a4:	080026fd 	.word	0x080026fd
 80026a8:	08002711 	.word	0x08002711
 80026ac:	0800268d 	.word	0x0800268d
 80026b0:	0800268d 	.word	0x0800268d
 80026b4:	0800268d 	.word	0x0800268d
 80026b8:	0800268d 	.word	0x0800268d
 80026bc:	08002711 	.word	0x08002711
 80026c0:	0800268d 	.word	0x0800268d
 80026c4:	0800268d 	.word	0x0800268d
 80026c8:	0800268d 	.word	0x0800268d
 80026cc:	0800268d 	.word	0x0800268d
 80026d0:	0800280f 	.word	0x0800280f
 80026d4:	0800273b 	.word	0x0800273b
 80026d8:	080027c9 	.word	0x080027c9
 80026dc:	0800268d 	.word	0x0800268d
 80026e0:	0800268d 	.word	0x0800268d
 80026e4:	08002831 	.word	0x08002831
 80026e8:	0800268d 	.word	0x0800268d
 80026ec:	0800273b 	.word	0x0800273b
 80026f0:	0800268d 	.word	0x0800268d
 80026f4:	0800268d 	.word	0x0800268d
 80026f8:	080027d1 	.word	0x080027d1
 80026fc:	6833      	ldr	r3, [r6, #0]
 80026fe:	1d1a      	adds	r2, r3, #4
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	6032      	str	r2, [r6, #0]
 8002704:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002708:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800270c:	2301      	movs	r3, #1
 800270e:	e09c      	b.n	800284a <_printf_i+0x1e6>
 8002710:	6833      	ldr	r3, [r6, #0]
 8002712:	6820      	ldr	r0, [r4, #0]
 8002714:	1d19      	adds	r1, r3, #4
 8002716:	6031      	str	r1, [r6, #0]
 8002718:	0606      	lsls	r6, r0, #24
 800271a:	d501      	bpl.n	8002720 <_printf_i+0xbc>
 800271c:	681d      	ldr	r5, [r3, #0]
 800271e:	e003      	b.n	8002728 <_printf_i+0xc4>
 8002720:	0645      	lsls	r5, r0, #25
 8002722:	d5fb      	bpl.n	800271c <_printf_i+0xb8>
 8002724:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002728:	2d00      	cmp	r5, #0
 800272a:	da03      	bge.n	8002734 <_printf_i+0xd0>
 800272c:	232d      	movs	r3, #45	@ 0x2d
 800272e:	426d      	negs	r5, r5
 8002730:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002734:	230a      	movs	r3, #10
 8002736:	4858      	ldr	r0, [pc, #352]	@ (8002898 <_printf_i+0x234>)
 8002738:	e011      	b.n	800275e <_printf_i+0xfa>
 800273a:	6821      	ldr	r1, [r4, #0]
 800273c:	6833      	ldr	r3, [r6, #0]
 800273e:	0608      	lsls	r0, r1, #24
 8002740:	f853 5b04 	ldr.w	r5, [r3], #4
 8002744:	d402      	bmi.n	800274c <_printf_i+0xe8>
 8002746:	0649      	lsls	r1, r1, #25
 8002748:	bf48      	it	mi
 800274a:	b2ad      	uxthmi	r5, r5
 800274c:	2f6f      	cmp	r7, #111	@ 0x6f
 800274e:	6033      	str	r3, [r6, #0]
 8002750:	bf14      	ite	ne
 8002752:	230a      	movne	r3, #10
 8002754:	2308      	moveq	r3, #8
 8002756:	4850      	ldr	r0, [pc, #320]	@ (8002898 <_printf_i+0x234>)
 8002758:	2100      	movs	r1, #0
 800275a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800275e:	6866      	ldr	r6, [r4, #4]
 8002760:	2e00      	cmp	r6, #0
 8002762:	60a6      	str	r6, [r4, #8]
 8002764:	db05      	blt.n	8002772 <_printf_i+0x10e>
 8002766:	6821      	ldr	r1, [r4, #0]
 8002768:	432e      	orrs	r6, r5
 800276a:	f021 0104 	bic.w	r1, r1, #4
 800276e:	6021      	str	r1, [r4, #0]
 8002770:	d04b      	beq.n	800280a <_printf_i+0x1a6>
 8002772:	4616      	mov	r6, r2
 8002774:	fbb5 f1f3 	udiv	r1, r5, r3
 8002778:	fb03 5711 	mls	r7, r3, r1, r5
 800277c:	5dc7      	ldrb	r7, [r0, r7]
 800277e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002782:	462f      	mov	r7, r5
 8002784:	42bb      	cmp	r3, r7
 8002786:	460d      	mov	r5, r1
 8002788:	d9f4      	bls.n	8002774 <_printf_i+0x110>
 800278a:	2b08      	cmp	r3, #8
 800278c:	d10b      	bne.n	80027a6 <_printf_i+0x142>
 800278e:	6823      	ldr	r3, [r4, #0]
 8002790:	07df      	lsls	r7, r3, #31
 8002792:	d508      	bpl.n	80027a6 <_printf_i+0x142>
 8002794:	6923      	ldr	r3, [r4, #16]
 8002796:	6861      	ldr	r1, [r4, #4]
 8002798:	4299      	cmp	r1, r3
 800279a:	bfde      	ittt	le
 800279c:	2330      	movle	r3, #48	@ 0x30
 800279e:	f806 3c01 	strble.w	r3, [r6, #-1]
 80027a2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80027a6:	1b92      	subs	r2, r2, r6
 80027a8:	6122      	str	r2, [r4, #16]
 80027aa:	464b      	mov	r3, r9
 80027ac:	4621      	mov	r1, r4
 80027ae:	4640      	mov	r0, r8
 80027b0:	f8cd a000 	str.w	sl, [sp]
 80027b4:	aa03      	add	r2, sp, #12
 80027b6:	f7ff fee3 	bl	8002580 <_printf_common>
 80027ba:	3001      	adds	r0, #1
 80027bc:	d14a      	bne.n	8002854 <_printf_i+0x1f0>
 80027be:	f04f 30ff 	mov.w	r0, #4294967295
 80027c2:	b004      	add	sp, #16
 80027c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80027c8:	6823      	ldr	r3, [r4, #0]
 80027ca:	f043 0320 	orr.w	r3, r3, #32
 80027ce:	6023      	str	r3, [r4, #0]
 80027d0:	2778      	movs	r7, #120	@ 0x78
 80027d2:	4832      	ldr	r0, [pc, #200]	@ (800289c <_printf_i+0x238>)
 80027d4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80027d8:	6823      	ldr	r3, [r4, #0]
 80027da:	6831      	ldr	r1, [r6, #0]
 80027dc:	061f      	lsls	r7, r3, #24
 80027de:	f851 5b04 	ldr.w	r5, [r1], #4
 80027e2:	d402      	bmi.n	80027ea <_printf_i+0x186>
 80027e4:	065f      	lsls	r7, r3, #25
 80027e6:	bf48      	it	mi
 80027e8:	b2ad      	uxthmi	r5, r5
 80027ea:	6031      	str	r1, [r6, #0]
 80027ec:	07d9      	lsls	r1, r3, #31
 80027ee:	bf44      	itt	mi
 80027f0:	f043 0320 	orrmi.w	r3, r3, #32
 80027f4:	6023      	strmi	r3, [r4, #0]
 80027f6:	b11d      	cbz	r5, 8002800 <_printf_i+0x19c>
 80027f8:	2310      	movs	r3, #16
 80027fa:	e7ad      	b.n	8002758 <_printf_i+0xf4>
 80027fc:	4826      	ldr	r0, [pc, #152]	@ (8002898 <_printf_i+0x234>)
 80027fe:	e7e9      	b.n	80027d4 <_printf_i+0x170>
 8002800:	6823      	ldr	r3, [r4, #0]
 8002802:	f023 0320 	bic.w	r3, r3, #32
 8002806:	6023      	str	r3, [r4, #0]
 8002808:	e7f6      	b.n	80027f8 <_printf_i+0x194>
 800280a:	4616      	mov	r6, r2
 800280c:	e7bd      	b.n	800278a <_printf_i+0x126>
 800280e:	6833      	ldr	r3, [r6, #0]
 8002810:	6825      	ldr	r5, [r4, #0]
 8002812:	1d18      	adds	r0, r3, #4
 8002814:	6961      	ldr	r1, [r4, #20]
 8002816:	6030      	str	r0, [r6, #0]
 8002818:	062e      	lsls	r6, r5, #24
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	d501      	bpl.n	8002822 <_printf_i+0x1be>
 800281e:	6019      	str	r1, [r3, #0]
 8002820:	e002      	b.n	8002828 <_printf_i+0x1c4>
 8002822:	0668      	lsls	r0, r5, #25
 8002824:	d5fb      	bpl.n	800281e <_printf_i+0x1ba>
 8002826:	8019      	strh	r1, [r3, #0]
 8002828:	2300      	movs	r3, #0
 800282a:	4616      	mov	r6, r2
 800282c:	6123      	str	r3, [r4, #16]
 800282e:	e7bc      	b.n	80027aa <_printf_i+0x146>
 8002830:	6833      	ldr	r3, [r6, #0]
 8002832:	2100      	movs	r1, #0
 8002834:	1d1a      	adds	r2, r3, #4
 8002836:	6032      	str	r2, [r6, #0]
 8002838:	681e      	ldr	r6, [r3, #0]
 800283a:	6862      	ldr	r2, [r4, #4]
 800283c:	4630      	mov	r0, r6
 800283e:	f000 f96b 	bl	8002b18 <memchr>
 8002842:	b108      	cbz	r0, 8002848 <_printf_i+0x1e4>
 8002844:	1b80      	subs	r0, r0, r6
 8002846:	6060      	str	r0, [r4, #4]
 8002848:	6863      	ldr	r3, [r4, #4]
 800284a:	6123      	str	r3, [r4, #16]
 800284c:	2300      	movs	r3, #0
 800284e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002852:	e7aa      	b.n	80027aa <_printf_i+0x146>
 8002854:	4632      	mov	r2, r6
 8002856:	4649      	mov	r1, r9
 8002858:	4640      	mov	r0, r8
 800285a:	6923      	ldr	r3, [r4, #16]
 800285c:	47d0      	blx	sl
 800285e:	3001      	adds	r0, #1
 8002860:	d0ad      	beq.n	80027be <_printf_i+0x15a>
 8002862:	6823      	ldr	r3, [r4, #0]
 8002864:	079b      	lsls	r3, r3, #30
 8002866:	d413      	bmi.n	8002890 <_printf_i+0x22c>
 8002868:	68e0      	ldr	r0, [r4, #12]
 800286a:	9b03      	ldr	r3, [sp, #12]
 800286c:	4298      	cmp	r0, r3
 800286e:	bfb8      	it	lt
 8002870:	4618      	movlt	r0, r3
 8002872:	e7a6      	b.n	80027c2 <_printf_i+0x15e>
 8002874:	2301      	movs	r3, #1
 8002876:	4632      	mov	r2, r6
 8002878:	4649      	mov	r1, r9
 800287a:	4640      	mov	r0, r8
 800287c:	47d0      	blx	sl
 800287e:	3001      	adds	r0, #1
 8002880:	d09d      	beq.n	80027be <_printf_i+0x15a>
 8002882:	3501      	adds	r5, #1
 8002884:	68e3      	ldr	r3, [r4, #12]
 8002886:	9903      	ldr	r1, [sp, #12]
 8002888:	1a5b      	subs	r3, r3, r1
 800288a:	42ab      	cmp	r3, r5
 800288c:	dcf2      	bgt.n	8002874 <_printf_i+0x210>
 800288e:	e7eb      	b.n	8002868 <_printf_i+0x204>
 8002890:	2500      	movs	r5, #0
 8002892:	f104 0619 	add.w	r6, r4, #25
 8002896:	e7f5      	b.n	8002884 <_printf_i+0x220>
 8002898:	08002baf 	.word	0x08002baf
 800289c:	08002bc0 	.word	0x08002bc0

080028a0 <__sflush_r>:
 80028a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80028a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028a6:	0716      	lsls	r6, r2, #28
 80028a8:	4605      	mov	r5, r0
 80028aa:	460c      	mov	r4, r1
 80028ac:	d454      	bmi.n	8002958 <__sflush_r+0xb8>
 80028ae:	684b      	ldr	r3, [r1, #4]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	dc02      	bgt.n	80028ba <__sflush_r+0x1a>
 80028b4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	dd48      	ble.n	800294c <__sflush_r+0xac>
 80028ba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80028bc:	2e00      	cmp	r6, #0
 80028be:	d045      	beq.n	800294c <__sflush_r+0xac>
 80028c0:	2300      	movs	r3, #0
 80028c2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80028c6:	682f      	ldr	r7, [r5, #0]
 80028c8:	6a21      	ldr	r1, [r4, #32]
 80028ca:	602b      	str	r3, [r5, #0]
 80028cc:	d030      	beq.n	8002930 <__sflush_r+0x90>
 80028ce:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80028d0:	89a3      	ldrh	r3, [r4, #12]
 80028d2:	0759      	lsls	r1, r3, #29
 80028d4:	d505      	bpl.n	80028e2 <__sflush_r+0x42>
 80028d6:	6863      	ldr	r3, [r4, #4]
 80028d8:	1ad2      	subs	r2, r2, r3
 80028da:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80028dc:	b10b      	cbz	r3, 80028e2 <__sflush_r+0x42>
 80028de:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80028e0:	1ad2      	subs	r2, r2, r3
 80028e2:	2300      	movs	r3, #0
 80028e4:	4628      	mov	r0, r5
 80028e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80028e8:	6a21      	ldr	r1, [r4, #32]
 80028ea:	47b0      	blx	r6
 80028ec:	1c43      	adds	r3, r0, #1
 80028ee:	89a3      	ldrh	r3, [r4, #12]
 80028f0:	d106      	bne.n	8002900 <__sflush_r+0x60>
 80028f2:	6829      	ldr	r1, [r5, #0]
 80028f4:	291d      	cmp	r1, #29
 80028f6:	d82b      	bhi.n	8002950 <__sflush_r+0xb0>
 80028f8:	4a28      	ldr	r2, [pc, #160]	@ (800299c <__sflush_r+0xfc>)
 80028fa:	40ca      	lsrs	r2, r1
 80028fc:	07d6      	lsls	r6, r2, #31
 80028fe:	d527      	bpl.n	8002950 <__sflush_r+0xb0>
 8002900:	2200      	movs	r2, #0
 8002902:	6062      	str	r2, [r4, #4]
 8002904:	6922      	ldr	r2, [r4, #16]
 8002906:	04d9      	lsls	r1, r3, #19
 8002908:	6022      	str	r2, [r4, #0]
 800290a:	d504      	bpl.n	8002916 <__sflush_r+0x76>
 800290c:	1c42      	adds	r2, r0, #1
 800290e:	d101      	bne.n	8002914 <__sflush_r+0x74>
 8002910:	682b      	ldr	r3, [r5, #0]
 8002912:	b903      	cbnz	r3, 8002916 <__sflush_r+0x76>
 8002914:	6560      	str	r0, [r4, #84]	@ 0x54
 8002916:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002918:	602f      	str	r7, [r5, #0]
 800291a:	b1b9      	cbz	r1, 800294c <__sflush_r+0xac>
 800291c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002920:	4299      	cmp	r1, r3
 8002922:	d002      	beq.n	800292a <__sflush_r+0x8a>
 8002924:	4628      	mov	r0, r5
 8002926:	f7ff fbf5 	bl	8002114 <_free_r>
 800292a:	2300      	movs	r3, #0
 800292c:	6363      	str	r3, [r4, #52]	@ 0x34
 800292e:	e00d      	b.n	800294c <__sflush_r+0xac>
 8002930:	2301      	movs	r3, #1
 8002932:	4628      	mov	r0, r5
 8002934:	47b0      	blx	r6
 8002936:	4602      	mov	r2, r0
 8002938:	1c50      	adds	r0, r2, #1
 800293a:	d1c9      	bne.n	80028d0 <__sflush_r+0x30>
 800293c:	682b      	ldr	r3, [r5, #0]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d0c6      	beq.n	80028d0 <__sflush_r+0x30>
 8002942:	2b1d      	cmp	r3, #29
 8002944:	d001      	beq.n	800294a <__sflush_r+0xaa>
 8002946:	2b16      	cmp	r3, #22
 8002948:	d11d      	bne.n	8002986 <__sflush_r+0xe6>
 800294a:	602f      	str	r7, [r5, #0]
 800294c:	2000      	movs	r0, #0
 800294e:	e021      	b.n	8002994 <__sflush_r+0xf4>
 8002950:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002954:	b21b      	sxth	r3, r3
 8002956:	e01a      	b.n	800298e <__sflush_r+0xee>
 8002958:	690f      	ldr	r7, [r1, #16]
 800295a:	2f00      	cmp	r7, #0
 800295c:	d0f6      	beq.n	800294c <__sflush_r+0xac>
 800295e:	0793      	lsls	r3, r2, #30
 8002960:	bf18      	it	ne
 8002962:	2300      	movne	r3, #0
 8002964:	680e      	ldr	r6, [r1, #0]
 8002966:	bf08      	it	eq
 8002968:	694b      	ldreq	r3, [r1, #20]
 800296a:	1bf6      	subs	r6, r6, r7
 800296c:	600f      	str	r7, [r1, #0]
 800296e:	608b      	str	r3, [r1, #8]
 8002970:	2e00      	cmp	r6, #0
 8002972:	ddeb      	ble.n	800294c <__sflush_r+0xac>
 8002974:	4633      	mov	r3, r6
 8002976:	463a      	mov	r2, r7
 8002978:	4628      	mov	r0, r5
 800297a:	6a21      	ldr	r1, [r4, #32]
 800297c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8002980:	47e0      	blx	ip
 8002982:	2800      	cmp	r0, #0
 8002984:	dc07      	bgt.n	8002996 <__sflush_r+0xf6>
 8002986:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800298a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800298e:	f04f 30ff 	mov.w	r0, #4294967295
 8002992:	81a3      	strh	r3, [r4, #12]
 8002994:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002996:	4407      	add	r7, r0
 8002998:	1a36      	subs	r6, r6, r0
 800299a:	e7e9      	b.n	8002970 <__sflush_r+0xd0>
 800299c:	20400001 	.word	0x20400001

080029a0 <_fflush_r>:
 80029a0:	b538      	push	{r3, r4, r5, lr}
 80029a2:	690b      	ldr	r3, [r1, #16]
 80029a4:	4605      	mov	r5, r0
 80029a6:	460c      	mov	r4, r1
 80029a8:	b913      	cbnz	r3, 80029b0 <_fflush_r+0x10>
 80029aa:	2500      	movs	r5, #0
 80029ac:	4628      	mov	r0, r5
 80029ae:	bd38      	pop	{r3, r4, r5, pc}
 80029b0:	b118      	cbz	r0, 80029ba <_fflush_r+0x1a>
 80029b2:	6a03      	ldr	r3, [r0, #32]
 80029b4:	b90b      	cbnz	r3, 80029ba <_fflush_r+0x1a>
 80029b6:	f7ff f9b3 	bl	8001d20 <__sinit>
 80029ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d0f3      	beq.n	80029aa <_fflush_r+0xa>
 80029c2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80029c4:	07d0      	lsls	r0, r2, #31
 80029c6:	d404      	bmi.n	80029d2 <_fflush_r+0x32>
 80029c8:	0599      	lsls	r1, r3, #22
 80029ca:	d402      	bmi.n	80029d2 <_fflush_r+0x32>
 80029cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80029ce:	f7ff fb9e 	bl	800210e <__retarget_lock_acquire_recursive>
 80029d2:	4628      	mov	r0, r5
 80029d4:	4621      	mov	r1, r4
 80029d6:	f7ff ff63 	bl	80028a0 <__sflush_r>
 80029da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80029dc:	4605      	mov	r5, r0
 80029de:	07da      	lsls	r2, r3, #31
 80029e0:	d4e4      	bmi.n	80029ac <_fflush_r+0xc>
 80029e2:	89a3      	ldrh	r3, [r4, #12]
 80029e4:	059b      	lsls	r3, r3, #22
 80029e6:	d4e1      	bmi.n	80029ac <_fflush_r+0xc>
 80029e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80029ea:	f7ff fb91 	bl	8002110 <__retarget_lock_release_recursive>
 80029ee:	e7dd      	b.n	80029ac <_fflush_r+0xc>

080029f0 <__swhatbuf_r>:
 80029f0:	b570      	push	{r4, r5, r6, lr}
 80029f2:	460c      	mov	r4, r1
 80029f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80029f8:	4615      	mov	r5, r2
 80029fa:	2900      	cmp	r1, #0
 80029fc:	461e      	mov	r6, r3
 80029fe:	b096      	sub	sp, #88	@ 0x58
 8002a00:	da0c      	bge.n	8002a1c <__swhatbuf_r+0x2c>
 8002a02:	89a3      	ldrh	r3, [r4, #12]
 8002a04:	2100      	movs	r1, #0
 8002a06:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002a0a:	bf14      	ite	ne
 8002a0c:	2340      	movne	r3, #64	@ 0x40
 8002a0e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002a12:	2000      	movs	r0, #0
 8002a14:	6031      	str	r1, [r6, #0]
 8002a16:	602b      	str	r3, [r5, #0]
 8002a18:	b016      	add	sp, #88	@ 0x58
 8002a1a:	bd70      	pop	{r4, r5, r6, pc}
 8002a1c:	466a      	mov	r2, sp
 8002a1e:	f000 f849 	bl	8002ab4 <_fstat_r>
 8002a22:	2800      	cmp	r0, #0
 8002a24:	dbed      	blt.n	8002a02 <__swhatbuf_r+0x12>
 8002a26:	9901      	ldr	r1, [sp, #4]
 8002a28:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002a2c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002a30:	4259      	negs	r1, r3
 8002a32:	4159      	adcs	r1, r3
 8002a34:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002a38:	e7eb      	b.n	8002a12 <__swhatbuf_r+0x22>

08002a3a <__smakebuf_r>:
 8002a3a:	898b      	ldrh	r3, [r1, #12]
 8002a3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002a3e:	079d      	lsls	r5, r3, #30
 8002a40:	4606      	mov	r6, r0
 8002a42:	460c      	mov	r4, r1
 8002a44:	d507      	bpl.n	8002a56 <__smakebuf_r+0x1c>
 8002a46:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002a4a:	6023      	str	r3, [r4, #0]
 8002a4c:	6123      	str	r3, [r4, #16]
 8002a4e:	2301      	movs	r3, #1
 8002a50:	6163      	str	r3, [r4, #20]
 8002a52:	b003      	add	sp, #12
 8002a54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a56:	466a      	mov	r2, sp
 8002a58:	ab01      	add	r3, sp, #4
 8002a5a:	f7ff ffc9 	bl	80029f0 <__swhatbuf_r>
 8002a5e:	9f00      	ldr	r7, [sp, #0]
 8002a60:	4605      	mov	r5, r0
 8002a62:	4639      	mov	r1, r7
 8002a64:	4630      	mov	r0, r6
 8002a66:	f7ff fbbf 	bl	80021e8 <_malloc_r>
 8002a6a:	b948      	cbnz	r0, 8002a80 <__smakebuf_r+0x46>
 8002a6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002a70:	059a      	lsls	r2, r3, #22
 8002a72:	d4ee      	bmi.n	8002a52 <__smakebuf_r+0x18>
 8002a74:	f023 0303 	bic.w	r3, r3, #3
 8002a78:	f043 0302 	orr.w	r3, r3, #2
 8002a7c:	81a3      	strh	r3, [r4, #12]
 8002a7e:	e7e2      	b.n	8002a46 <__smakebuf_r+0xc>
 8002a80:	89a3      	ldrh	r3, [r4, #12]
 8002a82:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002a86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a8a:	81a3      	strh	r3, [r4, #12]
 8002a8c:	9b01      	ldr	r3, [sp, #4]
 8002a8e:	6020      	str	r0, [r4, #0]
 8002a90:	b15b      	cbz	r3, 8002aaa <__smakebuf_r+0x70>
 8002a92:	4630      	mov	r0, r6
 8002a94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002a98:	f000 f81e 	bl	8002ad8 <_isatty_r>
 8002a9c:	b128      	cbz	r0, 8002aaa <__smakebuf_r+0x70>
 8002a9e:	89a3      	ldrh	r3, [r4, #12]
 8002aa0:	f023 0303 	bic.w	r3, r3, #3
 8002aa4:	f043 0301 	orr.w	r3, r3, #1
 8002aa8:	81a3      	strh	r3, [r4, #12]
 8002aaa:	89a3      	ldrh	r3, [r4, #12]
 8002aac:	431d      	orrs	r5, r3
 8002aae:	81a5      	strh	r5, [r4, #12]
 8002ab0:	e7cf      	b.n	8002a52 <__smakebuf_r+0x18>
	...

08002ab4 <_fstat_r>:
 8002ab4:	b538      	push	{r3, r4, r5, lr}
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	4d06      	ldr	r5, [pc, #24]	@ (8002ad4 <_fstat_r+0x20>)
 8002aba:	4604      	mov	r4, r0
 8002abc:	4608      	mov	r0, r1
 8002abe:	4611      	mov	r1, r2
 8002ac0:	602b      	str	r3, [r5, #0]
 8002ac2:	f7fd fe1f 	bl	8000704 <_fstat>
 8002ac6:	1c43      	adds	r3, r0, #1
 8002ac8:	d102      	bne.n	8002ad0 <_fstat_r+0x1c>
 8002aca:	682b      	ldr	r3, [r5, #0]
 8002acc:	b103      	cbz	r3, 8002ad0 <_fstat_r+0x1c>
 8002ace:	6023      	str	r3, [r4, #0]
 8002ad0:	bd38      	pop	{r3, r4, r5, pc}
 8002ad2:	bf00      	nop
 8002ad4:	20000214 	.word	0x20000214

08002ad8 <_isatty_r>:
 8002ad8:	b538      	push	{r3, r4, r5, lr}
 8002ada:	2300      	movs	r3, #0
 8002adc:	4d05      	ldr	r5, [pc, #20]	@ (8002af4 <_isatty_r+0x1c>)
 8002ade:	4604      	mov	r4, r0
 8002ae0:	4608      	mov	r0, r1
 8002ae2:	602b      	str	r3, [r5, #0]
 8002ae4:	f7fd fe1d 	bl	8000722 <_isatty>
 8002ae8:	1c43      	adds	r3, r0, #1
 8002aea:	d102      	bne.n	8002af2 <_isatty_r+0x1a>
 8002aec:	682b      	ldr	r3, [r5, #0]
 8002aee:	b103      	cbz	r3, 8002af2 <_isatty_r+0x1a>
 8002af0:	6023      	str	r3, [r4, #0]
 8002af2:	bd38      	pop	{r3, r4, r5, pc}
 8002af4:	20000214 	.word	0x20000214

08002af8 <_sbrk_r>:
 8002af8:	b538      	push	{r3, r4, r5, lr}
 8002afa:	2300      	movs	r3, #0
 8002afc:	4d05      	ldr	r5, [pc, #20]	@ (8002b14 <_sbrk_r+0x1c>)
 8002afe:	4604      	mov	r4, r0
 8002b00:	4608      	mov	r0, r1
 8002b02:	602b      	str	r3, [r5, #0]
 8002b04:	f7fd fe24 	bl	8000750 <_sbrk>
 8002b08:	1c43      	adds	r3, r0, #1
 8002b0a:	d102      	bne.n	8002b12 <_sbrk_r+0x1a>
 8002b0c:	682b      	ldr	r3, [r5, #0]
 8002b0e:	b103      	cbz	r3, 8002b12 <_sbrk_r+0x1a>
 8002b10:	6023      	str	r3, [r4, #0]
 8002b12:	bd38      	pop	{r3, r4, r5, pc}
 8002b14:	20000214 	.word	0x20000214

08002b18 <memchr>:
 8002b18:	4603      	mov	r3, r0
 8002b1a:	b510      	push	{r4, lr}
 8002b1c:	b2c9      	uxtb	r1, r1
 8002b1e:	4402      	add	r2, r0
 8002b20:	4293      	cmp	r3, r2
 8002b22:	4618      	mov	r0, r3
 8002b24:	d101      	bne.n	8002b2a <memchr+0x12>
 8002b26:	2000      	movs	r0, #0
 8002b28:	e003      	b.n	8002b32 <memchr+0x1a>
 8002b2a:	7804      	ldrb	r4, [r0, #0]
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	428c      	cmp	r4, r1
 8002b30:	d1f6      	bne.n	8002b20 <memchr+0x8>
 8002b32:	bd10      	pop	{r4, pc}

08002b34 <_init>:
 8002b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b36:	bf00      	nop
 8002b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b3a:	bc08      	pop	{r3}
 8002b3c:	469e      	mov	lr, r3
 8002b3e:	4770      	bx	lr

08002b40 <_fini>:
 8002b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b42:	bf00      	nop
 8002b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b46:	bc08      	pop	{r3}
 8002b48:	469e      	mov	lr, r3
 8002b4a:	4770      	bx	lr
