
US_Test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d08  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08003ea8  08003ea8  00004ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f84  08003f84  0000506c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003f84  08003f84  00004f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f8c  08003f8c  0000506c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f8c  08003f8c  00004f8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003f90  08003f90  00004f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08003f94  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  2000006c  08004000  0000506c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  08004000  00005278  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000506c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c158  00000000  00000000  0000509c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b75  00000000  00000000  000111f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c98  00000000  00000000  00012d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009d4  00000000  00000000  00013a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001714d  00000000  00000000  000143dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d744  00000000  00000000  0002b529  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000900c9  00000000  00000000  00038c6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c8d36  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c94  00000000  00000000  000c8d7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000cca10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003e90 	.word	0x08003e90

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08003e90 	.word	0x08003e90

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <__io_putchar>:

#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)

#endif

PUTCHAR_PROTOTYPE {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]

	if (ch == '\n')
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	2b0a      	cmp	r3, #10
 80005b8:	d106      	bne.n	80005c8 <__io_putchar+0x1c>

		HAL_UART_Transmit(&huart2, (uint8_t*) "\r", 1, 0xFFFF);
 80005ba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80005be:	2201      	movs	r2, #1
 80005c0:	4907      	ldr	r1, [pc, #28]	@ (80005e0 <__io_putchar+0x34>)
 80005c2:	4808      	ldr	r0, [pc, #32]	@ (80005e4 <__io_putchar+0x38>)
 80005c4:	f002 f886 	bl	80026d4 <HAL_UART_Transmit>

	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 80005c8:	1d39      	adds	r1, r7, #4
 80005ca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80005ce:	2201      	movs	r2, #1
 80005d0:	4804      	ldr	r0, [pc, #16]	@ (80005e4 <__io_putchar+0x38>)
 80005d2:	f002 f87f 	bl	80026d4 <HAL_UART_Transmit>

	return ch;
 80005d6:	687b      	ldr	r3, [r7, #4]

}
 80005d8:	4618      	mov	r0, r3
 80005da:	3708      	adds	r7, #8
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	08003ea8 	.word	0x08003ea8
 80005e4:	200000d0 	.word	0x200000d0

080005e8 <timer_start>:

///////////////////////////////

void timer_start(void) {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Start(&htim1);
 80005ec:	4802      	ldr	r0, [pc, #8]	@ (80005f8 <timer_start+0x10>)
 80005ee:	f001 fd71 	bl	80020d4 <HAL_TIM_Base_Start>

}
 80005f2:	bf00      	nop
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	20000088 	.word	0x20000088

080005fc <delay_us>:

void delay_us(uint16_t us) {
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	4603      	mov	r3, r0
 8000604:	80fb      	strh	r3, [r7, #6]

	__HAL_TIM_SET_COUNTER(&htim1, 0); // initislize counter to start from 0
 8000606:	4b09      	ldr	r3, [pc, #36]	@ (800062c <delay_us+0x30>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	2200      	movs	r2, #0
 800060c:	625a      	str	r2, [r3, #36]	@ 0x24

	while ((__HAL_TIM_GET_COUNTER(&htim1)) < us)
 800060e:	bf00      	nop
 8000610:	4b06      	ldr	r3, [pc, #24]	@ (800062c <delay_us+0x30>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000616:	88fb      	ldrh	r3, [r7, #6]
 8000618:	429a      	cmp	r2, r3
 800061a:	d3f9      	bcc.n	8000610 <delay_us+0x14>

		; // wait count until us

}
 800061c:	bf00      	nop
 800061e:	bf00      	nop
 8000620:	370c      	adds	r7, #12
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	20000088 	.word	0x20000088

08000630 <trig>:

void trig(void) {
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(Trigger_GPIO_Port, Trigger_Pin, HIGH);
 8000634:	4b0a      	ldr	r3, [pc, #40]	@ (8000660 <trig+0x30>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	b2db      	uxtb	r3, r3
 800063a:	461a      	mov	r2, r3
 800063c:	2180      	movs	r1, #128	@ 0x80
 800063e:	4809      	ldr	r0, [pc, #36]	@ (8000664 <trig+0x34>)
 8000640:	f001 f846 	bl	80016d0 <HAL_GPIO_WritePin>

	delay_us(10);
 8000644:	200a      	movs	r0, #10
 8000646:	f7ff ffd9 	bl	80005fc <delay_us>

	HAL_GPIO_WritePin(Trigger_GPIO_Port, Trigger_Pin, LOW);
 800064a:	4b07      	ldr	r3, [pc, #28]	@ (8000668 <trig+0x38>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	b2db      	uxtb	r3, r3
 8000650:	461a      	mov	r2, r3
 8000652:	2180      	movs	r1, #128	@ 0x80
 8000654:	4803      	ldr	r0, [pc, #12]	@ (8000664 <trig+0x34>)
 8000656:	f001 f83b 	bl	80016d0 <HAL_GPIO_WritePin>

}
 800065a:	bf00      	nop
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	20000000 	.word	0x20000000
 8000664:	40020800 	.word	0x40020800
 8000668:	20000118 	.word	0x20000118

0800066c <echo>:

 */

long unsigned int echo(void)

{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0

	long unsigned int echo = 0;
 8000672:	2300      	movs	r3, #0
 8000674:	607b      	str	r3, [r7, #4]

	while (HAL_GPIO_ReadPin(Echo_GPIO_Port, Echo_Pin) == LOW) {
 8000676:	bf00      	nop
 8000678:	2101      	movs	r1, #1
 800067a:	4815      	ldr	r0, [pc, #84]	@ (80006d0 <echo+0x64>)
 800067c:	f001 f810 	bl	80016a0 <HAL_GPIO_ReadPin>
 8000680:	4603      	mov	r3, r0
 8000682:	461a      	mov	r2, r3
 8000684:	4b13      	ldr	r3, [pc, #76]	@ (80006d4 <echo+0x68>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	429a      	cmp	r2, r3
 800068a:	d0f5      	beq.n	8000678 <echo+0xc>
	}

	__HAL_TIM_SET_COUNTER(&htim1, 0);
 800068c:	4b12      	ldr	r3, [pc, #72]	@ (80006d8 <echo+0x6c>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	2200      	movs	r2, #0
 8000692:	625a      	str	r2, [r3, #36]	@ 0x24

	while (HAL_GPIO_ReadPin(Echo_GPIO_Port, Echo_Pin) == HIGH)
 8000694:	bf00      	nop
 8000696:	2101      	movs	r1, #1
 8000698:	480d      	ldr	r0, [pc, #52]	@ (80006d0 <echo+0x64>)
 800069a:	f001 f801 	bl	80016a0 <HAL_GPIO_ReadPin>
 800069e:	4603      	mov	r3, r0
 80006a0:	461a      	mov	r2, r3
 80006a2:	4b0e      	ldr	r3, [pc, #56]	@ (80006dc <echo+0x70>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	429a      	cmp	r2, r3
 80006a8:	d0f5      	beq.n	8000696 <echo+0x2a>

		;

	echo = __HAL_TIM_GET_COUNTER(&htim1);
 80006aa:	4b0b      	ldr	r3, [pc, #44]	@ (80006d8 <echo+0x6c>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006b0:	607b      	str	r3, [r7, #4]

	if (echo >= 240 && echo <= 23000)
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	2bef      	cmp	r3, #239	@ 0xef
 80006b6:	d906      	bls.n	80006c6 <echo+0x5a>
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	f645 12d8 	movw	r2, #23000	@ 0x59d8
 80006be:	4293      	cmp	r3, r2
 80006c0:	d801      	bhi.n	80006c6 <echo+0x5a>

		return echo;
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	e000      	b.n	80006c8 <echo+0x5c>

	else

		return 0;
 80006c6:	2300      	movs	r3, #0

}
 80006c8:	4618      	mov	r0, r3
 80006ca:	3708      	adds	r7, #8
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	40020400 	.word	0x40020400
 80006d4:	20000118 	.word	0x20000118
 80006d8:	20000088 	.word	0x20000088
 80006dc:	20000000 	.word	0x20000000

080006e0 <us_output>:


void us_output(void) {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0

	trig();
 80006e4:	f7ff ffa4 	bl	8000630 <trig>

	echo_time = echo();
 80006e8:	f7ff ffc0 	bl	800066c <echo>
 80006ec:	4603      	mov	r3, r0
 80006ee:	4a0f      	ldr	r2, [pc, #60]	@ (800072c <us_output+0x4c>)
 80006f0:	6013      	str	r3, [r2, #0]

	if (echo_time != 0) {
 80006f2:	4b0e      	ldr	r3, [pc, #56]	@ (800072c <us_output+0x4c>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d012      	beq.n	8000720 <us_output+0x40>

		dist = (int) (17 * echo_time / 100);
 80006fa:	4b0c      	ldr	r3, [pc, #48]	@ (800072c <us_output+0x4c>)
 80006fc:	681a      	ldr	r2, [r3, #0]
 80006fe:	4613      	mov	r3, r2
 8000700:	011b      	lsls	r3, r3, #4
 8000702:	4413      	add	r3, r2
 8000704:	4a0a      	ldr	r2, [pc, #40]	@ (8000730 <us_output+0x50>)
 8000706:	fba2 2303 	umull	r2, r3, r2, r3
 800070a:	095b      	lsrs	r3, r3, #5
 800070c:	b2da      	uxtb	r2, r3
 800070e:	4b09      	ldr	r3, [pc, #36]	@ (8000734 <us_output+0x54>)
 8000710:	701a      	strb	r2, [r3, #0]

		printf("Distance = %d(mm)\n", dist);
 8000712:	4b08      	ldr	r3, [pc, #32]	@ (8000734 <us_output+0x54>)
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	4619      	mov	r1, r3
 8000718:	4807      	ldr	r0, [pc, #28]	@ (8000738 <us_output+0x58>)
 800071a:	f002 fcef 	bl	80030fc <iprintf>

	} else

		printf("Out of Range!\n");

}
 800071e:	e002      	b.n	8000726 <us_output+0x46>
		printf("Out of Range!\n");
 8000720:	4806      	ldr	r0, [pc, #24]	@ (800073c <us_output+0x5c>)
 8000722:	f002 fd53 	bl	80031cc <puts>
}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	2000011c 	.word	0x2000011c
 8000730:	51eb851f 	.word	0x51eb851f
 8000734:	20000120 	.word	0x20000120
 8000738:	08003eac 	.word	0x08003eac
 800073c:	08003ec0 	.word	0x08003ec0

08000740 <smartcar_stop>:

////////////////////// Code Related with car moving control

void smartcar_stop() {
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(LFF_GPIO_Port, LFF_Pin, 0);
 8000744:	2200      	movs	r2, #0
 8000746:	2108      	movs	r1, #8
 8000748:	4816      	ldr	r0, [pc, #88]	@ (80007a4 <smartcar_stop+0x64>)
 800074a:	f000 ffc1 	bl	80016d0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LFB_GPIO_Port, LFB_Pin, 0);
 800074e:	2200      	movs	r2, #0
 8000750:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000754:	4814      	ldr	r0, [pc, #80]	@ (80007a8 <smartcar_stop+0x68>)
 8000756:	f000 ffbb 	bl	80016d0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(RFF_GPIO_Port, RFF_Pin, 0);
 800075a:	2200      	movs	r2, #0
 800075c:	2120      	movs	r1, #32
 800075e:	4811      	ldr	r0, [pc, #68]	@ (80007a4 <smartcar_stop+0x64>)
 8000760:	f000 ffb6 	bl	80016d0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(RFB_GPIO_Port, RFB_Pin, 0);
 8000764:	2200      	movs	r2, #0
 8000766:	2110      	movs	r1, #16
 8000768:	480e      	ldr	r0, [pc, #56]	@ (80007a4 <smartcar_stop+0x64>)
 800076a:	f000 ffb1 	bl	80016d0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LBF_GPIO_Port, LBF_Pin, 0);
 800076e:	2200      	movs	r2, #0
 8000770:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000774:	480b      	ldr	r0, [pc, #44]	@ (80007a4 <smartcar_stop+0x64>)
 8000776:	f000 ffab 	bl	80016d0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LBB_GPIO_Port, LBB_Pin, 0);
 800077a:	2200      	movs	r2, #0
 800077c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000780:	4809      	ldr	r0, [pc, #36]	@ (80007a8 <smartcar_stop+0x68>)
 8000782:	f000 ffa5 	bl	80016d0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(RBF_GPIO_Port, RBF_Pin, 0);
 8000786:	2200      	movs	r2, #0
 8000788:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800078c:	4805      	ldr	r0, [pc, #20]	@ (80007a4 <smartcar_stop+0x64>)
 800078e:	f000 ff9f 	bl	80016d0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(RBB_GPIO_Port, RBB_Pin, 0);
 8000792:	2200      	movs	r2, #0
 8000794:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000798:	4802      	ldr	r0, [pc, #8]	@ (80007a4 <smartcar_stop+0x64>)
 800079a:	f000 ff99 	bl	80016d0 <HAL_GPIO_WritePin>

}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40020400 	.word	0x40020400
 80007a8:	40020000 	.word	0x40020000

080007ac <smartcar_foward>:

void smartcar_foward() {
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(LFF_GPIO_Port, LFF_Pin, 1);
 80007b0:	2201      	movs	r2, #1
 80007b2:	2108      	movs	r1, #8
 80007b4:	4816      	ldr	r0, [pc, #88]	@ (8000810 <smartcar_foward+0x64>)
 80007b6:	f000 ff8b 	bl	80016d0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LFB_GPIO_Port, LFB_Pin, 0);
 80007ba:	2200      	movs	r2, #0
 80007bc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007c0:	4814      	ldr	r0, [pc, #80]	@ (8000814 <smartcar_foward+0x68>)
 80007c2:	f000 ff85 	bl	80016d0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(RFF_GPIO_Port, RFF_Pin, 1);
 80007c6:	2201      	movs	r2, #1
 80007c8:	2120      	movs	r1, #32
 80007ca:	4811      	ldr	r0, [pc, #68]	@ (8000810 <smartcar_foward+0x64>)
 80007cc:	f000 ff80 	bl	80016d0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(RFB_GPIO_Port, RFB_Pin, 0);
 80007d0:	2200      	movs	r2, #0
 80007d2:	2110      	movs	r1, #16
 80007d4:	480e      	ldr	r0, [pc, #56]	@ (8000810 <smartcar_foward+0x64>)
 80007d6:	f000 ff7b 	bl	80016d0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LBF_GPIO_Port, LBF_Pin, 1);
 80007da:	2201      	movs	r2, #1
 80007dc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007e0:	480b      	ldr	r0, [pc, #44]	@ (8000810 <smartcar_foward+0x64>)
 80007e2:	f000 ff75 	bl	80016d0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LBB_GPIO_Port, LBB_Pin, 0);
 80007e6:	2200      	movs	r2, #0
 80007e8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007ec:	4809      	ldr	r0, [pc, #36]	@ (8000814 <smartcar_foward+0x68>)
 80007ee:	f000 ff6f 	bl	80016d0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(RBF_GPIO_Port, RBF_Pin, 1);
 80007f2:	2201      	movs	r2, #1
 80007f4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007f8:	4805      	ldr	r0, [pc, #20]	@ (8000810 <smartcar_foward+0x64>)
 80007fa:	f000 ff69 	bl	80016d0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(RBB_GPIO_Port, RBB_Pin, 0);
 80007fe:	2200      	movs	r2, #0
 8000800:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000804:	4802      	ldr	r0, [pc, #8]	@ (8000810 <smartcar_foward+0x64>)
 8000806:	f000 ff63 	bl	80016d0 <HAL_GPIO_WritePin>

}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40020400 	.word	0x40020400
 8000814:	40020000 	.word	0x40020000

08000818 <smartcar_backward>:

void smartcar_backward() {
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(LFF_GPIO_Port, LFF_Pin, 0);
 800081c:	2200      	movs	r2, #0
 800081e:	2108      	movs	r1, #8
 8000820:	4816      	ldr	r0, [pc, #88]	@ (800087c <smartcar_backward+0x64>)
 8000822:	f000 ff55 	bl	80016d0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LFB_GPIO_Port, LFB_Pin, 1);
 8000826:	2201      	movs	r2, #1
 8000828:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800082c:	4814      	ldr	r0, [pc, #80]	@ (8000880 <smartcar_backward+0x68>)
 800082e:	f000 ff4f 	bl	80016d0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(RFF_GPIO_Port, RFF_Pin, 0);
 8000832:	2200      	movs	r2, #0
 8000834:	2120      	movs	r1, #32
 8000836:	4811      	ldr	r0, [pc, #68]	@ (800087c <smartcar_backward+0x64>)
 8000838:	f000 ff4a 	bl	80016d0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(RFB_GPIO_Port, RFB_Pin, 1);
 800083c:	2201      	movs	r2, #1
 800083e:	2110      	movs	r1, #16
 8000840:	480e      	ldr	r0, [pc, #56]	@ (800087c <smartcar_backward+0x64>)
 8000842:	f000 ff45 	bl	80016d0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LBF_GPIO_Port, LBF_Pin, 0);
 8000846:	2200      	movs	r2, #0
 8000848:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800084c:	480b      	ldr	r0, [pc, #44]	@ (800087c <smartcar_backward+0x64>)
 800084e:	f000 ff3f 	bl	80016d0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LBB_GPIO_Port, LBB_Pin, 1);
 8000852:	2201      	movs	r2, #1
 8000854:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000858:	4809      	ldr	r0, [pc, #36]	@ (8000880 <smartcar_backward+0x68>)
 800085a:	f000 ff39 	bl	80016d0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(RBF_GPIO_Port, RBF_Pin, 0);
 800085e:	2200      	movs	r2, #0
 8000860:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000864:	4805      	ldr	r0, [pc, #20]	@ (800087c <smartcar_backward+0x64>)
 8000866:	f000 ff33 	bl	80016d0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(RBB_GPIO_Port, RBB_Pin, 1);
 800086a:	2201      	movs	r2, #1
 800086c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000870:	4802      	ldr	r0, [pc, #8]	@ (800087c <smartcar_backward+0x64>)
 8000872:	f000 ff2d 	bl	80016d0 <HAL_GPIO_WritePin>

}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40020400 	.word	0x40020400
 8000880:	40020000 	.word	0x40020000

08000884 <smartcar_turn_left>:

void smartcar_turn_left() {
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(LFF_GPIO_Port, LFF_Pin, 1);
 8000888:	2201      	movs	r2, #1
 800088a:	2108      	movs	r1, #8
 800088c:	4816      	ldr	r0, [pc, #88]	@ (80008e8 <smartcar_turn_left+0x64>)
 800088e:	f000 ff1f 	bl	80016d0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LFB_GPIO_Port, LFB_Pin, 0);
 8000892:	2200      	movs	r2, #0
 8000894:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000898:	4814      	ldr	r0, [pc, #80]	@ (80008ec <smartcar_turn_left+0x68>)
 800089a:	f000 ff19 	bl	80016d0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(RFF_GPIO_Port, RFF_Pin, 0);
 800089e:	2200      	movs	r2, #0
 80008a0:	2120      	movs	r1, #32
 80008a2:	4811      	ldr	r0, [pc, #68]	@ (80008e8 <smartcar_turn_left+0x64>)
 80008a4:	f000 ff14 	bl	80016d0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(RFB_GPIO_Port, RFB_Pin, 1);
 80008a8:	2201      	movs	r2, #1
 80008aa:	2110      	movs	r1, #16
 80008ac:	480e      	ldr	r0, [pc, #56]	@ (80008e8 <smartcar_turn_left+0x64>)
 80008ae:	f000 ff0f 	bl	80016d0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LBF_GPIO_Port, LBF_Pin, 1);
 80008b2:	2201      	movs	r2, #1
 80008b4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008b8:	480b      	ldr	r0, [pc, #44]	@ (80008e8 <smartcar_turn_left+0x64>)
 80008ba:	f000 ff09 	bl	80016d0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LBB_GPIO_Port, LBB_Pin, 0);
 80008be:	2200      	movs	r2, #0
 80008c0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008c4:	4809      	ldr	r0, [pc, #36]	@ (80008ec <smartcar_turn_left+0x68>)
 80008c6:	f000 ff03 	bl	80016d0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(RBF_GPIO_Port, RBF_Pin, 0);
 80008ca:	2200      	movs	r2, #0
 80008cc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008d0:	4805      	ldr	r0, [pc, #20]	@ (80008e8 <smartcar_turn_left+0x64>)
 80008d2:	f000 fefd 	bl	80016d0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(RBB_GPIO_Port, RBB_Pin, 1);
 80008d6:	2201      	movs	r2, #1
 80008d8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008dc:	4802      	ldr	r0, [pc, #8]	@ (80008e8 <smartcar_turn_left+0x64>)
 80008de:	f000 fef7 	bl	80016d0 <HAL_GPIO_WritePin>

}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40020400 	.word	0x40020400
 80008ec:	40020000 	.word	0x40020000

080008f0 <smartcar_turn_right>:

void smartcar_turn_right() {
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(LFF_GPIO_Port, LFF_Pin, 0);
 80008f4:	2200      	movs	r2, #0
 80008f6:	2108      	movs	r1, #8
 80008f8:	4816      	ldr	r0, [pc, #88]	@ (8000954 <smartcar_turn_right+0x64>)
 80008fa:	f000 fee9 	bl	80016d0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LFB_GPIO_Port, LFB_Pin, 1);
 80008fe:	2201      	movs	r2, #1
 8000900:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000904:	4814      	ldr	r0, [pc, #80]	@ (8000958 <smartcar_turn_right+0x68>)
 8000906:	f000 fee3 	bl	80016d0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(RFF_GPIO_Port, RFF_Pin, 1);
 800090a:	2201      	movs	r2, #1
 800090c:	2120      	movs	r1, #32
 800090e:	4811      	ldr	r0, [pc, #68]	@ (8000954 <smartcar_turn_right+0x64>)
 8000910:	f000 fede 	bl	80016d0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(RFB_GPIO_Port, RFB_Pin, 0);
 8000914:	2200      	movs	r2, #0
 8000916:	2110      	movs	r1, #16
 8000918:	480e      	ldr	r0, [pc, #56]	@ (8000954 <smartcar_turn_right+0x64>)
 800091a:	f000 fed9 	bl	80016d0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LBF_GPIO_Port, LBF_Pin, 0);
 800091e:	2200      	movs	r2, #0
 8000920:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000924:	480b      	ldr	r0, [pc, #44]	@ (8000954 <smartcar_turn_right+0x64>)
 8000926:	f000 fed3 	bl	80016d0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LBB_GPIO_Port, LBB_Pin, 1);
 800092a:	2201      	movs	r2, #1
 800092c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000930:	4809      	ldr	r0, [pc, #36]	@ (8000958 <smartcar_turn_right+0x68>)
 8000932:	f000 fecd 	bl	80016d0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(RBF_GPIO_Port, RBF_Pin, 1);
 8000936:	2201      	movs	r2, #1
 8000938:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800093c:	4805      	ldr	r0, [pc, #20]	@ (8000954 <smartcar_turn_right+0x64>)
 800093e:	f000 fec7 	bl	80016d0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(RBB_GPIO_Port, RBB_Pin, 0);
 8000942:	2200      	movs	r2, #0
 8000944:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000948:	4802      	ldr	r0, [pc, #8]	@ (8000954 <smartcar_turn_right+0x64>)
 800094a:	f000 fec1 	bl	80016d0 <HAL_GPIO_WritePin>

}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40020400 	.word	0x40020400
 8000958:	40020000 	.word	0x40020000

0800095c <main>:

 * @retval int

 */

int main(void) {
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 8000960:	f000 fb9e 	bl	80010a0 <HAL_Init>

	/* USER CODE END Init */

	/* Configure the system clock */

	SystemClock_Config();
 8000964:	f000 f86c 	bl	8000a40 <SystemClock_Config>

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */

	MX_GPIO_Init();
 8000968:	f000 f94e 	bl	8000c08 <MX_GPIO_Init>

	MX_USART2_UART_Init();
 800096c:	f000 f922 	bl	8000bb4 <MX_USART2_UART_Init>

	MX_TIM1_Init();
 8000970:	f000 f8d0 	bl	8000b14 <MX_TIM1_Init>

	/* USER CODE BEGIN 2 */

	timer_start();
 8000974:	f7ff fe38 	bl	80005e8 <timer_start>

	printf("Ranging with HC-SR04\n");
 8000978:	4829      	ldr	r0, [pc, #164]	@ (8000a20 <main+0xc4>)
 800097a:	f002 fc27 	bl	80031cc <puts>

	/* Infinite loop */

	/* USER CODE BEGIN WHILE */

	smartcar_stop();
 800097e:	f7ff fedf 	bl	8000740 <smartcar_stop>

	while (1) {

		// 초음파 센서 값 먼저 측정 및 출력
		us_output();
 8000982:	f7ff fead 	bl	80006e0 <us_output>

		// UART 수신에 타임아웃을 50ms로 설정 (비교적 짧은 시간)
		// 키보드 입력이 없으면 50ms 뒤에 HAL_TIMEOUT 반환
		if (HAL_UART_Receive(&huart2, &ch, 1, 50) == HAL_OK) {
 8000986:	2332      	movs	r3, #50	@ 0x32
 8000988:	2201      	movs	r2, #1
 800098a:	4926      	ldr	r1, [pc, #152]	@ (8000a24 <main+0xc8>)
 800098c:	4826      	ldr	r0, [pc, #152]	@ (8000a28 <main+0xcc>)
 800098e:	f001 ff2c 	bl	80027ea <HAL_UART_Receive>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d13d      	bne.n	8000a14 <main+0xb8>
		// 키보드 입력이 있을 때만 차량 제어 코드 실행
		if (ch == 'w') {
 8000998:	4b22      	ldr	r3, [pc, #136]	@ (8000a24 <main+0xc8>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	2b77      	cmp	r3, #119	@ 0x77
 800099e:	d108      	bne.n	80009b2 <main+0x56>
		printf("Forward \n ");
 80009a0:	4822      	ldr	r0, [pc, #136]	@ (8000a2c <main+0xd0>)
 80009a2:	f002 fbab 	bl	80030fc <iprintf>
		smartcar_foward();
 80009a6:	f7ff ff01 	bl	80007ac <smartcar_foward>
		HAL_Delay(50);
 80009aa:	2032      	movs	r0, #50	@ 0x32
 80009ac:	f000 fbea 	bl	8001184 <HAL_Delay>
 80009b0:	e030      	b.n	8000a14 <main+0xb8>
		}
		else if (ch == 's') {
 80009b2:	4b1c      	ldr	r3, [pc, #112]	@ (8000a24 <main+0xc8>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	2b73      	cmp	r3, #115	@ 0x73
 80009b8:	d108      	bne.n	80009cc <main+0x70>
		printf("BackWard \n");
 80009ba:	481d      	ldr	r0, [pc, #116]	@ (8000a30 <main+0xd4>)
 80009bc:	f002 fc06 	bl	80031cc <puts>
		smartcar_backward();
 80009c0:	f7ff ff2a 	bl	8000818 <smartcar_backward>
		HAL_Delay(50);
 80009c4:	2032      	movs	r0, #50	@ 0x32
 80009c6:	f000 fbdd 	bl	8001184 <HAL_Delay>
 80009ca:	e023      	b.n	8000a14 <main+0xb8>
		}
		else if (ch == 'a') {
 80009cc:	4b15      	ldr	r3, [pc, #84]	@ (8000a24 <main+0xc8>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	2b61      	cmp	r3, #97	@ 0x61
 80009d2:	d108      	bne.n	80009e6 <main+0x8a>
		printf("turn left \n");
 80009d4:	4817      	ldr	r0, [pc, #92]	@ (8000a34 <main+0xd8>)
 80009d6:	f002 fbf9 	bl	80031cc <puts>
		smartcar_turn_left();
 80009da:	f7ff ff53 	bl	8000884 <smartcar_turn_left>
		HAL_Delay(50);
 80009de:	2032      	movs	r0, #50	@ 0x32
 80009e0:	f000 fbd0 	bl	8001184 <HAL_Delay>
 80009e4:	e016      	b.n	8000a14 <main+0xb8>
		}
		else if (ch == 'd') {
 80009e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000a24 <main+0xc8>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	2b64      	cmp	r3, #100	@ 0x64
 80009ec:	d108      	bne.n	8000a00 <main+0xa4>
		printf(" turn right \n");
 80009ee:	4812      	ldr	r0, [pc, #72]	@ (8000a38 <main+0xdc>)
 80009f0:	f002 fbec 	bl	80031cc <puts>
		smartcar_turn_right();
 80009f4:	f7ff ff7c 	bl	80008f0 <smartcar_turn_right>
		HAL_Delay(50);
 80009f8:	2032      	movs	r0, #50	@ 0x32
 80009fa:	f000 fbc3 	bl	8001184 <HAL_Delay>
 80009fe:	e009      	b.n	8000a14 <main+0xb8>
		}
		else if (ch == 'q') {
 8000a00:	4b08      	ldr	r3, [pc, #32]	@ (8000a24 <main+0xc8>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	2b71      	cmp	r3, #113	@ 0x71
 8000a06:	d102      	bne.n	8000a0e <main+0xb2>
		smartcar_stop();
 8000a08:	f7ff fe9a 	bl	8000740 <smartcar_stop>
 8000a0c:	e002      	b.n	8000a14 <main+0xb8>
		}
		else {
		printf("Error: invalid value input\n");
 8000a0e:	480b      	ldr	r0, [pc, #44]	@ (8000a3c <main+0xe0>)
 8000a10:	f002 fbdc 	bl	80031cc <puts>
		}
		}

		// 다음 루프를 위해 차량을 잠시 멈춤
		smartcar_stop();
 8000a14:	f7ff fe94 	bl	8000740 <smartcar_stop>
		HAL_Delay(50); // 초음파 측정 주기를 조절
 8000a18:	2032      	movs	r0, #50	@ 0x32
 8000a1a:	f000 fbb3 	bl	8001184 <HAL_Delay>
		us_output();
 8000a1e:	e7b0      	b.n	8000982 <main+0x26>
 8000a20:	08003ed0 	.word	0x08003ed0
 8000a24:	20000121 	.word	0x20000121
 8000a28:	200000d0 	.word	0x200000d0
 8000a2c:	08003ee8 	.word	0x08003ee8
 8000a30:	08003ef4 	.word	0x08003ef4
 8000a34:	08003f00 	.word	0x08003f00
 8000a38:	08003f0c 	.word	0x08003f0c
 8000a3c:	08003f1c 	.word	0x08003f1c

08000a40 <SystemClock_Config>:

 * @retval None

 */

void SystemClock_Config(void) {
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b094      	sub	sp, #80	@ 0x50
 8000a44:	af00      	add	r7, sp, #0

	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000a46:	f107 0320 	add.w	r3, r7, #32
 8000a4a:	2230      	movs	r2, #48	@ 0x30
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f002 fc9c 	bl	800338c <memset>

	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000a54:	f107 030c 	add.w	r3, r7, #12
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]
 8000a62:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage

	 */

	__HAL_RCC_PWR_CLK_ENABLE();
 8000a64:	2300      	movs	r3, #0
 8000a66:	60bb      	str	r3, [r7, #8]
 8000a68:	4b28      	ldr	r3, [pc, #160]	@ (8000b0c <SystemClock_Config+0xcc>)
 8000a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a6c:	4a27      	ldr	r2, [pc, #156]	@ (8000b0c <SystemClock_Config+0xcc>)
 8000a6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a72:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a74:	4b25      	ldr	r3, [pc, #148]	@ (8000b0c <SystemClock_Config+0xcc>)
 8000a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a7c:	60bb      	str	r3, [r7, #8]
 8000a7e:	68bb      	ldr	r3, [r7, #8]

	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a80:	2300      	movs	r3, #0
 8000a82:	607b      	str	r3, [r7, #4]
 8000a84:	4b22      	ldr	r3, [pc, #136]	@ (8000b10 <SystemClock_Config+0xd0>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a21      	ldr	r2, [pc, #132]	@ (8000b10 <SystemClock_Config+0xd0>)
 8000a8a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000a8e:	6013      	str	r3, [r2, #0]
 8000a90:	4b1f      	ldr	r3, [pc, #124]	@ (8000b10 <SystemClock_Config+0xd0>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a98:	607b      	str	r3, [r7, #4]
 8000a9a:	687b      	ldr	r3, [r7, #4]

	 * in the RCC_OscInitTypeDef structure.

	 */

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	623b      	str	r3, [r7, #32]

	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	62fb      	str	r3, [r7, #44]	@ 0x2c

	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000aa4:	2310      	movs	r3, #16
 8000aa6:	633b      	str	r3, [r7, #48]	@ 0x30

	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	63bb      	str	r3, [r7, #56]	@ 0x38

	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000aac:	2300      	movs	r3, #0
 8000aae:	63fb      	str	r3, [r7, #60]	@ 0x3c

	RCC_OscInitStruct.PLL.PLLM = 16;
 8000ab0:	2310      	movs	r3, #16
 8000ab2:	643b      	str	r3, [r7, #64]	@ 0x40

	RCC_OscInitStruct.PLL.PLLN = 336;
 8000ab4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000ab8:	647b      	str	r3, [r7, #68]	@ 0x44

	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000aba:	2304      	movs	r3, #4
 8000abc:	64bb      	str	r3, [r7, #72]	@ 0x48

	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000abe:	2304      	movs	r3, #4
 8000ac0:	64fb      	str	r3, [r7, #76]	@ 0x4c

	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000ac2:	f107 0320 	add.w	r3, r7, #32
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f000 fe1c 	bl	8001704 <HAL_RCC_OscConfig>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <SystemClock_Config+0x96>

		Error_Handler();
 8000ad2:	f000 f93f 	bl	8000d54 <Error_Handler>

	/** Initializes the CPU, AHB and APB buses clocks

	 */

	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000ad6:	230f      	movs	r3, #15
 8000ad8:	60fb      	str	r3, [r7, #12]

	| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ada:	2302      	movs	r3, #2
 8000adc:	613b      	str	r3, [r7, #16]

	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	617b      	str	r3, [r7, #20]

	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ae2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ae6:	61bb      	str	r3, [r7, #24]

	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000aec:	f107 030c 	add.w	r3, r7, #12
 8000af0:	2102      	movs	r1, #2
 8000af2:	4618      	mov	r0, r3
 8000af4:	f001 f87e 	bl	8001bf4 <HAL_RCC_ClockConfig>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <SystemClock_Config+0xc2>

		Error_Handler();
 8000afe:	f000 f929 	bl	8000d54 <Error_Handler>

	}

}
 8000b02:	bf00      	nop
 8000b04:	3750      	adds	r7, #80	@ 0x50
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40023800 	.word	0x40023800
 8000b10:	40007000 	.word	0x40007000

08000b14 <MX_TIM1_Init>:

 * @retval None

 */

static void MX_TIM1_Init(void) {
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b086      	sub	sp, #24
 8000b18:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000b1a:	f107 0308 	add.w	r3, r7, #8
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]
 8000b24:	609a      	str	r2, [r3, #8]
 8000b26:	60da      	str	r2, [r3, #12]

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000b28:	463b      	mov	r3, r7
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
 8000b2e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */

	htim1.Instance = TIM1;
 8000b30:	4b1e      	ldr	r3, [pc, #120]	@ (8000bac <MX_TIM1_Init+0x98>)
 8000b32:	4a1f      	ldr	r2, [pc, #124]	@ (8000bb0 <MX_TIM1_Init+0x9c>)
 8000b34:	601a      	str	r2, [r3, #0]

	htim1.Init.Prescaler = 84 - 1;
 8000b36:	4b1d      	ldr	r3, [pc, #116]	@ (8000bac <MX_TIM1_Init+0x98>)
 8000b38:	2253      	movs	r2, #83	@ 0x53
 8000b3a:	605a      	str	r2, [r3, #4]

	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b3c:	4b1b      	ldr	r3, [pc, #108]	@ (8000bac <MX_TIM1_Init+0x98>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	609a      	str	r2, [r3, #8]

	htim1.Init.Period = 65535;
 8000b42:	4b1a      	ldr	r3, [pc, #104]	@ (8000bac <MX_TIM1_Init+0x98>)
 8000b44:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b48:	60da      	str	r2, [r3, #12]

	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b4a:	4b18      	ldr	r3, [pc, #96]	@ (8000bac <MX_TIM1_Init+0x98>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	611a      	str	r2, [r3, #16]

	htim1.Init.RepetitionCounter = 0;
 8000b50:	4b16      	ldr	r3, [pc, #88]	@ (8000bac <MX_TIM1_Init+0x98>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	615a      	str	r2, [r3, #20]

	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b56:	4b15      	ldr	r3, [pc, #84]	@ (8000bac <MX_TIM1_Init+0x98>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	619a      	str	r2, [r3, #24]

	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8000b5c:	4813      	ldr	r0, [pc, #76]	@ (8000bac <MX_TIM1_Init+0x98>)
 8000b5e:	f001 fa69 	bl	8002034 <HAL_TIM_Base_Init>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_TIM1_Init+0x58>

		Error_Handler();
 8000b68:	f000 f8f4 	bl	8000d54 <Error_Handler>

	}

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b70:	60bb      	str	r3, [r7, #8]

	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8000b72:	f107 0308 	add.w	r3, r7, #8
 8000b76:	4619      	mov	r1, r3
 8000b78:	480c      	ldr	r0, [pc, #48]	@ (8000bac <MX_TIM1_Init+0x98>)
 8000b7a:	f001 fb05 	bl	8002188 <HAL_TIM_ConfigClockSource>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_TIM1_Init+0x74>

		Error_Handler();
 8000b84:	f000 f8e6 	bl	8000d54 <Error_Handler>

	}

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	603b      	str	r3, [r7, #0]

	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	607b      	str	r3, [r7, #4]

	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8000b90:	463b      	mov	r3, r7
 8000b92:	4619      	mov	r1, r3
 8000b94:	4805      	ldr	r0, [pc, #20]	@ (8000bac <MX_TIM1_Init+0x98>)
 8000b96:	f001 fcdf 	bl	8002558 <HAL_TIMEx_MasterConfigSynchronization>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_TIM1_Init+0x90>

	!= HAL_OK) {

		Error_Handler();
 8000ba0:	f000 f8d8 	bl	8000d54 <Error_Handler>

	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8000ba4:	bf00      	nop
 8000ba6:	3718      	adds	r7, #24
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	20000088 	.word	0x20000088
 8000bb0:	40010000 	.word	0x40010000

08000bb4 <MX_USART2_UART_Init>:

 * @retval None

 */

static void MX_USART2_UART_Init(void) {
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */

	huart2.Instance = USART2;
 8000bb8:	4b11      	ldr	r3, [pc, #68]	@ (8000c00 <MX_USART2_UART_Init+0x4c>)
 8000bba:	4a12      	ldr	r2, [pc, #72]	@ (8000c04 <MX_USART2_UART_Init+0x50>)
 8000bbc:	601a      	str	r2, [r3, #0]

	huart2.Init.BaudRate = 115200;
 8000bbe:	4b10      	ldr	r3, [pc, #64]	@ (8000c00 <MX_USART2_UART_Init+0x4c>)
 8000bc0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bc4:	605a      	str	r2, [r3, #4]

	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bc6:	4b0e      	ldr	r3, [pc, #56]	@ (8000c00 <MX_USART2_UART_Init+0x4c>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	609a      	str	r2, [r3, #8]

	huart2.Init.StopBits = UART_STOPBITS_1;
 8000bcc:	4b0c      	ldr	r3, [pc, #48]	@ (8000c00 <MX_USART2_UART_Init+0x4c>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	60da      	str	r2, [r3, #12]

	huart2.Init.Parity = UART_PARITY_NONE;
 8000bd2:	4b0b      	ldr	r3, [pc, #44]	@ (8000c00 <MX_USART2_UART_Init+0x4c>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	611a      	str	r2, [r3, #16]

	huart2.Init.Mode = UART_MODE_TX_RX;
 8000bd8:	4b09      	ldr	r3, [pc, #36]	@ (8000c00 <MX_USART2_UART_Init+0x4c>)
 8000bda:	220c      	movs	r2, #12
 8000bdc:	615a      	str	r2, [r3, #20]

	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bde:	4b08      	ldr	r3, [pc, #32]	@ (8000c00 <MX_USART2_UART_Init+0x4c>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	619a      	str	r2, [r3, #24]

	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000be4:	4b06      	ldr	r3, [pc, #24]	@ (8000c00 <MX_USART2_UART_Init+0x4c>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	61da      	str	r2, [r3, #28]

	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000bea:	4805      	ldr	r0, [pc, #20]	@ (8000c00 <MX_USART2_UART_Init+0x4c>)
 8000bec:	f001 fd22 	bl	8002634 <HAL_UART_Init>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_USART2_UART_Init+0x46>

		Error_Handler();
 8000bf6:	f000 f8ad 	bl	8000d54 <Error_Handler>

	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	200000d0 	.word	0x200000d0
 8000c04:	40004400 	.word	0x40004400

08000c08 <MX_GPIO_Init>:

 * @retval None

 */

static void MX_GPIO_Init(void) {
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b08a      	sub	sp, #40	@ 0x28
 8000c0c:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000c0e:	f107 0314 	add.w	r3, r7, #20
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	605a      	str	r2, [r3, #4]
 8000c18:	609a      	str	r2, [r3, #8]
 8000c1a:	60da      	str	r2, [r3, #12]
 8000c1c:	611a      	str	r2, [r3, #16]

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */

	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	4b48      	ldr	r3, [pc, #288]	@ (8000d44 <MX_GPIO_Init+0x13c>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c26:	4a47      	ldr	r2, [pc, #284]	@ (8000d44 <MX_GPIO_Init+0x13c>)
 8000c28:	f043 0304 	orr.w	r3, r3, #4
 8000c2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c2e:	4b45      	ldr	r3, [pc, #276]	@ (8000d44 <MX_GPIO_Init+0x13c>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c32:	f003 0304 	and.w	r3, r3, #4
 8000c36:	613b      	str	r3, [r7, #16]
 8000c38:	693b      	ldr	r3, [r7, #16]

	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60fb      	str	r3, [r7, #12]
 8000c3e:	4b41      	ldr	r3, [pc, #260]	@ (8000d44 <MX_GPIO_Init+0x13c>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c42:	4a40      	ldr	r2, [pc, #256]	@ (8000d44 <MX_GPIO_Init+0x13c>)
 8000c44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c4a:	4b3e      	ldr	r3, [pc, #248]	@ (8000d44 <MX_GPIO_Init+0x13c>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	68fb      	ldr	r3, [r7, #12]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	60bb      	str	r3, [r7, #8]
 8000c5a:	4b3a      	ldr	r3, [pc, #232]	@ (8000d44 <MX_GPIO_Init+0x13c>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5e:	4a39      	ldr	r2, [pc, #228]	@ (8000d44 <MX_GPIO_Init+0x13c>)
 8000c60:	f043 0301 	orr.w	r3, r3, #1
 8000c64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c66:	4b37      	ldr	r3, [pc, #220]	@ (8000d44 <MX_GPIO_Init+0x13c>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	60bb      	str	r3, [r7, #8]
 8000c70:	68bb      	ldr	r3, [r7, #8]

	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	607b      	str	r3, [r7, #4]
 8000c76:	4b33      	ldr	r3, [pc, #204]	@ (8000d44 <MX_GPIO_Init+0x13c>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7a:	4a32      	ldr	r2, [pc, #200]	@ (8000d44 <MX_GPIO_Init+0x13c>)
 8000c7c:	f043 0302 	orr.w	r3, r3, #2
 8000c80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c82:	4b30      	ldr	r3, [pc, #192]	@ (8000d44 <MX_GPIO_Init+0x13c>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c86:	f003 0302 	and.w	r3, r3, #2
 8000c8a:	607b      	str	r3, [r7, #4]
 8000c8c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */

	HAL_GPIO_WritePin(GPIOA, LD2_Pin | LBB_Pin | LFB_Pin, GPIO_PIN_RESET);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8000c94:	482c      	ldr	r0, [pc, #176]	@ (8000d48 <MX_GPIO_Init+0x140>)
 8000c96:	f000 fd1b 	bl	80016d0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */

	HAL_GPIO_WritePin(GPIOB,
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	f44f 61e7 	mov.w	r1, #1848	@ 0x738
 8000ca0:	482a      	ldr	r0, [pc, #168]	@ (8000d4c <MX_GPIO_Init+0x144>)
 8000ca2:	f000 fd15 	bl	80016d0 <HAL_GPIO_WritePin>

	GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */

	HAL_GPIO_WritePin(Trigger_GPIO_Port, Trigger_Pin, GPIO_PIN_RESET);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	2180      	movs	r1, #128	@ 0x80
 8000caa:	4829      	ldr	r0, [pc, #164]	@ (8000d50 <MX_GPIO_Init+0x148>)
 8000cac:	f000 fd10 	bl	80016d0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */

	GPIO_InitStruct.Pin = B1_Pin;
 8000cb0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cb4:	617b      	str	r3, [r7, #20]

	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cb6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000cba:	61bb      	str	r3, [r7, #24]

	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	61fb      	str	r3, [r7, #28]

	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cc0:	f107 0314 	add.w	r3, r7, #20
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4822      	ldr	r0, [pc, #136]	@ (8000d50 <MX_GPIO_Init+0x148>)
 8000cc8:	f000 fb66 	bl	8001398 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD2_Pin LBB_Pin LFB_Pin */

	GPIO_InitStruct.Pin = LD2_Pin | LBB_Pin | LFB_Pin;
 8000ccc:	f44f 63c4 	mov.w	r3, #1568	@ 0x620
 8000cd0:	617b      	str	r3, [r7, #20]

	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	61bb      	str	r3, [r7, #24]

	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	61fb      	str	r3, [r7, #28]

	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	623b      	str	r3, [r7, #32]

	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cde:	f107 0314 	add.w	r3, r7, #20
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4818      	ldr	r0, [pc, #96]	@ (8000d48 <MX_GPIO_Init+0x140>)
 8000ce6:	f000 fb57 	bl	8001398 <HAL_GPIO_Init>

	/*Configure GPIO pin : Echo_Pin */

	GPIO_InitStruct.Pin = Echo_Pin;
 8000cea:	2301      	movs	r3, #1
 8000cec:	617b      	str	r3, [r7, #20]

	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	61bb      	str	r3, [r7, #24]

	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	61fb      	str	r3, [r7, #28]

	HAL_GPIO_Init(Echo_GPIO_Port, &GPIO_InitStruct);
 8000cf6:	f107 0314 	add.w	r3, r7, #20
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4813      	ldr	r0, [pc, #76]	@ (8000d4c <MX_GPIO_Init+0x144>)
 8000cfe:	f000 fb4b 	bl	8001398 <HAL_GPIO_Init>

	/*Configure GPIO pins : LBF_Pin LFF_Pin RFB_Pin RFF_Pin

	 RBB_Pin RBF_Pin */

	GPIO_InitStruct.Pin = LBF_Pin | LFF_Pin | RFB_Pin | RFF_Pin | RBB_Pin
 8000d02:	f44f 63e7 	mov.w	r3, #1848	@ 0x738
 8000d06:	617b      	str	r3, [r7, #20]

	| RBF_Pin;

	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	61bb      	str	r3, [r7, #24]

	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	61fb      	str	r3, [r7, #28]

	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d10:	2300      	movs	r3, #0
 8000d12:	623b      	str	r3, [r7, #32]

	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d14:	f107 0314 	add.w	r3, r7, #20
 8000d18:	4619      	mov	r1, r3
 8000d1a:	480c      	ldr	r0, [pc, #48]	@ (8000d4c <MX_GPIO_Init+0x144>)
 8000d1c:	f000 fb3c 	bl	8001398 <HAL_GPIO_Init>

	/*Configure GPIO pin : Trigger_Pin */

	GPIO_InitStruct.Pin = Trigger_Pin;
 8000d20:	2380      	movs	r3, #128	@ 0x80
 8000d22:	617b      	str	r3, [r7, #20]

	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d24:	2301      	movs	r3, #1
 8000d26:	61bb      	str	r3, [r7, #24]

	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	61fb      	str	r3, [r7, #28]

	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	623b      	str	r3, [r7, #32]

	HAL_GPIO_Init(Trigger_GPIO_Port, &GPIO_InitStruct);
 8000d30:	f107 0314 	add.w	r3, r7, #20
 8000d34:	4619      	mov	r1, r3
 8000d36:	4806      	ldr	r0, [pc, #24]	@ (8000d50 <MX_GPIO_Init+0x148>)
 8000d38:	f000 fb2e 	bl	8001398 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */

}
 8000d3c:	bf00      	nop
 8000d3e:	3728      	adds	r7, #40	@ 0x28
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	40023800 	.word	0x40023800
 8000d48:	40020000 	.word	0x40020000
 8000d4c:	40020400 	.word	0x40020400
 8000d50:	40020800 	.word	0x40020800

08000d54 <Error_Handler>:

 * @retval None

 */

void Error_Handler(void) {
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d58:	b672      	cpsid	i
}
 8000d5a:	bf00      	nop

	/* User can add his own implementation to report the HAL error return state */

	__disable_irq();

	while (1) {
 8000d5c:	bf00      	nop
 8000d5e:	e7fd      	b.n	8000d5c <Error_Handler+0x8>

08000d60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	607b      	str	r3, [r7, #4]
 8000d6a:	4b10      	ldr	r3, [pc, #64]	@ (8000dac <HAL_MspInit+0x4c>)
 8000d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d6e:	4a0f      	ldr	r2, [pc, #60]	@ (8000dac <HAL_MspInit+0x4c>)
 8000d70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d74:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d76:	4b0d      	ldr	r3, [pc, #52]	@ (8000dac <HAL_MspInit+0x4c>)
 8000d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d7e:	607b      	str	r3, [r7, #4]
 8000d80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	603b      	str	r3, [r7, #0]
 8000d86:	4b09      	ldr	r3, [pc, #36]	@ (8000dac <HAL_MspInit+0x4c>)
 8000d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d8a:	4a08      	ldr	r2, [pc, #32]	@ (8000dac <HAL_MspInit+0x4c>)
 8000d8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d90:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d92:	4b06      	ldr	r3, [pc, #24]	@ (8000dac <HAL_MspInit+0x4c>)
 8000d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d9a:	603b      	str	r3, [r7, #0]
 8000d9c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d9e:	2007      	movs	r0, #7
 8000da0:	f000 fac6 	bl	8001330 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000da4:	bf00      	nop
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	40023800 	.word	0x40023800

08000db0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b085      	sub	sp, #20
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a0b      	ldr	r2, [pc, #44]	@ (8000dec <HAL_TIM_Base_MspInit+0x3c>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d10d      	bne.n	8000dde <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60fb      	str	r3, [r7, #12]
 8000dc6:	4b0a      	ldr	r3, [pc, #40]	@ (8000df0 <HAL_TIM_Base_MspInit+0x40>)
 8000dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dca:	4a09      	ldr	r2, [pc, #36]	@ (8000df0 <HAL_TIM_Base_MspInit+0x40>)
 8000dcc:	f043 0301 	orr.w	r3, r3, #1
 8000dd0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dd2:	4b07      	ldr	r3, [pc, #28]	@ (8000df0 <HAL_TIM_Base_MspInit+0x40>)
 8000dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dd6:	f003 0301 	and.w	r3, r3, #1
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000dde:	bf00      	nop
 8000de0:	3714      	adds	r7, #20
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	40010000 	.word	0x40010000
 8000df0:	40023800 	.word	0x40023800

08000df4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b08a      	sub	sp, #40	@ 0x28
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfc:	f107 0314 	add.w	r3, r7, #20
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
 8000e0a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a19      	ldr	r2, [pc, #100]	@ (8000e78 <HAL_UART_MspInit+0x84>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d12b      	bne.n	8000e6e <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	613b      	str	r3, [r7, #16]
 8000e1a:	4b18      	ldr	r3, [pc, #96]	@ (8000e7c <HAL_UART_MspInit+0x88>)
 8000e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e1e:	4a17      	ldr	r2, [pc, #92]	@ (8000e7c <HAL_UART_MspInit+0x88>)
 8000e20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e24:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e26:	4b15      	ldr	r3, [pc, #84]	@ (8000e7c <HAL_UART_MspInit+0x88>)
 8000e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e2e:	613b      	str	r3, [r7, #16]
 8000e30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	60fb      	str	r3, [r7, #12]
 8000e36:	4b11      	ldr	r3, [pc, #68]	@ (8000e7c <HAL_UART_MspInit+0x88>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3a:	4a10      	ldr	r2, [pc, #64]	@ (8000e7c <HAL_UART_MspInit+0x88>)
 8000e3c:	f043 0301 	orr.w	r3, r3, #1
 8000e40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e42:	4b0e      	ldr	r3, [pc, #56]	@ (8000e7c <HAL_UART_MspInit+0x88>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e46:	f003 0301 	and.w	r3, r3, #1
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e4e:	230c      	movs	r3, #12
 8000e50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e52:	2302      	movs	r3, #2
 8000e54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e5a:	2303      	movs	r3, #3
 8000e5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e5e:	2307      	movs	r3, #7
 8000e60:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e62:	f107 0314 	add.w	r3, r7, #20
 8000e66:	4619      	mov	r1, r3
 8000e68:	4805      	ldr	r0, [pc, #20]	@ (8000e80 <HAL_UART_MspInit+0x8c>)
 8000e6a:	f000 fa95 	bl	8001398 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000e6e:	bf00      	nop
 8000e70:	3728      	adds	r7, #40	@ 0x28
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40004400 	.word	0x40004400
 8000e7c:	40023800 	.word	0x40023800
 8000e80:	40020000 	.word	0x40020000

08000e84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e88:	bf00      	nop
 8000e8a:	e7fd      	b.n	8000e88 <NMI_Handler+0x4>

08000e8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e90:	bf00      	nop
 8000e92:	e7fd      	b.n	8000e90 <HardFault_Handler+0x4>

08000e94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e98:	bf00      	nop
 8000e9a:	e7fd      	b.n	8000e98 <MemManage_Handler+0x4>

08000e9c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ea0:	bf00      	nop
 8000ea2:	e7fd      	b.n	8000ea0 <BusFault_Handler+0x4>

08000ea4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ea8:	bf00      	nop
 8000eaa:	e7fd      	b.n	8000ea8 <UsageFault_Handler+0x4>

08000eac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eb0:	bf00      	nop
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr

08000eba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr

08000ec8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr

08000ed6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eda:	f000 f933 	bl	8001144 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b086      	sub	sp, #24
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	60f8      	str	r0, [r7, #12]
 8000eea:	60b9      	str	r1, [r7, #8]
 8000eec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eee:	2300      	movs	r3, #0
 8000ef0:	617b      	str	r3, [r7, #20]
 8000ef2:	e00a      	b.n	8000f0a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ef4:	f3af 8000 	nop.w
 8000ef8:	4601      	mov	r1, r0
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	1c5a      	adds	r2, r3, #1
 8000efe:	60ba      	str	r2, [r7, #8]
 8000f00:	b2ca      	uxtb	r2, r1
 8000f02:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	3301      	adds	r3, #1
 8000f08:	617b      	str	r3, [r7, #20]
 8000f0a:	697a      	ldr	r2, [r7, #20]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	429a      	cmp	r2, r3
 8000f10:	dbf0      	blt.n	8000ef4 <_read+0x12>
  }

  return len;
 8000f12:	687b      	ldr	r3, [r7, #4]
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3718      	adds	r7, #24
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b086      	sub	sp, #24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	60f8      	str	r0, [r7, #12]
 8000f24:	60b9      	str	r1, [r7, #8]
 8000f26:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f28:	2300      	movs	r3, #0
 8000f2a:	617b      	str	r3, [r7, #20]
 8000f2c:	e009      	b.n	8000f42 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f2e:	68bb      	ldr	r3, [r7, #8]
 8000f30:	1c5a      	adds	r2, r3, #1
 8000f32:	60ba      	str	r2, [r7, #8]
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	4618      	mov	r0, r3
 8000f38:	f7ff fb38 	bl	80005ac <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	3301      	adds	r3, #1
 8000f40:	617b      	str	r3, [r7, #20]
 8000f42:	697a      	ldr	r2, [r7, #20]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	429a      	cmp	r2, r3
 8000f48:	dbf1      	blt.n	8000f2e <_write+0x12>
  }
  return len;
 8000f4a:	687b      	ldr	r3, [r7, #4]
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3718      	adds	r7, #24
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <_close>:

int _close(int file)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f7c:	605a      	str	r2, [r3, #4]
  return 0;
 8000f7e:	2300      	movs	r3, #0
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <_isatty>:

int _isatty(int file)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f94:	2301      	movs	r3, #1
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr

08000fa2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	b085      	sub	sp, #20
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	60f8      	str	r0, [r7, #12]
 8000faa:	60b9      	str	r1, [r7, #8]
 8000fac:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fae:	2300      	movs	r3, #0
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3714      	adds	r7, #20
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b086      	sub	sp, #24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fc4:	4a14      	ldr	r2, [pc, #80]	@ (8001018 <_sbrk+0x5c>)
 8000fc6:	4b15      	ldr	r3, [pc, #84]	@ (800101c <_sbrk+0x60>)
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fd0:	4b13      	ldr	r3, [pc, #76]	@ (8001020 <_sbrk+0x64>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d102      	bne.n	8000fde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fd8:	4b11      	ldr	r3, [pc, #68]	@ (8001020 <_sbrk+0x64>)
 8000fda:	4a12      	ldr	r2, [pc, #72]	@ (8001024 <_sbrk+0x68>)
 8000fdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fde:	4b10      	ldr	r3, [pc, #64]	@ (8001020 <_sbrk+0x64>)
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d207      	bcs.n	8000ffc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fec:	f002 fa1c 	bl	8003428 <__errno>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	220c      	movs	r2, #12
 8000ff4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffa:	e009      	b.n	8001010 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ffc:	4b08      	ldr	r3, [pc, #32]	@ (8001020 <_sbrk+0x64>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001002:	4b07      	ldr	r3, [pc, #28]	@ (8001020 <_sbrk+0x64>)
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4413      	add	r3, r2
 800100a:	4a05      	ldr	r2, [pc, #20]	@ (8001020 <_sbrk+0x64>)
 800100c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800100e:	68fb      	ldr	r3, [r7, #12]
}
 8001010:	4618      	mov	r0, r3
 8001012:	3718      	adds	r7, #24
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	20020000 	.word	0x20020000
 800101c:	00000400 	.word	0x00000400
 8001020:	20000124 	.word	0x20000124
 8001024:	20000278 	.word	0x20000278

08001028 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800102c:	4b06      	ldr	r3, [pc, #24]	@ (8001048 <SystemInit+0x20>)
 800102e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001032:	4a05      	ldr	r2, [pc, #20]	@ (8001048 <SystemInit+0x20>)
 8001034:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001038:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800103c:	bf00      	nop
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	e000ed00 	.word	0xe000ed00

0800104c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800104c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001084 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001050:	f7ff ffea 	bl	8001028 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001054:	480c      	ldr	r0, [pc, #48]	@ (8001088 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001056:	490d      	ldr	r1, [pc, #52]	@ (800108c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001058:	4a0d      	ldr	r2, [pc, #52]	@ (8001090 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800105a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800105c:	e002      	b.n	8001064 <LoopCopyDataInit>

0800105e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800105e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001060:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001062:	3304      	adds	r3, #4

08001064 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001064:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001066:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001068:	d3f9      	bcc.n	800105e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800106a:	4a0a      	ldr	r2, [pc, #40]	@ (8001094 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800106c:	4c0a      	ldr	r4, [pc, #40]	@ (8001098 <LoopFillZerobss+0x22>)
  movs r3, #0
 800106e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001070:	e001      	b.n	8001076 <LoopFillZerobss>

08001072 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001072:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001074:	3204      	adds	r2, #4

08001076 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001076:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001078:	d3fb      	bcc.n	8001072 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800107a:	f002 f9db 	bl	8003434 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800107e:	f7ff fc6d 	bl	800095c <main>
  bx  lr    
 8001082:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001084:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001088:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800108c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001090:	08003f94 	.word	0x08003f94
  ldr r2, =_sbss
 8001094:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001098:	20000278 	.word	0x20000278

0800109c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800109c:	e7fe      	b.n	800109c <ADC_IRQHandler>
	...

080010a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010a4:	4b0e      	ldr	r3, [pc, #56]	@ (80010e0 <HAL_Init+0x40>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a0d      	ldr	r2, [pc, #52]	@ (80010e0 <HAL_Init+0x40>)
 80010aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010b0:	4b0b      	ldr	r3, [pc, #44]	@ (80010e0 <HAL_Init+0x40>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a0a      	ldr	r2, [pc, #40]	@ (80010e0 <HAL_Init+0x40>)
 80010b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80010ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010bc:	4b08      	ldr	r3, [pc, #32]	@ (80010e0 <HAL_Init+0x40>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a07      	ldr	r2, [pc, #28]	@ (80010e0 <HAL_Init+0x40>)
 80010c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010c8:	2003      	movs	r0, #3
 80010ca:	f000 f931 	bl	8001330 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ce:	2000      	movs	r0, #0
 80010d0:	f000 f808 	bl	80010e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010d4:	f7ff fe44 	bl	8000d60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40023c00 	.word	0x40023c00

080010e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010ec:	4b12      	ldr	r3, [pc, #72]	@ (8001138 <HAL_InitTick+0x54>)
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	4b12      	ldr	r3, [pc, #72]	@ (800113c <HAL_InitTick+0x58>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	4619      	mov	r1, r3
 80010f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80010fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001102:	4618      	mov	r0, r3
 8001104:	f000 f93b 	bl	800137e <HAL_SYSTICK_Config>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e00e      	b.n	8001130 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2b0f      	cmp	r3, #15
 8001116:	d80a      	bhi.n	800112e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001118:	2200      	movs	r2, #0
 800111a:	6879      	ldr	r1, [r7, #4]
 800111c:	f04f 30ff 	mov.w	r0, #4294967295
 8001120:	f000 f911 	bl	8001346 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001124:	4a06      	ldr	r2, [pc, #24]	@ (8001140 <HAL_InitTick+0x5c>)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800112a:	2300      	movs	r3, #0
 800112c:	e000      	b.n	8001130 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
}
 8001130:	4618      	mov	r0, r3
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	20000004 	.word	0x20000004
 800113c:	2000000c 	.word	0x2000000c
 8001140:	20000008 	.word	0x20000008

08001144 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001148:	4b06      	ldr	r3, [pc, #24]	@ (8001164 <HAL_IncTick+0x20>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	461a      	mov	r2, r3
 800114e:	4b06      	ldr	r3, [pc, #24]	@ (8001168 <HAL_IncTick+0x24>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4413      	add	r3, r2
 8001154:	4a04      	ldr	r2, [pc, #16]	@ (8001168 <HAL_IncTick+0x24>)
 8001156:	6013      	str	r3, [r2, #0]
}
 8001158:	bf00      	nop
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	2000000c 	.word	0x2000000c
 8001168:	20000128 	.word	0x20000128

0800116c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  return uwTick;
 8001170:	4b03      	ldr	r3, [pc, #12]	@ (8001180 <HAL_GetTick+0x14>)
 8001172:	681b      	ldr	r3, [r3, #0]
}
 8001174:	4618      	mov	r0, r3
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	20000128 	.word	0x20000128

08001184 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800118c:	f7ff ffee 	bl	800116c <HAL_GetTick>
 8001190:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800119c:	d005      	beq.n	80011aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800119e:	4b0a      	ldr	r3, [pc, #40]	@ (80011c8 <HAL_Delay+0x44>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	461a      	mov	r2, r3
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	4413      	add	r3, r2
 80011a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011aa:	bf00      	nop
 80011ac:	f7ff ffde 	bl	800116c <HAL_GetTick>
 80011b0:	4602      	mov	r2, r0
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	68fa      	ldr	r2, [r7, #12]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d8f7      	bhi.n	80011ac <HAL_Delay+0x28>
  {
  }
}
 80011bc:	bf00      	nop
 80011be:	bf00      	nop
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	2000000c 	.word	0x2000000c

080011cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f003 0307 	and.w	r3, r3, #7
 80011da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001210 <__NVIC_SetPriorityGrouping+0x44>)
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011e2:	68ba      	ldr	r2, [r7, #8]
 80011e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011e8:	4013      	ands	r3, r2
 80011ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011fe:	4a04      	ldr	r2, [pc, #16]	@ (8001210 <__NVIC_SetPriorityGrouping+0x44>)
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	60d3      	str	r3, [r2, #12]
}
 8001204:	bf00      	nop
 8001206:	3714      	adds	r7, #20
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	e000ed00 	.word	0xe000ed00

08001214 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001218:	4b04      	ldr	r3, [pc, #16]	@ (800122c <__NVIC_GetPriorityGrouping+0x18>)
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	0a1b      	lsrs	r3, r3, #8
 800121e:	f003 0307 	and.w	r3, r3, #7
}
 8001222:	4618      	mov	r0, r3
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	6039      	str	r1, [r7, #0]
 800123a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800123c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001240:	2b00      	cmp	r3, #0
 8001242:	db0a      	blt.n	800125a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	b2da      	uxtb	r2, r3
 8001248:	490c      	ldr	r1, [pc, #48]	@ (800127c <__NVIC_SetPriority+0x4c>)
 800124a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124e:	0112      	lsls	r2, r2, #4
 8001250:	b2d2      	uxtb	r2, r2
 8001252:	440b      	add	r3, r1
 8001254:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001258:	e00a      	b.n	8001270 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	b2da      	uxtb	r2, r3
 800125e:	4908      	ldr	r1, [pc, #32]	@ (8001280 <__NVIC_SetPriority+0x50>)
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	f003 030f 	and.w	r3, r3, #15
 8001266:	3b04      	subs	r3, #4
 8001268:	0112      	lsls	r2, r2, #4
 800126a:	b2d2      	uxtb	r2, r2
 800126c:	440b      	add	r3, r1
 800126e:	761a      	strb	r2, [r3, #24]
}
 8001270:	bf00      	nop
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	e000e100 	.word	0xe000e100
 8001280:	e000ed00 	.word	0xe000ed00

08001284 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001284:	b480      	push	{r7}
 8001286:	b089      	sub	sp, #36	@ 0x24
 8001288:	af00      	add	r7, sp, #0
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	f003 0307 	and.w	r3, r3, #7
 8001296:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	f1c3 0307 	rsb	r3, r3, #7
 800129e:	2b04      	cmp	r3, #4
 80012a0:	bf28      	it	cs
 80012a2:	2304      	movcs	r3, #4
 80012a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	3304      	adds	r3, #4
 80012aa:	2b06      	cmp	r3, #6
 80012ac:	d902      	bls.n	80012b4 <NVIC_EncodePriority+0x30>
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	3b03      	subs	r3, #3
 80012b2:	e000      	b.n	80012b6 <NVIC_EncodePriority+0x32>
 80012b4:	2300      	movs	r3, #0
 80012b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b8:	f04f 32ff 	mov.w	r2, #4294967295
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	43da      	mvns	r2, r3
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	401a      	ands	r2, r3
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012cc:	f04f 31ff 	mov.w	r1, #4294967295
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	fa01 f303 	lsl.w	r3, r1, r3
 80012d6:	43d9      	mvns	r1, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012dc:	4313      	orrs	r3, r2
         );
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3724      	adds	r7, #36	@ 0x24
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
	...

080012ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	3b01      	subs	r3, #1
 80012f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012fc:	d301      	bcc.n	8001302 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012fe:	2301      	movs	r3, #1
 8001300:	e00f      	b.n	8001322 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001302:	4a0a      	ldr	r2, [pc, #40]	@ (800132c <SysTick_Config+0x40>)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	3b01      	subs	r3, #1
 8001308:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800130a:	210f      	movs	r1, #15
 800130c:	f04f 30ff 	mov.w	r0, #4294967295
 8001310:	f7ff ff8e 	bl	8001230 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001314:	4b05      	ldr	r3, [pc, #20]	@ (800132c <SysTick_Config+0x40>)
 8001316:	2200      	movs	r2, #0
 8001318:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800131a:	4b04      	ldr	r3, [pc, #16]	@ (800132c <SysTick_Config+0x40>)
 800131c:	2207      	movs	r2, #7
 800131e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	e000e010 	.word	0xe000e010

08001330 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f7ff ff47 	bl	80011cc <__NVIC_SetPriorityGrouping>
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001346:	b580      	push	{r7, lr}
 8001348:	b086      	sub	sp, #24
 800134a:	af00      	add	r7, sp, #0
 800134c:	4603      	mov	r3, r0
 800134e:	60b9      	str	r1, [r7, #8]
 8001350:	607a      	str	r2, [r7, #4]
 8001352:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001354:	2300      	movs	r3, #0
 8001356:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001358:	f7ff ff5c 	bl	8001214 <__NVIC_GetPriorityGrouping>
 800135c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	68b9      	ldr	r1, [r7, #8]
 8001362:	6978      	ldr	r0, [r7, #20]
 8001364:	f7ff ff8e 	bl	8001284 <NVIC_EncodePriority>
 8001368:	4602      	mov	r2, r0
 800136a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800136e:	4611      	mov	r1, r2
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff ff5d 	bl	8001230 <__NVIC_SetPriority>
}
 8001376:	bf00      	nop
 8001378:	3718      	adds	r7, #24
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	b082      	sub	sp, #8
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f7ff ffb0 	bl	80012ec <SysTick_Config>
 800138c:	4603      	mov	r3, r0
}
 800138e:	4618      	mov	r0, r3
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
	...

08001398 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001398:	b480      	push	{r7}
 800139a:	b089      	sub	sp, #36	@ 0x24
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013a2:	2300      	movs	r3, #0
 80013a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013a6:	2300      	movs	r3, #0
 80013a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013aa:	2300      	movs	r3, #0
 80013ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013ae:	2300      	movs	r3, #0
 80013b0:	61fb      	str	r3, [r7, #28]
 80013b2:	e159      	b.n	8001668 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013b4:	2201      	movs	r2, #1
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	697a      	ldr	r2, [r7, #20]
 80013c4:	4013      	ands	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	f040 8148 	bne.w	8001662 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f003 0303 	and.w	r3, r3, #3
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d005      	beq.n	80013ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d130      	bne.n	800144c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	2203      	movs	r2, #3
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	43db      	mvns	r3, r3
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	4013      	ands	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	68da      	ldr	r2, [r3, #12]
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	4313      	orrs	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001420:	2201      	movs	r2, #1
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	43db      	mvns	r3, r3
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	4013      	ands	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	091b      	lsrs	r3, r3, #4
 8001436:	f003 0201 	and.w	r2, r3, #1
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	4313      	orrs	r3, r2
 8001444:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f003 0303 	and.w	r3, r3, #3
 8001454:	2b03      	cmp	r3, #3
 8001456:	d017      	beq.n	8001488 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	2203      	movs	r2, #3
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	43db      	mvns	r3, r3
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	4013      	ands	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	689a      	ldr	r2, [r3, #8]
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	4313      	orrs	r3, r2
 8001480:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f003 0303 	and.w	r3, r3, #3
 8001490:	2b02      	cmp	r3, #2
 8001492:	d123      	bne.n	80014dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	08da      	lsrs	r2, r3, #3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	3208      	adds	r2, #8
 800149c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	f003 0307 	and.w	r3, r3, #7
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	220f      	movs	r2, #15
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	43db      	mvns	r3, r3
 80014b2:	69ba      	ldr	r2, [r7, #24]
 80014b4:	4013      	ands	r3, r2
 80014b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	691a      	ldr	r2, [r3, #16]
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	f003 0307 	and.w	r3, r3, #7
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	08da      	lsrs	r2, r3, #3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	3208      	adds	r2, #8
 80014d6:	69b9      	ldr	r1, [r7, #24]
 80014d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	2203      	movs	r2, #3
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	43db      	mvns	r3, r3
 80014ee:	69ba      	ldr	r2, [r7, #24]
 80014f0:	4013      	ands	r3, r2
 80014f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f003 0203 	and.w	r2, r3, #3
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	4313      	orrs	r3, r2
 8001508:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001518:	2b00      	cmp	r3, #0
 800151a:	f000 80a2 	beq.w	8001662 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	60fb      	str	r3, [r7, #12]
 8001522:	4b57      	ldr	r3, [pc, #348]	@ (8001680 <HAL_GPIO_Init+0x2e8>)
 8001524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001526:	4a56      	ldr	r2, [pc, #344]	@ (8001680 <HAL_GPIO_Init+0x2e8>)
 8001528:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800152c:	6453      	str	r3, [r2, #68]	@ 0x44
 800152e:	4b54      	ldr	r3, [pc, #336]	@ (8001680 <HAL_GPIO_Init+0x2e8>)
 8001530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001532:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800153a:	4a52      	ldr	r2, [pc, #328]	@ (8001684 <HAL_GPIO_Init+0x2ec>)
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	089b      	lsrs	r3, r3, #2
 8001540:	3302      	adds	r3, #2
 8001542:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001546:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	f003 0303 	and.w	r3, r3, #3
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	220f      	movs	r2, #15
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	43db      	mvns	r3, r3
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	4013      	ands	r3, r2
 800155c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a49      	ldr	r2, [pc, #292]	@ (8001688 <HAL_GPIO_Init+0x2f0>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d019      	beq.n	800159a <HAL_GPIO_Init+0x202>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a48      	ldr	r2, [pc, #288]	@ (800168c <HAL_GPIO_Init+0x2f4>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d013      	beq.n	8001596 <HAL_GPIO_Init+0x1fe>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a47      	ldr	r2, [pc, #284]	@ (8001690 <HAL_GPIO_Init+0x2f8>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d00d      	beq.n	8001592 <HAL_GPIO_Init+0x1fa>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a46      	ldr	r2, [pc, #280]	@ (8001694 <HAL_GPIO_Init+0x2fc>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d007      	beq.n	800158e <HAL_GPIO_Init+0x1f6>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a45      	ldr	r2, [pc, #276]	@ (8001698 <HAL_GPIO_Init+0x300>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d101      	bne.n	800158a <HAL_GPIO_Init+0x1f2>
 8001586:	2304      	movs	r3, #4
 8001588:	e008      	b.n	800159c <HAL_GPIO_Init+0x204>
 800158a:	2307      	movs	r3, #7
 800158c:	e006      	b.n	800159c <HAL_GPIO_Init+0x204>
 800158e:	2303      	movs	r3, #3
 8001590:	e004      	b.n	800159c <HAL_GPIO_Init+0x204>
 8001592:	2302      	movs	r3, #2
 8001594:	e002      	b.n	800159c <HAL_GPIO_Init+0x204>
 8001596:	2301      	movs	r3, #1
 8001598:	e000      	b.n	800159c <HAL_GPIO_Init+0x204>
 800159a:	2300      	movs	r3, #0
 800159c:	69fa      	ldr	r2, [r7, #28]
 800159e:	f002 0203 	and.w	r2, r2, #3
 80015a2:	0092      	lsls	r2, r2, #2
 80015a4:	4093      	lsls	r3, r2
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015ac:	4935      	ldr	r1, [pc, #212]	@ (8001684 <HAL_GPIO_Init+0x2ec>)
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	089b      	lsrs	r3, r3, #2
 80015b2:	3302      	adds	r3, #2
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015ba:	4b38      	ldr	r3, [pc, #224]	@ (800169c <HAL_GPIO_Init+0x304>)
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	43db      	mvns	r3, r3
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	4013      	ands	r3, r2
 80015c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d003      	beq.n	80015de <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80015d6:	69ba      	ldr	r2, [r7, #24]
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	4313      	orrs	r3, r2
 80015dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015de:	4a2f      	ldr	r2, [pc, #188]	@ (800169c <HAL_GPIO_Init+0x304>)
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015e4:	4b2d      	ldr	r3, [pc, #180]	@ (800169c <HAL_GPIO_Init+0x304>)
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	43db      	mvns	r3, r3
 80015ee:	69ba      	ldr	r2, [r7, #24]
 80015f0:	4013      	ands	r3, r2
 80015f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d003      	beq.n	8001608 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	4313      	orrs	r3, r2
 8001606:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001608:	4a24      	ldr	r2, [pc, #144]	@ (800169c <HAL_GPIO_Init+0x304>)
 800160a:	69bb      	ldr	r3, [r7, #24]
 800160c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800160e:	4b23      	ldr	r3, [pc, #140]	@ (800169c <HAL_GPIO_Init+0x304>)
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	43db      	mvns	r3, r3
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	4013      	ands	r3, r2
 800161c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d003      	beq.n	8001632 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	4313      	orrs	r3, r2
 8001630:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001632:	4a1a      	ldr	r2, [pc, #104]	@ (800169c <HAL_GPIO_Init+0x304>)
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001638:	4b18      	ldr	r3, [pc, #96]	@ (800169c <HAL_GPIO_Init+0x304>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	43db      	mvns	r3, r3
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	4013      	ands	r3, r2
 8001646:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001650:	2b00      	cmp	r3, #0
 8001652:	d003      	beq.n	800165c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	4313      	orrs	r3, r2
 800165a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800165c:	4a0f      	ldr	r2, [pc, #60]	@ (800169c <HAL_GPIO_Init+0x304>)
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	3301      	adds	r3, #1
 8001666:	61fb      	str	r3, [r7, #28]
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	2b0f      	cmp	r3, #15
 800166c:	f67f aea2 	bls.w	80013b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001670:	bf00      	nop
 8001672:	bf00      	nop
 8001674:	3724      	adds	r7, #36	@ 0x24
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	40023800 	.word	0x40023800
 8001684:	40013800 	.word	0x40013800
 8001688:	40020000 	.word	0x40020000
 800168c:	40020400 	.word	0x40020400
 8001690:	40020800 	.word	0x40020800
 8001694:	40020c00 	.word	0x40020c00
 8001698:	40021000 	.word	0x40021000
 800169c:	40013c00 	.word	0x40013c00

080016a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	460b      	mov	r3, r1
 80016aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	691a      	ldr	r2, [r3, #16]
 80016b0:	887b      	ldrh	r3, [r7, #2]
 80016b2:	4013      	ands	r3, r2
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d002      	beq.n	80016be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016b8:	2301      	movs	r3, #1
 80016ba:	73fb      	strb	r3, [r7, #15]
 80016bc:	e001      	b.n	80016c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016be:	2300      	movs	r3, #0
 80016c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3714      	adds	r7, #20
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	460b      	mov	r3, r1
 80016da:	807b      	strh	r3, [r7, #2]
 80016dc:	4613      	mov	r3, r2
 80016de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016e0:	787b      	ldrb	r3, [r7, #1]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d003      	beq.n	80016ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016e6:	887a      	ldrh	r2, [r7, #2]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016ec:	e003      	b.n	80016f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016ee:	887b      	ldrh	r3, [r7, #2]
 80016f0:	041a      	lsls	r2, r3, #16
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	619a      	str	r2, [r3, #24]
}
 80016f6:	bf00      	nop
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
	...

08001704 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b086      	sub	sp, #24
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d101      	bne.n	8001716 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e267      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	2b00      	cmp	r3, #0
 8001720:	d075      	beq.n	800180e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001722:	4b88      	ldr	r3, [pc, #544]	@ (8001944 <HAL_RCC_OscConfig+0x240>)
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	f003 030c 	and.w	r3, r3, #12
 800172a:	2b04      	cmp	r3, #4
 800172c:	d00c      	beq.n	8001748 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800172e:	4b85      	ldr	r3, [pc, #532]	@ (8001944 <HAL_RCC_OscConfig+0x240>)
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001736:	2b08      	cmp	r3, #8
 8001738:	d112      	bne.n	8001760 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800173a:	4b82      	ldr	r3, [pc, #520]	@ (8001944 <HAL_RCC_OscConfig+0x240>)
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001742:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001746:	d10b      	bne.n	8001760 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001748:	4b7e      	ldr	r3, [pc, #504]	@ (8001944 <HAL_RCC_OscConfig+0x240>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d05b      	beq.n	800180c <HAL_RCC_OscConfig+0x108>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d157      	bne.n	800180c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e242      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001768:	d106      	bne.n	8001778 <HAL_RCC_OscConfig+0x74>
 800176a:	4b76      	ldr	r3, [pc, #472]	@ (8001944 <HAL_RCC_OscConfig+0x240>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a75      	ldr	r2, [pc, #468]	@ (8001944 <HAL_RCC_OscConfig+0x240>)
 8001770:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001774:	6013      	str	r3, [r2, #0]
 8001776:	e01d      	b.n	80017b4 <HAL_RCC_OscConfig+0xb0>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001780:	d10c      	bne.n	800179c <HAL_RCC_OscConfig+0x98>
 8001782:	4b70      	ldr	r3, [pc, #448]	@ (8001944 <HAL_RCC_OscConfig+0x240>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a6f      	ldr	r2, [pc, #444]	@ (8001944 <HAL_RCC_OscConfig+0x240>)
 8001788:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800178c:	6013      	str	r3, [r2, #0]
 800178e:	4b6d      	ldr	r3, [pc, #436]	@ (8001944 <HAL_RCC_OscConfig+0x240>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a6c      	ldr	r2, [pc, #432]	@ (8001944 <HAL_RCC_OscConfig+0x240>)
 8001794:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001798:	6013      	str	r3, [r2, #0]
 800179a:	e00b      	b.n	80017b4 <HAL_RCC_OscConfig+0xb0>
 800179c:	4b69      	ldr	r3, [pc, #420]	@ (8001944 <HAL_RCC_OscConfig+0x240>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a68      	ldr	r2, [pc, #416]	@ (8001944 <HAL_RCC_OscConfig+0x240>)
 80017a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017a6:	6013      	str	r3, [r2, #0]
 80017a8:	4b66      	ldr	r3, [pc, #408]	@ (8001944 <HAL_RCC_OscConfig+0x240>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a65      	ldr	r2, [pc, #404]	@ (8001944 <HAL_RCC_OscConfig+0x240>)
 80017ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d013      	beq.n	80017e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017bc:	f7ff fcd6 	bl	800116c <HAL_GetTick>
 80017c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017c2:	e008      	b.n	80017d6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017c4:	f7ff fcd2 	bl	800116c <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	2b64      	cmp	r3, #100	@ 0x64
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e207      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017d6:	4b5b      	ldr	r3, [pc, #364]	@ (8001944 <HAL_RCC_OscConfig+0x240>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d0f0      	beq.n	80017c4 <HAL_RCC_OscConfig+0xc0>
 80017e2:	e014      	b.n	800180e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e4:	f7ff fcc2 	bl	800116c <HAL_GetTick>
 80017e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ea:	e008      	b.n	80017fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017ec:	f7ff fcbe 	bl	800116c <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b64      	cmp	r3, #100	@ 0x64
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e1f3      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017fe:	4b51      	ldr	r3, [pc, #324]	@ (8001944 <HAL_RCC_OscConfig+0x240>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d1f0      	bne.n	80017ec <HAL_RCC_OscConfig+0xe8>
 800180a:	e000      	b.n	800180e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800180c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	2b00      	cmp	r3, #0
 8001818:	d063      	beq.n	80018e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800181a:	4b4a      	ldr	r3, [pc, #296]	@ (8001944 <HAL_RCC_OscConfig+0x240>)
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f003 030c 	and.w	r3, r3, #12
 8001822:	2b00      	cmp	r3, #0
 8001824:	d00b      	beq.n	800183e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001826:	4b47      	ldr	r3, [pc, #284]	@ (8001944 <HAL_RCC_OscConfig+0x240>)
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800182e:	2b08      	cmp	r3, #8
 8001830:	d11c      	bne.n	800186c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001832:	4b44      	ldr	r3, [pc, #272]	@ (8001944 <HAL_RCC_OscConfig+0x240>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d116      	bne.n	800186c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800183e:	4b41      	ldr	r3, [pc, #260]	@ (8001944 <HAL_RCC_OscConfig+0x240>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	2b00      	cmp	r3, #0
 8001848:	d005      	beq.n	8001856 <HAL_RCC_OscConfig+0x152>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	68db      	ldr	r3, [r3, #12]
 800184e:	2b01      	cmp	r3, #1
 8001850:	d001      	beq.n	8001856 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e1c7      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001856:	4b3b      	ldr	r3, [pc, #236]	@ (8001944 <HAL_RCC_OscConfig+0x240>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	691b      	ldr	r3, [r3, #16]
 8001862:	00db      	lsls	r3, r3, #3
 8001864:	4937      	ldr	r1, [pc, #220]	@ (8001944 <HAL_RCC_OscConfig+0x240>)
 8001866:	4313      	orrs	r3, r2
 8001868:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800186a:	e03a      	b.n	80018e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d020      	beq.n	80018b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001874:	4b34      	ldr	r3, [pc, #208]	@ (8001948 <HAL_RCC_OscConfig+0x244>)
 8001876:	2201      	movs	r2, #1
 8001878:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800187a:	f7ff fc77 	bl	800116c <HAL_GetTick>
 800187e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001880:	e008      	b.n	8001894 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001882:	f7ff fc73 	bl	800116c <HAL_GetTick>
 8001886:	4602      	mov	r2, r0
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	2b02      	cmp	r3, #2
 800188e:	d901      	bls.n	8001894 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	e1a8      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001894:	4b2b      	ldr	r3, [pc, #172]	@ (8001944 <HAL_RCC_OscConfig+0x240>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0302 	and.w	r3, r3, #2
 800189c:	2b00      	cmp	r3, #0
 800189e:	d0f0      	beq.n	8001882 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018a0:	4b28      	ldr	r3, [pc, #160]	@ (8001944 <HAL_RCC_OscConfig+0x240>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	691b      	ldr	r3, [r3, #16]
 80018ac:	00db      	lsls	r3, r3, #3
 80018ae:	4925      	ldr	r1, [pc, #148]	@ (8001944 <HAL_RCC_OscConfig+0x240>)
 80018b0:	4313      	orrs	r3, r2
 80018b2:	600b      	str	r3, [r1, #0]
 80018b4:	e015      	b.n	80018e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018b6:	4b24      	ldr	r3, [pc, #144]	@ (8001948 <HAL_RCC_OscConfig+0x244>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018bc:	f7ff fc56 	bl	800116c <HAL_GetTick>
 80018c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018c2:	e008      	b.n	80018d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018c4:	f7ff fc52 	bl	800116c <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e187      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018d6:	4b1b      	ldr	r3, [pc, #108]	@ (8001944 <HAL_RCC_OscConfig+0x240>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d1f0      	bne.n	80018c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0308 	and.w	r3, r3, #8
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d036      	beq.n	800195c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	695b      	ldr	r3, [r3, #20]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d016      	beq.n	8001924 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018f6:	4b15      	ldr	r3, [pc, #84]	@ (800194c <HAL_RCC_OscConfig+0x248>)
 80018f8:	2201      	movs	r2, #1
 80018fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018fc:	f7ff fc36 	bl	800116c <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001904:	f7ff fc32 	bl	800116c <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b02      	cmp	r3, #2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e167      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001916:	4b0b      	ldr	r3, [pc, #44]	@ (8001944 <HAL_RCC_OscConfig+0x240>)
 8001918:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	2b00      	cmp	r3, #0
 8001920:	d0f0      	beq.n	8001904 <HAL_RCC_OscConfig+0x200>
 8001922:	e01b      	b.n	800195c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001924:	4b09      	ldr	r3, [pc, #36]	@ (800194c <HAL_RCC_OscConfig+0x248>)
 8001926:	2200      	movs	r2, #0
 8001928:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800192a:	f7ff fc1f 	bl	800116c <HAL_GetTick>
 800192e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001930:	e00e      	b.n	8001950 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001932:	f7ff fc1b 	bl	800116c <HAL_GetTick>
 8001936:	4602      	mov	r2, r0
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	2b02      	cmp	r3, #2
 800193e:	d907      	bls.n	8001950 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001940:	2303      	movs	r3, #3
 8001942:	e150      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
 8001944:	40023800 	.word	0x40023800
 8001948:	42470000 	.word	0x42470000
 800194c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001950:	4b88      	ldr	r3, [pc, #544]	@ (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001952:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001954:	f003 0302 	and.w	r3, r3, #2
 8001958:	2b00      	cmp	r3, #0
 800195a:	d1ea      	bne.n	8001932 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0304 	and.w	r3, r3, #4
 8001964:	2b00      	cmp	r3, #0
 8001966:	f000 8097 	beq.w	8001a98 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800196a:	2300      	movs	r3, #0
 800196c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800196e:	4b81      	ldr	r3, [pc, #516]	@ (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001972:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d10f      	bne.n	800199a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	60bb      	str	r3, [r7, #8]
 800197e:	4b7d      	ldr	r3, [pc, #500]	@ (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001982:	4a7c      	ldr	r2, [pc, #496]	@ (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001984:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001988:	6413      	str	r3, [r2, #64]	@ 0x40
 800198a:	4b7a      	ldr	r3, [pc, #488]	@ (8001b74 <HAL_RCC_OscConfig+0x470>)
 800198c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800198e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001992:	60bb      	str	r3, [r7, #8]
 8001994:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001996:	2301      	movs	r3, #1
 8001998:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800199a:	4b77      	ldr	r3, [pc, #476]	@ (8001b78 <HAL_RCC_OscConfig+0x474>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d118      	bne.n	80019d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019a6:	4b74      	ldr	r3, [pc, #464]	@ (8001b78 <HAL_RCC_OscConfig+0x474>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a73      	ldr	r2, [pc, #460]	@ (8001b78 <HAL_RCC_OscConfig+0x474>)
 80019ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019b2:	f7ff fbdb 	bl	800116c <HAL_GetTick>
 80019b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019b8:	e008      	b.n	80019cc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019ba:	f7ff fbd7 	bl	800116c <HAL_GetTick>
 80019be:	4602      	mov	r2, r0
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d901      	bls.n	80019cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80019c8:	2303      	movs	r3, #3
 80019ca:	e10c      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019cc:	4b6a      	ldr	r3, [pc, #424]	@ (8001b78 <HAL_RCC_OscConfig+0x474>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d0f0      	beq.n	80019ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d106      	bne.n	80019ee <HAL_RCC_OscConfig+0x2ea>
 80019e0:	4b64      	ldr	r3, [pc, #400]	@ (8001b74 <HAL_RCC_OscConfig+0x470>)
 80019e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019e4:	4a63      	ldr	r2, [pc, #396]	@ (8001b74 <HAL_RCC_OscConfig+0x470>)
 80019e6:	f043 0301 	orr.w	r3, r3, #1
 80019ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80019ec:	e01c      	b.n	8001a28 <HAL_RCC_OscConfig+0x324>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	2b05      	cmp	r3, #5
 80019f4:	d10c      	bne.n	8001a10 <HAL_RCC_OscConfig+0x30c>
 80019f6:	4b5f      	ldr	r3, [pc, #380]	@ (8001b74 <HAL_RCC_OscConfig+0x470>)
 80019f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019fa:	4a5e      	ldr	r2, [pc, #376]	@ (8001b74 <HAL_RCC_OscConfig+0x470>)
 80019fc:	f043 0304 	orr.w	r3, r3, #4
 8001a00:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a02:	4b5c      	ldr	r3, [pc, #368]	@ (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001a04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a06:	4a5b      	ldr	r2, [pc, #364]	@ (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001a08:	f043 0301 	orr.w	r3, r3, #1
 8001a0c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a0e:	e00b      	b.n	8001a28 <HAL_RCC_OscConfig+0x324>
 8001a10:	4b58      	ldr	r3, [pc, #352]	@ (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001a12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a14:	4a57      	ldr	r2, [pc, #348]	@ (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001a16:	f023 0301 	bic.w	r3, r3, #1
 8001a1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a1c:	4b55      	ldr	r3, [pc, #340]	@ (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001a1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a20:	4a54      	ldr	r2, [pc, #336]	@ (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001a22:	f023 0304 	bic.w	r3, r3, #4
 8001a26:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d015      	beq.n	8001a5c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a30:	f7ff fb9c 	bl	800116c <HAL_GetTick>
 8001a34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a36:	e00a      	b.n	8001a4e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a38:	f7ff fb98 	bl	800116c <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e0cb      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a4e:	4b49      	ldr	r3, [pc, #292]	@ (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001a50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d0ee      	beq.n	8001a38 <HAL_RCC_OscConfig+0x334>
 8001a5a:	e014      	b.n	8001a86 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a5c:	f7ff fb86 	bl	800116c <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a62:	e00a      	b.n	8001a7a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a64:	f7ff fb82 	bl	800116c <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e0b5      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a7a:	4b3e      	ldr	r3, [pc, #248]	@ (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001a7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d1ee      	bne.n	8001a64 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a86:	7dfb      	ldrb	r3, [r7, #23]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d105      	bne.n	8001a98 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a8c:	4b39      	ldr	r3, [pc, #228]	@ (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a90:	4a38      	ldr	r2, [pc, #224]	@ (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001a92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a96:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	699b      	ldr	r3, [r3, #24]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	f000 80a1 	beq.w	8001be4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001aa2:	4b34      	ldr	r3, [pc, #208]	@ (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f003 030c 	and.w	r3, r3, #12
 8001aaa:	2b08      	cmp	r3, #8
 8001aac:	d05c      	beq.n	8001b68 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	699b      	ldr	r3, [r3, #24]
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d141      	bne.n	8001b3a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ab6:	4b31      	ldr	r3, [pc, #196]	@ (8001b7c <HAL_RCC_OscConfig+0x478>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001abc:	f7ff fb56 	bl	800116c <HAL_GetTick>
 8001ac0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ac2:	e008      	b.n	8001ad6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ac4:	f7ff fb52 	bl	800116c <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e087      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ad6:	4b27      	ldr	r3, [pc, #156]	@ (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d1f0      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	69da      	ldr	r2, [r3, #28]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6a1b      	ldr	r3, [r3, #32]
 8001aea:	431a      	orrs	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001af0:	019b      	lsls	r3, r3, #6
 8001af2:	431a      	orrs	r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001af8:	085b      	lsrs	r3, r3, #1
 8001afa:	3b01      	subs	r3, #1
 8001afc:	041b      	lsls	r3, r3, #16
 8001afe:	431a      	orrs	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b04:	061b      	lsls	r3, r3, #24
 8001b06:	491b      	ldr	r1, [pc, #108]	@ (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b0c:	4b1b      	ldr	r3, [pc, #108]	@ (8001b7c <HAL_RCC_OscConfig+0x478>)
 8001b0e:	2201      	movs	r2, #1
 8001b10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b12:	f7ff fb2b 	bl	800116c <HAL_GetTick>
 8001b16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b18:	e008      	b.n	8001b2c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b1a:	f7ff fb27 	bl	800116c <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d901      	bls.n	8001b2c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e05c      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b2c:	4b11      	ldr	r3, [pc, #68]	@ (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d0f0      	beq.n	8001b1a <HAL_RCC_OscConfig+0x416>
 8001b38:	e054      	b.n	8001be4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b3a:	4b10      	ldr	r3, [pc, #64]	@ (8001b7c <HAL_RCC_OscConfig+0x478>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b40:	f7ff fb14 	bl	800116c <HAL_GetTick>
 8001b44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b46:	e008      	b.n	8001b5a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b48:	f7ff fb10 	bl	800116c <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e045      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b5a:	4b06      	ldr	r3, [pc, #24]	@ (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d1f0      	bne.n	8001b48 <HAL_RCC_OscConfig+0x444>
 8001b66:	e03d      	b.n	8001be4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d107      	bne.n	8001b80 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e038      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
 8001b74:	40023800 	.word	0x40023800
 8001b78:	40007000 	.word	0x40007000
 8001b7c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b80:	4b1b      	ldr	r3, [pc, #108]	@ (8001bf0 <HAL_RCC_OscConfig+0x4ec>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	699b      	ldr	r3, [r3, #24]
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d028      	beq.n	8001be0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d121      	bne.n	8001be0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d11a      	bne.n	8001be0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001baa:	68fa      	ldr	r2, [r7, #12]
 8001bac:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001bb6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d111      	bne.n	8001be0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bc6:	085b      	lsrs	r3, r3, #1
 8001bc8:	3b01      	subs	r3, #1
 8001bca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d107      	bne.n	8001be0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bda:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d001      	beq.n	8001be4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e000      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3718      	adds	r7, #24
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	40023800 	.word	0x40023800

08001bf4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d101      	bne.n	8001c08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e0cc      	b.n	8001da2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c08:	4b68      	ldr	r3, [pc, #416]	@ (8001dac <HAL_RCC_ClockConfig+0x1b8>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0307 	and.w	r3, r3, #7
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d90c      	bls.n	8001c30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c16:	4b65      	ldr	r3, [pc, #404]	@ (8001dac <HAL_RCC_ClockConfig+0x1b8>)
 8001c18:	683a      	ldr	r2, [r7, #0]
 8001c1a:	b2d2      	uxtb	r2, r2
 8001c1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c1e:	4b63      	ldr	r3, [pc, #396]	@ (8001dac <HAL_RCC_ClockConfig+0x1b8>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0307 	and.w	r3, r3, #7
 8001c26:	683a      	ldr	r2, [r7, #0]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d001      	beq.n	8001c30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e0b8      	b.n	8001da2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0302 	and.w	r3, r3, #2
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d020      	beq.n	8001c7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0304 	and.w	r3, r3, #4
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d005      	beq.n	8001c54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c48:	4b59      	ldr	r3, [pc, #356]	@ (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	4a58      	ldr	r2, [pc, #352]	@ (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c4e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001c52:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0308 	and.w	r3, r3, #8
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d005      	beq.n	8001c6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c60:	4b53      	ldr	r3, [pc, #332]	@ (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	4a52      	ldr	r2, [pc, #328]	@ (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c66:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001c6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c6c:	4b50      	ldr	r3, [pc, #320]	@ (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	494d      	ldr	r1, [pc, #308]	@ (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0301 	and.w	r3, r3, #1
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d044      	beq.n	8001d14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d107      	bne.n	8001ca2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c92:	4b47      	ldr	r3, [pc, #284]	@ (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d119      	bne.n	8001cd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e07f      	b.n	8001da2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d003      	beq.n	8001cb2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cae:	2b03      	cmp	r3, #3
 8001cb0:	d107      	bne.n	8001cc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cb2:	4b3f      	ldr	r3, [pc, #252]	@ (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d109      	bne.n	8001cd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e06f      	b.n	8001da2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cc2:	4b3b      	ldr	r3, [pc, #236]	@ (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d101      	bne.n	8001cd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e067      	b.n	8001da2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cd2:	4b37      	ldr	r3, [pc, #220]	@ (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	f023 0203 	bic.w	r2, r3, #3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	4934      	ldr	r1, [pc, #208]	@ (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ce4:	f7ff fa42 	bl	800116c <HAL_GetTick>
 8001ce8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cea:	e00a      	b.n	8001d02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cec:	f7ff fa3e 	bl	800116c <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e04f      	b.n	8001da2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d02:	4b2b      	ldr	r3, [pc, #172]	@ (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f003 020c 	and.w	r2, r3, #12
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d1eb      	bne.n	8001cec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d14:	4b25      	ldr	r3, [pc, #148]	@ (8001dac <HAL_RCC_ClockConfig+0x1b8>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0307 	and.w	r3, r3, #7
 8001d1c:	683a      	ldr	r2, [r7, #0]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d20c      	bcs.n	8001d3c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d22:	4b22      	ldr	r3, [pc, #136]	@ (8001dac <HAL_RCC_ClockConfig+0x1b8>)
 8001d24:	683a      	ldr	r2, [r7, #0]
 8001d26:	b2d2      	uxtb	r2, r2
 8001d28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d2a:	4b20      	ldr	r3, [pc, #128]	@ (8001dac <HAL_RCC_ClockConfig+0x1b8>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0307 	and.w	r3, r3, #7
 8001d32:	683a      	ldr	r2, [r7, #0]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d001      	beq.n	8001d3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e032      	b.n	8001da2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0304 	and.w	r3, r3, #4
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d008      	beq.n	8001d5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d48:	4b19      	ldr	r3, [pc, #100]	@ (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	4916      	ldr	r1, [pc, #88]	@ (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d56:	4313      	orrs	r3, r2
 8001d58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0308 	and.w	r3, r3, #8
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d009      	beq.n	8001d7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d66:	4b12      	ldr	r3, [pc, #72]	@ (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	00db      	lsls	r3, r3, #3
 8001d74:	490e      	ldr	r1, [pc, #56]	@ (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d76:	4313      	orrs	r3, r2
 8001d78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d7a:	f000 f821 	bl	8001dc0 <HAL_RCC_GetSysClockFreq>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	4b0b      	ldr	r3, [pc, #44]	@ (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	091b      	lsrs	r3, r3, #4
 8001d86:	f003 030f 	and.w	r3, r3, #15
 8001d8a:	490a      	ldr	r1, [pc, #40]	@ (8001db4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d8c:	5ccb      	ldrb	r3, [r1, r3]
 8001d8e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d92:	4a09      	ldr	r2, [pc, #36]	@ (8001db8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001d96:	4b09      	ldr	r3, [pc, #36]	@ (8001dbc <HAL_RCC_ClockConfig+0x1c8>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7ff f9a2 	bl	80010e4 <HAL_InitTick>

  return HAL_OK;
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3710      	adds	r7, #16
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	40023c00 	.word	0x40023c00
 8001db0:	40023800 	.word	0x40023800
 8001db4:	08003f38 	.word	0x08003f38
 8001db8:	20000004 	.word	0x20000004
 8001dbc:	20000008 	.word	0x20000008

08001dc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001dc4:	b094      	sub	sp, #80	@ 0x50
 8001dc6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001dd8:	4b79      	ldr	r3, [pc, #484]	@ (8001fc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f003 030c 	and.w	r3, r3, #12
 8001de0:	2b08      	cmp	r3, #8
 8001de2:	d00d      	beq.n	8001e00 <HAL_RCC_GetSysClockFreq+0x40>
 8001de4:	2b08      	cmp	r3, #8
 8001de6:	f200 80e1 	bhi.w	8001fac <HAL_RCC_GetSysClockFreq+0x1ec>
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d002      	beq.n	8001df4 <HAL_RCC_GetSysClockFreq+0x34>
 8001dee:	2b04      	cmp	r3, #4
 8001df0:	d003      	beq.n	8001dfa <HAL_RCC_GetSysClockFreq+0x3a>
 8001df2:	e0db      	b.n	8001fac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001df4:	4b73      	ldr	r3, [pc, #460]	@ (8001fc4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001df6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001df8:	e0db      	b.n	8001fb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001dfa:	4b73      	ldr	r3, [pc, #460]	@ (8001fc8 <HAL_RCC_GetSysClockFreq+0x208>)
 8001dfc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001dfe:	e0d8      	b.n	8001fb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e00:	4b6f      	ldr	r3, [pc, #444]	@ (8001fc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001e08:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e0a:	4b6d      	ldr	r3, [pc, #436]	@ (8001fc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d063      	beq.n	8001ede <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e16:	4b6a      	ldr	r3, [pc, #424]	@ (8001fc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	099b      	lsrs	r3, r3, #6
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001e20:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001e22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e28:	633b      	str	r3, [r7, #48]	@ 0x30
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e2e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001e32:	4622      	mov	r2, r4
 8001e34:	462b      	mov	r3, r5
 8001e36:	f04f 0000 	mov.w	r0, #0
 8001e3a:	f04f 0100 	mov.w	r1, #0
 8001e3e:	0159      	lsls	r1, r3, #5
 8001e40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e44:	0150      	lsls	r0, r2, #5
 8001e46:	4602      	mov	r2, r0
 8001e48:	460b      	mov	r3, r1
 8001e4a:	4621      	mov	r1, r4
 8001e4c:	1a51      	subs	r1, r2, r1
 8001e4e:	6139      	str	r1, [r7, #16]
 8001e50:	4629      	mov	r1, r5
 8001e52:	eb63 0301 	sbc.w	r3, r3, r1
 8001e56:	617b      	str	r3, [r7, #20]
 8001e58:	f04f 0200 	mov.w	r2, #0
 8001e5c:	f04f 0300 	mov.w	r3, #0
 8001e60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001e64:	4659      	mov	r1, fp
 8001e66:	018b      	lsls	r3, r1, #6
 8001e68:	4651      	mov	r1, sl
 8001e6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e6e:	4651      	mov	r1, sl
 8001e70:	018a      	lsls	r2, r1, #6
 8001e72:	4651      	mov	r1, sl
 8001e74:	ebb2 0801 	subs.w	r8, r2, r1
 8001e78:	4659      	mov	r1, fp
 8001e7a:	eb63 0901 	sbc.w	r9, r3, r1
 8001e7e:	f04f 0200 	mov.w	r2, #0
 8001e82:	f04f 0300 	mov.w	r3, #0
 8001e86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e92:	4690      	mov	r8, r2
 8001e94:	4699      	mov	r9, r3
 8001e96:	4623      	mov	r3, r4
 8001e98:	eb18 0303 	adds.w	r3, r8, r3
 8001e9c:	60bb      	str	r3, [r7, #8]
 8001e9e:	462b      	mov	r3, r5
 8001ea0:	eb49 0303 	adc.w	r3, r9, r3
 8001ea4:	60fb      	str	r3, [r7, #12]
 8001ea6:	f04f 0200 	mov.w	r2, #0
 8001eaa:	f04f 0300 	mov.w	r3, #0
 8001eae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001eb2:	4629      	mov	r1, r5
 8001eb4:	024b      	lsls	r3, r1, #9
 8001eb6:	4621      	mov	r1, r4
 8001eb8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ebc:	4621      	mov	r1, r4
 8001ebe:	024a      	lsls	r2, r1, #9
 8001ec0:	4610      	mov	r0, r2
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001eca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001ecc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001ed0:	f7fe f9d6 	bl	8000280 <__aeabi_uldivmod>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	4613      	mov	r3, r2
 8001eda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001edc:	e058      	b.n	8001f90 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ede:	4b38      	ldr	r3, [pc, #224]	@ (8001fc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	099b      	lsrs	r3, r3, #6
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	4611      	mov	r1, r2
 8001eea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001eee:	623b      	str	r3, [r7, #32]
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ef4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001ef8:	4642      	mov	r2, r8
 8001efa:	464b      	mov	r3, r9
 8001efc:	f04f 0000 	mov.w	r0, #0
 8001f00:	f04f 0100 	mov.w	r1, #0
 8001f04:	0159      	lsls	r1, r3, #5
 8001f06:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f0a:	0150      	lsls	r0, r2, #5
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	460b      	mov	r3, r1
 8001f10:	4641      	mov	r1, r8
 8001f12:	ebb2 0a01 	subs.w	sl, r2, r1
 8001f16:	4649      	mov	r1, r9
 8001f18:	eb63 0b01 	sbc.w	fp, r3, r1
 8001f1c:	f04f 0200 	mov.w	r2, #0
 8001f20:	f04f 0300 	mov.w	r3, #0
 8001f24:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001f28:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001f2c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001f30:	ebb2 040a 	subs.w	r4, r2, sl
 8001f34:	eb63 050b 	sbc.w	r5, r3, fp
 8001f38:	f04f 0200 	mov.w	r2, #0
 8001f3c:	f04f 0300 	mov.w	r3, #0
 8001f40:	00eb      	lsls	r3, r5, #3
 8001f42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f46:	00e2      	lsls	r2, r4, #3
 8001f48:	4614      	mov	r4, r2
 8001f4a:	461d      	mov	r5, r3
 8001f4c:	4643      	mov	r3, r8
 8001f4e:	18e3      	adds	r3, r4, r3
 8001f50:	603b      	str	r3, [r7, #0]
 8001f52:	464b      	mov	r3, r9
 8001f54:	eb45 0303 	adc.w	r3, r5, r3
 8001f58:	607b      	str	r3, [r7, #4]
 8001f5a:	f04f 0200 	mov.w	r2, #0
 8001f5e:	f04f 0300 	mov.w	r3, #0
 8001f62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f66:	4629      	mov	r1, r5
 8001f68:	028b      	lsls	r3, r1, #10
 8001f6a:	4621      	mov	r1, r4
 8001f6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f70:	4621      	mov	r1, r4
 8001f72:	028a      	lsls	r2, r1, #10
 8001f74:	4610      	mov	r0, r2
 8001f76:	4619      	mov	r1, r3
 8001f78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	61bb      	str	r3, [r7, #24]
 8001f7e:	61fa      	str	r2, [r7, #28]
 8001f80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f84:	f7fe f97c 	bl	8000280 <__aeabi_uldivmod>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001f90:	4b0b      	ldr	r3, [pc, #44]	@ (8001fc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	0c1b      	lsrs	r3, r3, #16
 8001f96:	f003 0303 	and.w	r3, r3, #3
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001fa0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001fa2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fa8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001faa:	e002      	b.n	8001fb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001fac:	4b05      	ldr	r3, [pc, #20]	@ (8001fc4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001fae:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001fb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fb2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3750      	adds	r7, #80	@ 0x50
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001fbe:	bf00      	nop
 8001fc0:	40023800 	.word	0x40023800
 8001fc4:	00f42400 	.word	0x00f42400
 8001fc8:	007a1200 	.word	0x007a1200

08001fcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fd0:	4b03      	ldr	r3, [pc, #12]	@ (8001fe0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	20000004 	.word	0x20000004

08001fe4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001fe8:	f7ff fff0 	bl	8001fcc <HAL_RCC_GetHCLKFreq>
 8001fec:	4602      	mov	r2, r0
 8001fee:	4b05      	ldr	r3, [pc, #20]	@ (8002004 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	0a9b      	lsrs	r3, r3, #10
 8001ff4:	f003 0307 	and.w	r3, r3, #7
 8001ff8:	4903      	ldr	r1, [pc, #12]	@ (8002008 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ffa:	5ccb      	ldrb	r3, [r1, r3]
 8001ffc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002000:	4618      	mov	r0, r3
 8002002:	bd80      	pop	{r7, pc}
 8002004:	40023800 	.word	0x40023800
 8002008:	08003f48 	.word	0x08003f48

0800200c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002010:	f7ff ffdc 	bl	8001fcc <HAL_RCC_GetHCLKFreq>
 8002014:	4602      	mov	r2, r0
 8002016:	4b05      	ldr	r3, [pc, #20]	@ (800202c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	0b5b      	lsrs	r3, r3, #13
 800201c:	f003 0307 	and.w	r3, r3, #7
 8002020:	4903      	ldr	r1, [pc, #12]	@ (8002030 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002022:	5ccb      	ldrb	r3, [r1, r3]
 8002024:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002028:	4618      	mov	r0, r3
 800202a:	bd80      	pop	{r7, pc}
 800202c:	40023800 	.word	0x40023800
 8002030:	08003f48 	.word	0x08003f48

08002034 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d101      	bne.n	8002046 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e041      	b.n	80020ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800204c:	b2db      	uxtb	r3, r3
 800204e:	2b00      	cmp	r3, #0
 8002050:	d106      	bne.n	8002060 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f7fe fea8 	bl	8000db0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2202      	movs	r2, #2
 8002064:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	3304      	adds	r3, #4
 8002070:	4619      	mov	r1, r3
 8002072:	4610      	mov	r0, r2
 8002074:	f000 f950 	bl	8002318 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2201      	movs	r2, #1
 800207c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2201      	movs	r2, #1
 8002084:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2201      	movs	r2, #1
 800209c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2201      	movs	r2, #1
 80020a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2201      	movs	r2, #1
 80020ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2201      	movs	r2, #1
 80020b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2201      	movs	r2, #1
 80020c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3708      	adds	r7, #8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
	...

080020d4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b085      	sub	sp, #20
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d001      	beq.n	80020ec <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e03c      	b.n	8002166 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2202      	movs	r2, #2
 80020f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a1e      	ldr	r2, [pc, #120]	@ (8002174 <HAL_TIM_Base_Start+0xa0>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d018      	beq.n	8002130 <HAL_TIM_Base_Start+0x5c>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002106:	d013      	beq.n	8002130 <HAL_TIM_Base_Start+0x5c>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a1a      	ldr	r2, [pc, #104]	@ (8002178 <HAL_TIM_Base_Start+0xa4>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d00e      	beq.n	8002130 <HAL_TIM_Base_Start+0x5c>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a19      	ldr	r2, [pc, #100]	@ (800217c <HAL_TIM_Base_Start+0xa8>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d009      	beq.n	8002130 <HAL_TIM_Base_Start+0x5c>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a17      	ldr	r2, [pc, #92]	@ (8002180 <HAL_TIM_Base_Start+0xac>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d004      	beq.n	8002130 <HAL_TIM_Base_Start+0x5c>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a16      	ldr	r2, [pc, #88]	@ (8002184 <HAL_TIM_Base_Start+0xb0>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d111      	bne.n	8002154 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f003 0307 	and.w	r3, r3, #7
 800213a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2b06      	cmp	r3, #6
 8002140:	d010      	beq.n	8002164 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f042 0201 	orr.w	r2, r2, #1
 8002150:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002152:	e007      	b.n	8002164 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f042 0201 	orr.w	r2, r2, #1
 8002162:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3714      	adds	r7, #20
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	40010000 	.word	0x40010000
 8002178:	40000400 	.word	0x40000400
 800217c:	40000800 	.word	0x40000800
 8002180:	40000c00 	.word	0x40000c00
 8002184:	40014000 	.word	0x40014000

08002188 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002192:	2300      	movs	r3, #0
 8002194:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800219c:	2b01      	cmp	r3, #1
 800219e:	d101      	bne.n	80021a4 <HAL_TIM_ConfigClockSource+0x1c>
 80021a0:	2302      	movs	r3, #2
 80021a2:	e0b4      	b.n	800230e <HAL_TIM_ConfigClockSource+0x186>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2202      	movs	r2, #2
 80021b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80021c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80021ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	68ba      	ldr	r2, [r7, #8]
 80021d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80021dc:	d03e      	beq.n	800225c <HAL_TIM_ConfigClockSource+0xd4>
 80021de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80021e2:	f200 8087 	bhi.w	80022f4 <HAL_TIM_ConfigClockSource+0x16c>
 80021e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80021ea:	f000 8086 	beq.w	80022fa <HAL_TIM_ConfigClockSource+0x172>
 80021ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80021f2:	d87f      	bhi.n	80022f4 <HAL_TIM_ConfigClockSource+0x16c>
 80021f4:	2b70      	cmp	r3, #112	@ 0x70
 80021f6:	d01a      	beq.n	800222e <HAL_TIM_ConfigClockSource+0xa6>
 80021f8:	2b70      	cmp	r3, #112	@ 0x70
 80021fa:	d87b      	bhi.n	80022f4 <HAL_TIM_ConfigClockSource+0x16c>
 80021fc:	2b60      	cmp	r3, #96	@ 0x60
 80021fe:	d050      	beq.n	80022a2 <HAL_TIM_ConfigClockSource+0x11a>
 8002200:	2b60      	cmp	r3, #96	@ 0x60
 8002202:	d877      	bhi.n	80022f4 <HAL_TIM_ConfigClockSource+0x16c>
 8002204:	2b50      	cmp	r3, #80	@ 0x50
 8002206:	d03c      	beq.n	8002282 <HAL_TIM_ConfigClockSource+0xfa>
 8002208:	2b50      	cmp	r3, #80	@ 0x50
 800220a:	d873      	bhi.n	80022f4 <HAL_TIM_ConfigClockSource+0x16c>
 800220c:	2b40      	cmp	r3, #64	@ 0x40
 800220e:	d058      	beq.n	80022c2 <HAL_TIM_ConfigClockSource+0x13a>
 8002210:	2b40      	cmp	r3, #64	@ 0x40
 8002212:	d86f      	bhi.n	80022f4 <HAL_TIM_ConfigClockSource+0x16c>
 8002214:	2b30      	cmp	r3, #48	@ 0x30
 8002216:	d064      	beq.n	80022e2 <HAL_TIM_ConfigClockSource+0x15a>
 8002218:	2b30      	cmp	r3, #48	@ 0x30
 800221a:	d86b      	bhi.n	80022f4 <HAL_TIM_ConfigClockSource+0x16c>
 800221c:	2b20      	cmp	r3, #32
 800221e:	d060      	beq.n	80022e2 <HAL_TIM_ConfigClockSource+0x15a>
 8002220:	2b20      	cmp	r3, #32
 8002222:	d867      	bhi.n	80022f4 <HAL_TIM_ConfigClockSource+0x16c>
 8002224:	2b00      	cmp	r3, #0
 8002226:	d05c      	beq.n	80022e2 <HAL_TIM_ConfigClockSource+0x15a>
 8002228:	2b10      	cmp	r3, #16
 800222a:	d05a      	beq.n	80022e2 <HAL_TIM_ConfigClockSource+0x15a>
 800222c:	e062      	b.n	80022f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800223e:	f000 f96b 	bl	8002518 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002250:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	68ba      	ldr	r2, [r7, #8]
 8002258:	609a      	str	r2, [r3, #8]
      break;
 800225a:	e04f      	b.n	80022fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800226c:	f000 f954 	bl	8002518 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	689a      	ldr	r2, [r3, #8]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800227e:	609a      	str	r2, [r3, #8]
      break;
 8002280:	e03c      	b.n	80022fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800228e:	461a      	mov	r2, r3
 8002290:	f000 f8c8 	bl	8002424 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2150      	movs	r1, #80	@ 0x50
 800229a:	4618      	mov	r0, r3
 800229c:	f000 f921 	bl	80024e2 <TIM_ITRx_SetConfig>
      break;
 80022a0:	e02c      	b.n	80022fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80022ae:	461a      	mov	r2, r3
 80022b0:	f000 f8e7 	bl	8002482 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2160      	movs	r1, #96	@ 0x60
 80022ba:	4618      	mov	r0, r3
 80022bc:	f000 f911 	bl	80024e2 <TIM_ITRx_SetConfig>
      break;
 80022c0:	e01c      	b.n	80022fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80022ce:	461a      	mov	r2, r3
 80022d0:	f000 f8a8 	bl	8002424 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2140      	movs	r1, #64	@ 0x40
 80022da:	4618      	mov	r0, r3
 80022dc:	f000 f901 	bl	80024e2 <TIM_ITRx_SetConfig>
      break;
 80022e0:	e00c      	b.n	80022fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4619      	mov	r1, r3
 80022ec:	4610      	mov	r0, r2
 80022ee:	f000 f8f8 	bl	80024e2 <TIM_ITRx_SetConfig>
      break;
 80022f2:	e003      	b.n	80022fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	73fb      	strb	r3, [r7, #15]
      break;
 80022f8:	e000      	b.n	80022fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80022fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800230c:	7bfb      	ldrb	r3, [r7, #15]
}
 800230e:	4618      	mov	r0, r3
 8002310:	3710      	adds	r7, #16
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
	...

08002318 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002318:	b480      	push	{r7}
 800231a:	b085      	sub	sp, #20
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	4a37      	ldr	r2, [pc, #220]	@ (8002408 <TIM_Base_SetConfig+0xf0>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d00f      	beq.n	8002350 <TIM_Base_SetConfig+0x38>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002336:	d00b      	beq.n	8002350 <TIM_Base_SetConfig+0x38>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4a34      	ldr	r2, [pc, #208]	@ (800240c <TIM_Base_SetConfig+0xf4>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d007      	beq.n	8002350 <TIM_Base_SetConfig+0x38>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4a33      	ldr	r2, [pc, #204]	@ (8002410 <TIM_Base_SetConfig+0xf8>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d003      	beq.n	8002350 <TIM_Base_SetConfig+0x38>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4a32      	ldr	r2, [pc, #200]	@ (8002414 <TIM_Base_SetConfig+0xfc>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d108      	bne.n	8002362 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002356:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	68fa      	ldr	r2, [r7, #12]
 800235e:	4313      	orrs	r3, r2
 8002360:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a28      	ldr	r2, [pc, #160]	@ (8002408 <TIM_Base_SetConfig+0xf0>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d01b      	beq.n	80023a2 <TIM_Base_SetConfig+0x8a>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002370:	d017      	beq.n	80023a2 <TIM_Base_SetConfig+0x8a>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a25      	ldr	r2, [pc, #148]	@ (800240c <TIM_Base_SetConfig+0xf4>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d013      	beq.n	80023a2 <TIM_Base_SetConfig+0x8a>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a24      	ldr	r2, [pc, #144]	@ (8002410 <TIM_Base_SetConfig+0xf8>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d00f      	beq.n	80023a2 <TIM_Base_SetConfig+0x8a>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a23      	ldr	r2, [pc, #140]	@ (8002414 <TIM_Base_SetConfig+0xfc>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d00b      	beq.n	80023a2 <TIM_Base_SetConfig+0x8a>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a22      	ldr	r2, [pc, #136]	@ (8002418 <TIM_Base_SetConfig+0x100>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d007      	beq.n	80023a2 <TIM_Base_SetConfig+0x8a>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a21      	ldr	r2, [pc, #132]	@ (800241c <TIM_Base_SetConfig+0x104>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d003      	beq.n	80023a2 <TIM_Base_SetConfig+0x8a>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a20      	ldr	r2, [pc, #128]	@ (8002420 <TIM_Base_SetConfig+0x108>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d108      	bne.n	80023b4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80023a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	68fa      	ldr	r2, [r7, #12]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	695b      	ldr	r3, [r3, #20]
 80023be:	4313      	orrs	r3, r2
 80023c0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	689a      	ldr	r2, [r3, #8]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a0c      	ldr	r2, [pc, #48]	@ (8002408 <TIM_Base_SetConfig+0xf0>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d103      	bne.n	80023e2 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	691a      	ldr	r2, [r3, #16]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f043 0204 	orr.w	r2, r3, #4
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2201      	movs	r2, #1
 80023f2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	68fa      	ldr	r2, [r7, #12]
 80023f8:	601a      	str	r2, [r3, #0]
}
 80023fa:	bf00      	nop
 80023fc:	3714      	adds	r7, #20
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	40010000 	.word	0x40010000
 800240c:	40000400 	.word	0x40000400
 8002410:	40000800 	.word	0x40000800
 8002414:	40000c00 	.word	0x40000c00
 8002418:	40014000 	.word	0x40014000
 800241c:	40014400 	.word	0x40014400
 8002420:	40014800 	.word	0x40014800

08002424 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002424:	b480      	push	{r7}
 8002426:	b087      	sub	sp, #28
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	6a1b      	ldr	r3, [r3, #32]
 8002434:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6a1b      	ldr	r3, [r3, #32]
 800243a:	f023 0201 	bic.w	r2, r3, #1
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	699b      	ldr	r3, [r3, #24]
 8002446:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800244e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	011b      	lsls	r3, r3, #4
 8002454:	693a      	ldr	r2, [r7, #16]
 8002456:	4313      	orrs	r3, r2
 8002458:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	f023 030a 	bic.w	r3, r3, #10
 8002460:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002462:	697a      	ldr	r2, [r7, #20]
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	4313      	orrs	r3, r2
 8002468:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	693a      	ldr	r2, [r7, #16]
 800246e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	697a      	ldr	r2, [r7, #20]
 8002474:	621a      	str	r2, [r3, #32]
}
 8002476:	bf00      	nop
 8002478:	371c      	adds	r7, #28
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr

08002482 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002482:	b480      	push	{r7}
 8002484:	b087      	sub	sp, #28
 8002486:	af00      	add	r7, sp, #0
 8002488:	60f8      	str	r0, [r7, #12]
 800248a:	60b9      	str	r1, [r7, #8]
 800248c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6a1b      	ldr	r3, [r3, #32]
 8002492:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6a1b      	ldr	r3, [r3, #32]
 8002498:	f023 0210 	bic.w	r2, r3, #16
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	699b      	ldr	r3, [r3, #24]
 80024a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80024ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	031b      	lsls	r3, r3, #12
 80024b2:	693a      	ldr	r2, [r7, #16]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80024be:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	011b      	lsls	r3, r3, #4
 80024c4:	697a      	ldr	r2, [r7, #20]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	697a      	ldr	r2, [r7, #20]
 80024d4:	621a      	str	r2, [r3, #32]
}
 80024d6:	bf00      	nop
 80024d8:	371c      	adds	r7, #28
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr

080024e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80024e2:	b480      	push	{r7}
 80024e4:	b085      	sub	sp, #20
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
 80024ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80024fa:	683a      	ldr	r2, [r7, #0]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	4313      	orrs	r3, r2
 8002500:	f043 0307 	orr.w	r3, r3, #7
 8002504:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	68fa      	ldr	r2, [r7, #12]
 800250a:	609a      	str	r2, [r3, #8]
}
 800250c:	bf00      	nop
 800250e:	3714      	adds	r7, #20
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002518:	b480      	push	{r7}
 800251a:	b087      	sub	sp, #28
 800251c:	af00      	add	r7, sp, #0
 800251e:	60f8      	str	r0, [r7, #12]
 8002520:	60b9      	str	r1, [r7, #8]
 8002522:	607a      	str	r2, [r7, #4]
 8002524:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002532:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	021a      	lsls	r2, r3, #8
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	431a      	orrs	r2, r3
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	4313      	orrs	r3, r2
 8002540:	697a      	ldr	r2, [r7, #20]
 8002542:	4313      	orrs	r3, r2
 8002544:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	697a      	ldr	r2, [r7, #20]
 800254a:	609a      	str	r2, [r3, #8]
}
 800254c:	bf00      	nop
 800254e:	371c      	adds	r7, #28
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002558:	b480      	push	{r7}
 800255a:	b085      	sub	sp, #20
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002568:	2b01      	cmp	r3, #1
 800256a:	d101      	bne.n	8002570 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800256c:	2302      	movs	r3, #2
 800256e:	e050      	b.n	8002612 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2202      	movs	r2, #2
 800257c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002596:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	68fa      	ldr	r2, [r7, #12]
 800259e:	4313      	orrs	r3, r2
 80025a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	68fa      	ldr	r2, [r7, #12]
 80025a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a1c      	ldr	r2, [pc, #112]	@ (8002620 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d018      	beq.n	80025e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025bc:	d013      	beq.n	80025e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a18      	ldr	r2, [pc, #96]	@ (8002624 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d00e      	beq.n	80025e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a16      	ldr	r2, [pc, #88]	@ (8002628 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d009      	beq.n	80025e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a15      	ldr	r2, [pc, #84]	@ (800262c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d004      	beq.n	80025e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a13      	ldr	r2, [pc, #76]	@ (8002630 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d10c      	bne.n	8002600 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80025ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	68ba      	ldr	r2, [r7, #8]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	68ba      	ldr	r2, [r7, #8]
 80025fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	3714      	adds	r7, #20
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	40010000 	.word	0x40010000
 8002624:	40000400 	.word	0x40000400
 8002628:	40000800 	.word	0x40000800
 800262c:	40000c00 	.word	0x40000c00
 8002630:	40014000 	.word	0x40014000

08002634 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d101      	bne.n	8002646 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e042      	b.n	80026cc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b00      	cmp	r3, #0
 8002650:	d106      	bne.n	8002660 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f7fe fbca 	bl	8000df4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2224      	movs	r2, #36	@ 0x24
 8002664:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	68da      	ldr	r2, [r3, #12]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002676:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f000 fa09 	bl	8002a90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	691a      	ldr	r2, [r3, #16]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800268c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	695a      	ldr	r2, [r3, #20]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800269c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	68da      	ldr	r2, [r3, #12]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80026ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2220      	movs	r2, #32
 80026b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2220      	movs	r2, #32
 80026c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80026ca:	2300      	movs	r3, #0
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3708      	adds	r7, #8
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b08a      	sub	sp, #40	@ 0x28
 80026d8:	af02      	add	r7, sp, #8
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	603b      	str	r3, [r7, #0]
 80026e0:	4613      	mov	r3, r2
 80026e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80026e4:	2300      	movs	r3, #0
 80026e6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	2b20      	cmp	r3, #32
 80026f2:	d175      	bne.n	80027e0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d002      	beq.n	8002700 <HAL_UART_Transmit+0x2c>
 80026fa:	88fb      	ldrh	r3, [r7, #6]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d101      	bne.n	8002704 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e06e      	b.n	80027e2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2200      	movs	r2, #0
 8002708:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2221      	movs	r2, #33	@ 0x21
 800270e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002712:	f7fe fd2b 	bl	800116c <HAL_GetTick>
 8002716:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	88fa      	ldrh	r2, [r7, #6]
 800271c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	88fa      	ldrh	r2, [r7, #6]
 8002722:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800272c:	d108      	bne.n	8002740 <HAL_UART_Transmit+0x6c>
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d104      	bne.n	8002740 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002736:	2300      	movs	r3, #0
 8002738:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	61bb      	str	r3, [r7, #24]
 800273e:	e003      	b.n	8002748 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002744:	2300      	movs	r3, #0
 8002746:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002748:	e02e      	b.n	80027a8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	9300      	str	r3, [sp, #0]
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	2200      	movs	r2, #0
 8002752:	2180      	movs	r1, #128	@ 0x80
 8002754:	68f8      	ldr	r0, [r7, #12]
 8002756:	f000 f8df 	bl	8002918 <UART_WaitOnFlagUntilTimeout>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d005      	beq.n	800276c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2220      	movs	r2, #32
 8002764:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	e03a      	b.n	80027e2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d10b      	bne.n	800278a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	881b      	ldrh	r3, [r3, #0]
 8002776:	461a      	mov	r2, r3
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002780:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	3302      	adds	r3, #2
 8002786:	61bb      	str	r3, [r7, #24]
 8002788:	e007      	b.n	800279a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	781a      	ldrb	r2, [r3, #0]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	3301      	adds	r3, #1
 8002798:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800279e:	b29b      	uxth	r3, r3
 80027a0:	3b01      	subs	r3, #1
 80027a2:	b29a      	uxth	r2, r3
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d1cb      	bne.n	800274a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	9300      	str	r3, [sp, #0]
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	2200      	movs	r2, #0
 80027ba:	2140      	movs	r1, #64	@ 0x40
 80027bc:	68f8      	ldr	r0, [r7, #12]
 80027be:	f000 f8ab 	bl	8002918 <UART_WaitOnFlagUntilTimeout>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d005      	beq.n	80027d4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2220      	movs	r2, #32
 80027cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80027d0:	2303      	movs	r3, #3
 80027d2:	e006      	b.n	80027e2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2220      	movs	r2, #32
 80027d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80027dc:	2300      	movs	r3, #0
 80027de:	e000      	b.n	80027e2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80027e0:	2302      	movs	r3, #2
  }
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3720      	adds	r7, #32
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}

080027ea <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027ea:	b580      	push	{r7, lr}
 80027ec:	b08a      	sub	sp, #40	@ 0x28
 80027ee:	af02      	add	r7, sp, #8
 80027f0:	60f8      	str	r0, [r7, #12]
 80027f2:	60b9      	str	r1, [r7, #8]
 80027f4:	603b      	str	r3, [r7, #0]
 80027f6:	4613      	mov	r3, r2
 80027f8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80027fa:	2300      	movs	r3, #0
 80027fc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b20      	cmp	r3, #32
 8002808:	f040 8081 	bne.w	800290e <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d002      	beq.n	8002818 <HAL_UART_Receive+0x2e>
 8002812:	88fb      	ldrh	r3, [r7, #6]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d101      	bne.n	800281c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e079      	b.n	8002910 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2200      	movs	r2, #0
 8002820:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2222      	movs	r2, #34	@ 0x22
 8002826:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2200      	movs	r2, #0
 800282e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002830:	f7fe fc9c 	bl	800116c <HAL_GetTick>
 8002834:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	88fa      	ldrh	r2, [r7, #6]
 800283a:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	88fa      	ldrh	r2, [r7, #6]
 8002840:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800284a:	d108      	bne.n	800285e <HAL_UART_Receive+0x74>
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	691b      	ldr	r3, [r3, #16]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d104      	bne.n	800285e <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002854:	2300      	movs	r3, #0
 8002856:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	61bb      	str	r3, [r7, #24]
 800285c:	e003      	b.n	8002866 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002862:	2300      	movs	r3, #0
 8002864:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002866:	e047      	b.n	80028f8 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	9300      	str	r3, [sp, #0]
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	2200      	movs	r2, #0
 8002870:	2120      	movs	r1, #32
 8002872:	68f8      	ldr	r0, [r7, #12]
 8002874:	f000 f850 	bl	8002918 <UART_WaitOnFlagUntilTimeout>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d005      	beq.n	800288a <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2220      	movs	r2, #32
 8002882:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e042      	b.n	8002910 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d10c      	bne.n	80028aa <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	b29b      	uxth	r3, r3
 8002898:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800289c:	b29a      	uxth	r2, r3
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	3302      	adds	r3, #2
 80028a6:	61bb      	str	r3, [r7, #24]
 80028a8:	e01f      	b.n	80028ea <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80028b2:	d007      	beq.n	80028c4 <HAL_UART_Receive+0xda>
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d10a      	bne.n	80028d2 <HAL_UART_Receive+0xe8>
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	691b      	ldr	r3, [r3, #16]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d106      	bne.n	80028d2 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	b2da      	uxtb	r2, r3
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	701a      	strb	r2, [r3, #0]
 80028d0:	e008      	b.n	80028e4 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80028de:	b2da      	uxtb	r2, r3
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	3301      	adds	r3, #1
 80028e8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	3b01      	subs	r3, #1
 80028f2:	b29a      	uxth	r2, r3
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d1b2      	bne.n	8002868 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2220      	movs	r2, #32
 8002906:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800290a:	2300      	movs	r3, #0
 800290c:	e000      	b.n	8002910 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800290e:	2302      	movs	r3, #2
  }
}
 8002910:	4618      	mov	r0, r3
 8002912:	3720      	adds	r7, #32
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}

08002918 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b086      	sub	sp, #24
 800291c:	af00      	add	r7, sp, #0
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	60b9      	str	r1, [r7, #8]
 8002922:	603b      	str	r3, [r7, #0]
 8002924:	4613      	mov	r3, r2
 8002926:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002928:	e03b      	b.n	80029a2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800292a:	6a3b      	ldr	r3, [r7, #32]
 800292c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002930:	d037      	beq.n	80029a2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002932:	f7fe fc1b 	bl	800116c <HAL_GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	6a3a      	ldr	r2, [r7, #32]
 800293e:	429a      	cmp	r2, r3
 8002940:	d302      	bcc.n	8002948 <UART_WaitOnFlagUntilTimeout+0x30>
 8002942:	6a3b      	ldr	r3, [r7, #32]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d101      	bne.n	800294c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e03a      	b.n	80029c2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	f003 0304 	and.w	r3, r3, #4
 8002956:	2b00      	cmp	r3, #0
 8002958:	d023      	beq.n	80029a2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	2b80      	cmp	r3, #128	@ 0x80
 800295e:	d020      	beq.n	80029a2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	2b40      	cmp	r3, #64	@ 0x40
 8002964:	d01d      	beq.n	80029a2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0308 	and.w	r3, r3, #8
 8002970:	2b08      	cmp	r3, #8
 8002972:	d116      	bne.n	80029a2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002974:	2300      	movs	r3, #0
 8002976:	617b      	str	r3, [r7, #20]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	617b      	str	r3, [r7, #20]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	617b      	str	r3, [r7, #20]
 8002988:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800298a:	68f8      	ldr	r0, [r7, #12]
 800298c:	f000 f81d 	bl	80029ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2208      	movs	r2, #8
 8002994:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2200      	movs	r2, #0
 800299a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e00f      	b.n	80029c2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	4013      	ands	r3, r2
 80029ac:	68ba      	ldr	r2, [r7, #8]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	bf0c      	ite	eq
 80029b2:	2301      	moveq	r3, #1
 80029b4:	2300      	movne	r3, #0
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	461a      	mov	r2, r3
 80029ba:	79fb      	ldrb	r3, [r7, #7]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d0b4      	beq.n	800292a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3718      	adds	r7, #24
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}

080029ca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80029ca:	b480      	push	{r7}
 80029cc:	b095      	sub	sp, #84	@ 0x54
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	330c      	adds	r3, #12
 80029d8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029dc:	e853 3f00 	ldrex	r3, [r3]
 80029e0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80029e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80029e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	330c      	adds	r3, #12
 80029f0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80029f2:	643a      	str	r2, [r7, #64]	@ 0x40
 80029f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029f6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80029f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80029fa:	e841 2300 	strex	r3, r2, [r1]
 80029fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002a00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d1e5      	bne.n	80029d2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	3314      	adds	r3, #20
 8002a0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a0e:	6a3b      	ldr	r3, [r7, #32]
 8002a10:	e853 3f00 	ldrex	r3, [r3]
 8002a14:	61fb      	str	r3, [r7, #28]
   return(result);
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	f023 0301 	bic.w	r3, r3, #1
 8002a1c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	3314      	adds	r3, #20
 8002a24:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002a26:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002a28:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a2a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002a2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a2e:	e841 2300 	strex	r3, r2, [r1]
 8002a32:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1e5      	bne.n	8002a06 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d119      	bne.n	8002a76 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	330c      	adds	r3, #12
 8002a48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	e853 3f00 	ldrex	r3, [r3]
 8002a50:	60bb      	str	r3, [r7, #8]
   return(result);
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	f023 0310 	bic.w	r3, r3, #16
 8002a58:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	330c      	adds	r3, #12
 8002a60:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002a62:	61ba      	str	r2, [r7, #24]
 8002a64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a66:	6979      	ldr	r1, [r7, #20]
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	e841 2300 	strex	r3, r2, [r1]
 8002a6e:	613b      	str	r3, [r7, #16]
   return(result);
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d1e5      	bne.n	8002a42 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2220      	movs	r2, #32
 8002a7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002a84:	bf00      	nop
 8002a86:	3754      	adds	r7, #84	@ 0x54
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a94:	b0c0      	sub	sp, #256	@ 0x100
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	691b      	ldr	r3, [r3, #16]
 8002aa4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002aac:	68d9      	ldr	r1, [r3, #12]
 8002aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	ea40 0301 	orr.w	r3, r0, r1
 8002ab8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002aba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002abe:	689a      	ldr	r2, [r3, #8]
 8002ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	431a      	orrs	r2, r3
 8002ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	431a      	orrs	r2, r3
 8002ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ad4:	69db      	ldr	r3, [r3, #28]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002ae8:	f021 010c 	bic.w	r1, r1, #12
 8002aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002af6:	430b      	orrs	r3, r1
 8002af8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002afa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	695b      	ldr	r3, [r3, #20]
 8002b02:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002b06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b0a:	6999      	ldr	r1, [r3, #24]
 8002b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	ea40 0301 	orr.w	r3, r0, r1
 8002b16:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	4b8f      	ldr	r3, [pc, #572]	@ (8002d5c <UART_SetConfig+0x2cc>)
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d005      	beq.n	8002b30 <UART_SetConfig+0xa0>
 8002b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	4b8d      	ldr	r3, [pc, #564]	@ (8002d60 <UART_SetConfig+0x2d0>)
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d104      	bne.n	8002b3a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002b30:	f7ff fa6c 	bl	800200c <HAL_RCC_GetPCLK2Freq>
 8002b34:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002b38:	e003      	b.n	8002b42 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002b3a:	f7ff fa53 	bl	8001fe4 <HAL_RCC_GetPCLK1Freq>
 8002b3e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b46:	69db      	ldr	r3, [r3, #28]
 8002b48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b4c:	f040 810c 	bne.w	8002d68 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002b50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b54:	2200      	movs	r2, #0
 8002b56:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002b5a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002b5e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002b62:	4622      	mov	r2, r4
 8002b64:	462b      	mov	r3, r5
 8002b66:	1891      	adds	r1, r2, r2
 8002b68:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002b6a:	415b      	adcs	r3, r3
 8002b6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002b6e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002b72:	4621      	mov	r1, r4
 8002b74:	eb12 0801 	adds.w	r8, r2, r1
 8002b78:	4629      	mov	r1, r5
 8002b7a:	eb43 0901 	adc.w	r9, r3, r1
 8002b7e:	f04f 0200 	mov.w	r2, #0
 8002b82:	f04f 0300 	mov.w	r3, #0
 8002b86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b92:	4690      	mov	r8, r2
 8002b94:	4699      	mov	r9, r3
 8002b96:	4623      	mov	r3, r4
 8002b98:	eb18 0303 	adds.w	r3, r8, r3
 8002b9c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002ba0:	462b      	mov	r3, r5
 8002ba2:	eb49 0303 	adc.w	r3, r9, r3
 8002ba6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002baa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002bb6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002bba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002bbe:	460b      	mov	r3, r1
 8002bc0:	18db      	adds	r3, r3, r3
 8002bc2:	653b      	str	r3, [r7, #80]	@ 0x50
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	eb42 0303 	adc.w	r3, r2, r3
 8002bca:	657b      	str	r3, [r7, #84]	@ 0x54
 8002bcc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002bd0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002bd4:	f7fd fb54 	bl	8000280 <__aeabi_uldivmod>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	460b      	mov	r3, r1
 8002bdc:	4b61      	ldr	r3, [pc, #388]	@ (8002d64 <UART_SetConfig+0x2d4>)
 8002bde:	fba3 2302 	umull	r2, r3, r3, r2
 8002be2:	095b      	lsrs	r3, r3, #5
 8002be4:	011c      	lsls	r4, r3, #4
 8002be6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002bea:	2200      	movs	r2, #0
 8002bec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002bf0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002bf4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002bf8:	4642      	mov	r2, r8
 8002bfa:	464b      	mov	r3, r9
 8002bfc:	1891      	adds	r1, r2, r2
 8002bfe:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002c00:	415b      	adcs	r3, r3
 8002c02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c04:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002c08:	4641      	mov	r1, r8
 8002c0a:	eb12 0a01 	adds.w	sl, r2, r1
 8002c0e:	4649      	mov	r1, r9
 8002c10:	eb43 0b01 	adc.w	fp, r3, r1
 8002c14:	f04f 0200 	mov.w	r2, #0
 8002c18:	f04f 0300 	mov.w	r3, #0
 8002c1c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c20:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c28:	4692      	mov	sl, r2
 8002c2a:	469b      	mov	fp, r3
 8002c2c:	4643      	mov	r3, r8
 8002c2e:	eb1a 0303 	adds.w	r3, sl, r3
 8002c32:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002c36:	464b      	mov	r3, r9
 8002c38:	eb4b 0303 	adc.w	r3, fp, r3
 8002c3c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002c4c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002c50:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002c54:	460b      	mov	r3, r1
 8002c56:	18db      	adds	r3, r3, r3
 8002c58:	643b      	str	r3, [r7, #64]	@ 0x40
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	eb42 0303 	adc.w	r3, r2, r3
 8002c60:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c62:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002c66:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002c6a:	f7fd fb09 	bl	8000280 <__aeabi_uldivmod>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	460b      	mov	r3, r1
 8002c72:	4611      	mov	r1, r2
 8002c74:	4b3b      	ldr	r3, [pc, #236]	@ (8002d64 <UART_SetConfig+0x2d4>)
 8002c76:	fba3 2301 	umull	r2, r3, r3, r1
 8002c7a:	095b      	lsrs	r3, r3, #5
 8002c7c:	2264      	movs	r2, #100	@ 0x64
 8002c7e:	fb02 f303 	mul.w	r3, r2, r3
 8002c82:	1acb      	subs	r3, r1, r3
 8002c84:	00db      	lsls	r3, r3, #3
 8002c86:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002c8a:	4b36      	ldr	r3, [pc, #216]	@ (8002d64 <UART_SetConfig+0x2d4>)
 8002c8c:	fba3 2302 	umull	r2, r3, r3, r2
 8002c90:	095b      	lsrs	r3, r3, #5
 8002c92:	005b      	lsls	r3, r3, #1
 8002c94:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002c98:	441c      	add	r4, r3
 8002c9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002ca4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002ca8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002cac:	4642      	mov	r2, r8
 8002cae:	464b      	mov	r3, r9
 8002cb0:	1891      	adds	r1, r2, r2
 8002cb2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002cb4:	415b      	adcs	r3, r3
 8002cb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002cb8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002cbc:	4641      	mov	r1, r8
 8002cbe:	1851      	adds	r1, r2, r1
 8002cc0:	6339      	str	r1, [r7, #48]	@ 0x30
 8002cc2:	4649      	mov	r1, r9
 8002cc4:	414b      	adcs	r3, r1
 8002cc6:	637b      	str	r3, [r7, #52]	@ 0x34
 8002cc8:	f04f 0200 	mov.w	r2, #0
 8002ccc:	f04f 0300 	mov.w	r3, #0
 8002cd0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002cd4:	4659      	mov	r1, fp
 8002cd6:	00cb      	lsls	r3, r1, #3
 8002cd8:	4651      	mov	r1, sl
 8002cda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cde:	4651      	mov	r1, sl
 8002ce0:	00ca      	lsls	r2, r1, #3
 8002ce2:	4610      	mov	r0, r2
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	4642      	mov	r2, r8
 8002cea:	189b      	adds	r3, r3, r2
 8002cec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002cf0:	464b      	mov	r3, r9
 8002cf2:	460a      	mov	r2, r1
 8002cf4:	eb42 0303 	adc.w	r3, r2, r3
 8002cf8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002d08:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002d0c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002d10:	460b      	mov	r3, r1
 8002d12:	18db      	adds	r3, r3, r3
 8002d14:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d16:	4613      	mov	r3, r2
 8002d18:	eb42 0303 	adc.w	r3, r2, r3
 8002d1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d1e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002d22:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002d26:	f7fd faab 	bl	8000280 <__aeabi_uldivmod>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	4b0d      	ldr	r3, [pc, #52]	@ (8002d64 <UART_SetConfig+0x2d4>)
 8002d30:	fba3 1302 	umull	r1, r3, r3, r2
 8002d34:	095b      	lsrs	r3, r3, #5
 8002d36:	2164      	movs	r1, #100	@ 0x64
 8002d38:	fb01 f303 	mul.w	r3, r1, r3
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	00db      	lsls	r3, r3, #3
 8002d40:	3332      	adds	r3, #50	@ 0x32
 8002d42:	4a08      	ldr	r2, [pc, #32]	@ (8002d64 <UART_SetConfig+0x2d4>)
 8002d44:	fba2 2303 	umull	r2, r3, r2, r3
 8002d48:	095b      	lsrs	r3, r3, #5
 8002d4a:	f003 0207 	and.w	r2, r3, #7
 8002d4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4422      	add	r2, r4
 8002d56:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002d58:	e106      	b.n	8002f68 <UART_SetConfig+0x4d8>
 8002d5a:	bf00      	nop
 8002d5c:	40011000 	.word	0x40011000
 8002d60:	40011400 	.word	0x40011400
 8002d64:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002d72:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002d76:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002d7a:	4642      	mov	r2, r8
 8002d7c:	464b      	mov	r3, r9
 8002d7e:	1891      	adds	r1, r2, r2
 8002d80:	6239      	str	r1, [r7, #32]
 8002d82:	415b      	adcs	r3, r3
 8002d84:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d8a:	4641      	mov	r1, r8
 8002d8c:	1854      	adds	r4, r2, r1
 8002d8e:	4649      	mov	r1, r9
 8002d90:	eb43 0501 	adc.w	r5, r3, r1
 8002d94:	f04f 0200 	mov.w	r2, #0
 8002d98:	f04f 0300 	mov.w	r3, #0
 8002d9c:	00eb      	lsls	r3, r5, #3
 8002d9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002da2:	00e2      	lsls	r2, r4, #3
 8002da4:	4614      	mov	r4, r2
 8002da6:	461d      	mov	r5, r3
 8002da8:	4643      	mov	r3, r8
 8002daa:	18e3      	adds	r3, r4, r3
 8002dac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002db0:	464b      	mov	r3, r9
 8002db2:	eb45 0303 	adc.w	r3, r5, r3
 8002db6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002dba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002dc6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002dca:	f04f 0200 	mov.w	r2, #0
 8002dce:	f04f 0300 	mov.w	r3, #0
 8002dd2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002dd6:	4629      	mov	r1, r5
 8002dd8:	008b      	lsls	r3, r1, #2
 8002dda:	4621      	mov	r1, r4
 8002ddc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002de0:	4621      	mov	r1, r4
 8002de2:	008a      	lsls	r2, r1, #2
 8002de4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002de8:	f7fd fa4a 	bl	8000280 <__aeabi_uldivmod>
 8002dec:	4602      	mov	r2, r0
 8002dee:	460b      	mov	r3, r1
 8002df0:	4b60      	ldr	r3, [pc, #384]	@ (8002f74 <UART_SetConfig+0x4e4>)
 8002df2:	fba3 2302 	umull	r2, r3, r3, r2
 8002df6:	095b      	lsrs	r3, r3, #5
 8002df8:	011c      	lsls	r4, r3, #4
 8002dfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002e04:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002e08:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002e0c:	4642      	mov	r2, r8
 8002e0e:	464b      	mov	r3, r9
 8002e10:	1891      	adds	r1, r2, r2
 8002e12:	61b9      	str	r1, [r7, #24]
 8002e14:	415b      	adcs	r3, r3
 8002e16:	61fb      	str	r3, [r7, #28]
 8002e18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e1c:	4641      	mov	r1, r8
 8002e1e:	1851      	adds	r1, r2, r1
 8002e20:	6139      	str	r1, [r7, #16]
 8002e22:	4649      	mov	r1, r9
 8002e24:	414b      	adcs	r3, r1
 8002e26:	617b      	str	r3, [r7, #20]
 8002e28:	f04f 0200 	mov.w	r2, #0
 8002e2c:	f04f 0300 	mov.w	r3, #0
 8002e30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e34:	4659      	mov	r1, fp
 8002e36:	00cb      	lsls	r3, r1, #3
 8002e38:	4651      	mov	r1, sl
 8002e3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e3e:	4651      	mov	r1, sl
 8002e40:	00ca      	lsls	r2, r1, #3
 8002e42:	4610      	mov	r0, r2
 8002e44:	4619      	mov	r1, r3
 8002e46:	4603      	mov	r3, r0
 8002e48:	4642      	mov	r2, r8
 8002e4a:	189b      	adds	r3, r3, r2
 8002e4c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002e50:	464b      	mov	r3, r9
 8002e52:	460a      	mov	r2, r1
 8002e54:	eb42 0303 	adc.w	r3, r2, r3
 8002e58:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002e66:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002e68:	f04f 0200 	mov.w	r2, #0
 8002e6c:	f04f 0300 	mov.w	r3, #0
 8002e70:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002e74:	4649      	mov	r1, r9
 8002e76:	008b      	lsls	r3, r1, #2
 8002e78:	4641      	mov	r1, r8
 8002e7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e7e:	4641      	mov	r1, r8
 8002e80:	008a      	lsls	r2, r1, #2
 8002e82:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002e86:	f7fd f9fb 	bl	8000280 <__aeabi_uldivmod>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	4611      	mov	r1, r2
 8002e90:	4b38      	ldr	r3, [pc, #224]	@ (8002f74 <UART_SetConfig+0x4e4>)
 8002e92:	fba3 2301 	umull	r2, r3, r3, r1
 8002e96:	095b      	lsrs	r3, r3, #5
 8002e98:	2264      	movs	r2, #100	@ 0x64
 8002e9a:	fb02 f303 	mul.w	r3, r2, r3
 8002e9e:	1acb      	subs	r3, r1, r3
 8002ea0:	011b      	lsls	r3, r3, #4
 8002ea2:	3332      	adds	r3, #50	@ 0x32
 8002ea4:	4a33      	ldr	r2, [pc, #204]	@ (8002f74 <UART_SetConfig+0x4e4>)
 8002ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eaa:	095b      	lsrs	r3, r3, #5
 8002eac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002eb0:	441c      	add	r4, r3
 8002eb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	673b      	str	r3, [r7, #112]	@ 0x70
 8002eba:	677a      	str	r2, [r7, #116]	@ 0x74
 8002ebc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002ec0:	4642      	mov	r2, r8
 8002ec2:	464b      	mov	r3, r9
 8002ec4:	1891      	adds	r1, r2, r2
 8002ec6:	60b9      	str	r1, [r7, #8]
 8002ec8:	415b      	adcs	r3, r3
 8002eca:	60fb      	str	r3, [r7, #12]
 8002ecc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ed0:	4641      	mov	r1, r8
 8002ed2:	1851      	adds	r1, r2, r1
 8002ed4:	6039      	str	r1, [r7, #0]
 8002ed6:	4649      	mov	r1, r9
 8002ed8:	414b      	adcs	r3, r1
 8002eda:	607b      	str	r3, [r7, #4]
 8002edc:	f04f 0200 	mov.w	r2, #0
 8002ee0:	f04f 0300 	mov.w	r3, #0
 8002ee4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002ee8:	4659      	mov	r1, fp
 8002eea:	00cb      	lsls	r3, r1, #3
 8002eec:	4651      	mov	r1, sl
 8002eee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ef2:	4651      	mov	r1, sl
 8002ef4:	00ca      	lsls	r2, r1, #3
 8002ef6:	4610      	mov	r0, r2
 8002ef8:	4619      	mov	r1, r3
 8002efa:	4603      	mov	r3, r0
 8002efc:	4642      	mov	r2, r8
 8002efe:	189b      	adds	r3, r3, r2
 8002f00:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002f02:	464b      	mov	r3, r9
 8002f04:	460a      	mov	r2, r1
 8002f06:	eb42 0303 	adc.w	r3, r2, r3
 8002f0a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	663b      	str	r3, [r7, #96]	@ 0x60
 8002f16:	667a      	str	r2, [r7, #100]	@ 0x64
 8002f18:	f04f 0200 	mov.w	r2, #0
 8002f1c:	f04f 0300 	mov.w	r3, #0
 8002f20:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002f24:	4649      	mov	r1, r9
 8002f26:	008b      	lsls	r3, r1, #2
 8002f28:	4641      	mov	r1, r8
 8002f2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f2e:	4641      	mov	r1, r8
 8002f30:	008a      	lsls	r2, r1, #2
 8002f32:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002f36:	f7fd f9a3 	bl	8000280 <__aeabi_uldivmod>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	4b0d      	ldr	r3, [pc, #52]	@ (8002f74 <UART_SetConfig+0x4e4>)
 8002f40:	fba3 1302 	umull	r1, r3, r3, r2
 8002f44:	095b      	lsrs	r3, r3, #5
 8002f46:	2164      	movs	r1, #100	@ 0x64
 8002f48:	fb01 f303 	mul.w	r3, r1, r3
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	011b      	lsls	r3, r3, #4
 8002f50:	3332      	adds	r3, #50	@ 0x32
 8002f52:	4a08      	ldr	r2, [pc, #32]	@ (8002f74 <UART_SetConfig+0x4e4>)
 8002f54:	fba2 2303 	umull	r2, r3, r2, r3
 8002f58:	095b      	lsrs	r3, r3, #5
 8002f5a:	f003 020f 	and.w	r2, r3, #15
 8002f5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4422      	add	r2, r4
 8002f66:	609a      	str	r2, [r3, #8]
}
 8002f68:	bf00      	nop
 8002f6a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f74:	51eb851f 	.word	0x51eb851f

08002f78 <std>:
 8002f78:	2300      	movs	r3, #0
 8002f7a:	b510      	push	{r4, lr}
 8002f7c:	4604      	mov	r4, r0
 8002f7e:	e9c0 3300 	strd	r3, r3, [r0]
 8002f82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002f86:	6083      	str	r3, [r0, #8]
 8002f88:	8181      	strh	r1, [r0, #12]
 8002f8a:	6643      	str	r3, [r0, #100]	@ 0x64
 8002f8c:	81c2      	strh	r2, [r0, #14]
 8002f8e:	6183      	str	r3, [r0, #24]
 8002f90:	4619      	mov	r1, r3
 8002f92:	2208      	movs	r2, #8
 8002f94:	305c      	adds	r0, #92	@ 0x5c
 8002f96:	f000 f9f9 	bl	800338c <memset>
 8002f9a:	4b0d      	ldr	r3, [pc, #52]	@ (8002fd0 <std+0x58>)
 8002f9c:	6263      	str	r3, [r4, #36]	@ 0x24
 8002f9e:	4b0d      	ldr	r3, [pc, #52]	@ (8002fd4 <std+0x5c>)
 8002fa0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002fa2:	4b0d      	ldr	r3, [pc, #52]	@ (8002fd8 <std+0x60>)
 8002fa4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8002fdc <std+0x64>)
 8002fa8:	6323      	str	r3, [r4, #48]	@ 0x30
 8002faa:	4b0d      	ldr	r3, [pc, #52]	@ (8002fe0 <std+0x68>)
 8002fac:	6224      	str	r4, [r4, #32]
 8002fae:	429c      	cmp	r4, r3
 8002fb0:	d006      	beq.n	8002fc0 <std+0x48>
 8002fb2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002fb6:	4294      	cmp	r4, r2
 8002fb8:	d002      	beq.n	8002fc0 <std+0x48>
 8002fba:	33d0      	adds	r3, #208	@ 0xd0
 8002fbc:	429c      	cmp	r4, r3
 8002fbe:	d105      	bne.n	8002fcc <std+0x54>
 8002fc0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002fc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002fc8:	f000 ba58 	b.w	800347c <__retarget_lock_init_recursive>
 8002fcc:	bd10      	pop	{r4, pc}
 8002fce:	bf00      	nop
 8002fd0:	080031dd 	.word	0x080031dd
 8002fd4:	080031ff 	.word	0x080031ff
 8002fd8:	08003237 	.word	0x08003237
 8002fdc:	0800325b 	.word	0x0800325b
 8002fe0:	2000012c 	.word	0x2000012c

08002fe4 <stdio_exit_handler>:
 8002fe4:	4a02      	ldr	r2, [pc, #8]	@ (8002ff0 <stdio_exit_handler+0xc>)
 8002fe6:	4903      	ldr	r1, [pc, #12]	@ (8002ff4 <stdio_exit_handler+0x10>)
 8002fe8:	4803      	ldr	r0, [pc, #12]	@ (8002ff8 <stdio_exit_handler+0x14>)
 8002fea:	f000 b869 	b.w	80030c0 <_fwalk_sglue>
 8002fee:	bf00      	nop
 8002ff0:	20000010 	.word	0x20000010
 8002ff4:	08003d19 	.word	0x08003d19
 8002ff8:	20000020 	.word	0x20000020

08002ffc <cleanup_stdio>:
 8002ffc:	6841      	ldr	r1, [r0, #4]
 8002ffe:	4b0c      	ldr	r3, [pc, #48]	@ (8003030 <cleanup_stdio+0x34>)
 8003000:	4299      	cmp	r1, r3
 8003002:	b510      	push	{r4, lr}
 8003004:	4604      	mov	r4, r0
 8003006:	d001      	beq.n	800300c <cleanup_stdio+0x10>
 8003008:	f000 fe86 	bl	8003d18 <_fflush_r>
 800300c:	68a1      	ldr	r1, [r4, #8]
 800300e:	4b09      	ldr	r3, [pc, #36]	@ (8003034 <cleanup_stdio+0x38>)
 8003010:	4299      	cmp	r1, r3
 8003012:	d002      	beq.n	800301a <cleanup_stdio+0x1e>
 8003014:	4620      	mov	r0, r4
 8003016:	f000 fe7f 	bl	8003d18 <_fflush_r>
 800301a:	68e1      	ldr	r1, [r4, #12]
 800301c:	4b06      	ldr	r3, [pc, #24]	@ (8003038 <cleanup_stdio+0x3c>)
 800301e:	4299      	cmp	r1, r3
 8003020:	d004      	beq.n	800302c <cleanup_stdio+0x30>
 8003022:	4620      	mov	r0, r4
 8003024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003028:	f000 be76 	b.w	8003d18 <_fflush_r>
 800302c:	bd10      	pop	{r4, pc}
 800302e:	bf00      	nop
 8003030:	2000012c 	.word	0x2000012c
 8003034:	20000194 	.word	0x20000194
 8003038:	200001fc 	.word	0x200001fc

0800303c <global_stdio_init.part.0>:
 800303c:	b510      	push	{r4, lr}
 800303e:	4b0b      	ldr	r3, [pc, #44]	@ (800306c <global_stdio_init.part.0+0x30>)
 8003040:	4c0b      	ldr	r4, [pc, #44]	@ (8003070 <global_stdio_init.part.0+0x34>)
 8003042:	4a0c      	ldr	r2, [pc, #48]	@ (8003074 <global_stdio_init.part.0+0x38>)
 8003044:	601a      	str	r2, [r3, #0]
 8003046:	4620      	mov	r0, r4
 8003048:	2200      	movs	r2, #0
 800304a:	2104      	movs	r1, #4
 800304c:	f7ff ff94 	bl	8002f78 <std>
 8003050:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003054:	2201      	movs	r2, #1
 8003056:	2109      	movs	r1, #9
 8003058:	f7ff ff8e 	bl	8002f78 <std>
 800305c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003060:	2202      	movs	r2, #2
 8003062:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003066:	2112      	movs	r1, #18
 8003068:	f7ff bf86 	b.w	8002f78 <std>
 800306c:	20000264 	.word	0x20000264
 8003070:	2000012c 	.word	0x2000012c
 8003074:	08002fe5 	.word	0x08002fe5

08003078 <__sfp_lock_acquire>:
 8003078:	4801      	ldr	r0, [pc, #4]	@ (8003080 <__sfp_lock_acquire+0x8>)
 800307a:	f000 ba00 	b.w	800347e <__retarget_lock_acquire_recursive>
 800307e:	bf00      	nop
 8003080:	2000026d 	.word	0x2000026d

08003084 <__sfp_lock_release>:
 8003084:	4801      	ldr	r0, [pc, #4]	@ (800308c <__sfp_lock_release+0x8>)
 8003086:	f000 b9fb 	b.w	8003480 <__retarget_lock_release_recursive>
 800308a:	bf00      	nop
 800308c:	2000026d 	.word	0x2000026d

08003090 <__sinit>:
 8003090:	b510      	push	{r4, lr}
 8003092:	4604      	mov	r4, r0
 8003094:	f7ff fff0 	bl	8003078 <__sfp_lock_acquire>
 8003098:	6a23      	ldr	r3, [r4, #32]
 800309a:	b11b      	cbz	r3, 80030a4 <__sinit+0x14>
 800309c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80030a0:	f7ff bff0 	b.w	8003084 <__sfp_lock_release>
 80030a4:	4b04      	ldr	r3, [pc, #16]	@ (80030b8 <__sinit+0x28>)
 80030a6:	6223      	str	r3, [r4, #32]
 80030a8:	4b04      	ldr	r3, [pc, #16]	@ (80030bc <__sinit+0x2c>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d1f5      	bne.n	800309c <__sinit+0xc>
 80030b0:	f7ff ffc4 	bl	800303c <global_stdio_init.part.0>
 80030b4:	e7f2      	b.n	800309c <__sinit+0xc>
 80030b6:	bf00      	nop
 80030b8:	08002ffd 	.word	0x08002ffd
 80030bc:	20000264 	.word	0x20000264

080030c0 <_fwalk_sglue>:
 80030c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80030c4:	4607      	mov	r7, r0
 80030c6:	4688      	mov	r8, r1
 80030c8:	4614      	mov	r4, r2
 80030ca:	2600      	movs	r6, #0
 80030cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80030d0:	f1b9 0901 	subs.w	r9, r9, #1
 80030d4:	d505      	bpl.n	80030e2 <_fwalk_sglue+0x22>
 80030d6:	6824      	ldr	r4, [r4, #0]
 80030d8:	2c00      	cmp	r4, #0
 80030da:	d1f7      	bne.n	80030cc <_fwalk_sglue+0xc>
 80030dc:	4630      	mov	r0, r6
 80030de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80030e2:	89ab      	ldrh	r3, [r5, #12]
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d907      	bls.n	80030f8 <_fwalk_sglue+0x38>
 80030e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80030ec:	3301      	adds	r3, #1
 80030ee:	d003      	beq.n	80030f8 <_fwalk_sglue+0x38>
 80030f0:	4629      	mov	r1, r5
 80030f2:	4638      	mov	r0, r7
 80030f4:	47c0      	blx	r8
 80030f6:	4306      	orrs	r6, r0
 80030f8:	3568      	adds	r5, #104	@ 0x68
 80030fa:	e7e9      	b.n	80030d0 <_fwalk_sglue+0x10>

080030fc <iprintf>:
 80030fc:	b40f      	push	{r0, r1, r2, r3}
 80030fe:	b507      	push	{r0, r1, r2, lr}
 8003100:	4906      	ldr	r1, [pc, #24]	@ (800311c <iprintf+0x20>)
 8003102:	ab04      	add	r3, sp, #16
 8003104:	6808      	ldr	r0, [r1, #0]
 8003106:	f853 2b04 	ldr.w	r2, [r3], #4
 800310a:	6881      	ldr	r1, [r0, #8]
 800310c:	9301      	str	r3, [sp, #4]
 800310e:	f000 fadb 	bl	80036c8 <_vfiprintf_r>
 8003112:	b003      	add	sp, #12
 8003114:	f85d eb04 	ldr.w	lr, [sp], #4
 8003118:	b004      	add	sp, #16
 800311a:	4770      	bx	lr
 800311c:	2000001c 	.word	0x2000001c

08003120 <_puts_r>:
 8003120:	6a03      	ldr	r3, [r0, #32]
 8003122:	b570      	push	{r4, r5, r6, lr}
 8003124:	6884      	ldr	r4, [r0, #8]
 8003126:	4605      	mov	r5, r0
 8003128:	460e      	mov	r6, r1
 800312a:	b90b      	cbnz	r3, 8003130 <_puts_r+0x10>
 800312c:	f7ff ffb0 	bl	8003090 <__sinit>
 8003130:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003132:	07db      	lsls	r3, r3, #31
 8003134:	d405      	bmi.n	8003142 <_puts_r+0x22>
 8003136:	89a3      	ldrh	r3, [r4, #12]
 8003138:	0598      	lsls	r0, r3, #22
 800313a:	d402      	bmi.n	8003142 <_puts_r+0x22>
 800313c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800313e:	f000 f99e 	bl	800347e <__retarget_lock_acquire_recursive>
 8003142:	89a3      	ldrh	r3, [r4, #12]
 8003144:	0719      	lsls	r1, r3, #28
 8003146:	d502      	bpl.n	800314e <_puts_r+0x2e>
 8003148:	6923      	ldr	r3, [r4, #16]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d135      	bne.n	80031ba <_puts_r+0x9a>
 800314e:	4621      	mov	r1, r4
 8003150:	4628      	mov	r0, r5
 8003152:	f000 f8c5 	bl	80032e0 <__swsetup_r>
 8003156:	b380      	cbz	r0, 80031ba <_puts_r+0x9a>
 8003158:	f04f 35ff 	mov.w	r5, #4294967295
 800315c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800315e:	07da      	lsls	r2, r3, #31
 8003160:	d405      	bmi.n	800316e <_puts_r+0x4e>
 8003162:	89a3      	ldrh	r3, [r4, #12]
 8003164:	059b      	lsls	r3, r3, #22
 8003166:	d402      	bmi.n	800316e <_puts_r+0x4e>
 8003168:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800316a:	f000 f989 	bl	8003480 <__retarget_lock_release_recursive>
 800316e:	4628      	mov	r0, r5
 8003170:	bd70      	pop	{r4, r5, r6, pc}
 8003172:	2b00      	cmp	r3, #0
 8003174:	da04      	bge.n	8003180 <_puts_r+0x60>
 8003176:	69a2      	ldr	r2, [r4, #24]
 8003178:	429a      	cmp	r2, r3
 800317a:	dc17      	bgt.n	80031ac <_puts_r+0x8c>
 800317c:	290a      	cmp	r1, #10
 800317e:	d015      	beq.n	80031ac <_puts_r+0x8c>
 8003180:	6823      	ldr	r3, [r4, #0]
 8003182:	1c5a      	adds	r2, r3, #1
 8003184:	6022      	str	r2, [r4, #0]
 8003186:	7019      	strb	r1, [r3, #0]
 8003188:	68a3      	ldr	r3, [r4, #8]
 800318a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800318e:	3b01      	subs	r3, #1
 8003190:	60a3      	str	r3, [r4, #8]
 8003192:	2900      	cmp	r1, #0
 8003194:	d1ed      	bne.n	8003172 <_puts_r+0x52>
 8003196:	2b00      	cmp	r3, #0
 8003198:	da11      	bge.n	80031be <_puts_r+0x9e>
 800319a:	4622      	mov	r2, r4
 800319c:	210a      	movs	r1, #10
 800319e:	4628      	mov	r0, r5
 80031a0:	f000 f85f 	bl	8003262 <__swbuf_r>
 80031a4:	3001      	adds	r0, #1
 80031a6:	d0d7      	beq.n	8003158 <_puts_r+0x38>
 80031a8:	250a      	movs	r5, #10
 80031aa:	e7d7      	b.n	800315c <_puts_r+0x3c>
 80031ac:	4622      	mov	r2, r4
 80031ae:	4628      	mov	r0, r5
 80031b0:	f000 f857 	bl	8003262 <__swbuf_r>
 80031b4:	3001      	adds	r0, #1
 80031b6:	d1e7      	bne.n	8003188 <_puts_r+0x68>
 80031b8:	e7ce      	b.n	8003158 <_puts_r+0x38>
 80031ba:	3e01      	subs	r6, #1
 80031bc:	e7e4      	b.n	8003188 <_puts_r+0x68>
 80031be:	6823      	ldr	r3, [r4, #0]
 80031c0:	1c5a      	adds	r2, r3, #1
 80031c2:	6022      	str	r2, [r4, #0]
 80031c4:	220a      	movs	r2, #10
 80031c6:	701a      	strb	r2, [r3, #0]
 80031c8:	e7ee      	b.n	80031a8 <_puts_r+0x88>
	...

080031cc <puts>:
 80031cc:	4b02      	ldr	r3, [pc, #8]	@ (80031d8 <puts+0xc>)
 80031ce:	4601      	mov	r1, r0
 80031d0:	6818      	ldr	r0, [r3, #0]
 80031d2:	f7ff bfa5 	b.w	8003120 <_puts_r>
 80031d6:	bf00      	nop
 80031d8:	2000001c 	.word	0x2000001c

080031dc <__sread>:
 80031dc:	b510      	push	{r4, lr}
 80031de:	460c      	mov	r4, r1
 80031e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031e4:	f000 f8fc 	bl	80033e0 <_read_r>
 80031e8:	2800      	cmp	r0, #0
 80031ea:	bfab      	itete	ge
 80031ec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80031ee:	89a3      	ldrhlt	r3, [r4, #12]
 80031f0:	181b      	addge	r3, r3, r0
 80031f2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80031f6:	bfac      	ite	ge
 80031f8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80031fa:	81a3      	strhlt	r3, [r4, #12]
 80031fc:	bd10      	pop	{r4, pc}

080031fe <__swrite>:
 80031fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003202:	461f      	mov	r7, r3
 8003204:	898b      	ldrh	r3, [r1, #12]
 8003206:	05db      	lsls	r3, r3, #23
 8003208:	4605      	mov	r5, r0
 800320a:	460c      	mov	r4, r1
 800320c:	4616      	mov	r6, r2
 800320e:	d505      	bpl.n	800321c <__swrite+0x1e>
 8003210:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003214:	2302      	movs	r3, #2
 8003216:	2200      	movs	r2, #0
 8003218:	f000 f8d0 	bl	80033bc <_lseek_r>
 800321c:	89a3      	ldrh	r3, [r4, #12]
 800321e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003222:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003226:	81a3      	strh	r3, [r4, #12]
 8003228:	4632      	mov	r2, r6
 800322a:	463b      	mov	r3, r7
 800322c:	4628      	mov	r0, r5
 800322e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003232:	f000 b8e7 	b.w	8003404 <_write_r>

08003236 <__sseek>:
 8003236:	b510      	push	{r4, lr}
 8003238:	460c      	mov	r4, r1
 800323a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800323e:	f000 f8bd 	bl	80033bc <_lseek_r>
 8003242:	1c43      	adds	r3, r0, #1
 8003244:	89a3      	ldrh	r3, [r4, #12]
 8003246:	bf15      	itete	ne
 8003248:	6560      	strne	r0, [r4, #84]	@ 0x54
 800324a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800324e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003252:	81a3      	strheq	r3, [r4, #12]
 8003254:	bf18      	it	ne
 8003256:	81a3      	strhne	r3, [r4, #12]
 8003258:	bd10      	pop	{r4, pc}

0800325a <__sclose>:
 800325a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800325e:	f000 b89d 	b.w	800339c <_close_r>

08003262 <__swbuf_r>:
 8003262:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003264:	460e      	mov	r6, r1
 8003266:	4614      	mov	r4, r2
 8003268:	4605      	mov	r5, r0
 800326a:	b118      	cbz	r0, 8003274 <__swbuf_r+0x12>
 800326c:	6a03      	ldr	r3, [r0, #32]
 800326e:	b90b      	cbnz	r3, 8003274 <__swbuf_r+0x12>
 8003270:	f7ff ff0e 	bl	8003090 <__sinit>
 8003274:	69a3      	ldr	r3, [r4, #24]
 8003276:	60a3      	str	r3, [r4, #8]
 8003278:	89a3      	ldrh	r3, [r4, #12]
 800327a:	071a      	lsls	r2, r3, #28
 800327c:	d501      	bpl.n	8003282 <__swbuf_r+0x20>
 800327e:	6923      	ldr	r3, [r4, #16]
 8003280:	b943      	cbnz	r3, 8003294 <__swbuf_r+0x32>
 8003282:	4621      	mov	r1, r4
 8003284:	4628      	mov	r0, r5
 8003286:	f000 f82b 	bl	80032e0 <__swsetup_r>
 800328a:	b118      	cbz	r0, 8003294 <__swbuf_r+0x32>
 800328c:	f04f 37ff 	mov.w	r7, #4294967295
 8003290:	4638      	mov	r0, r7
 8003292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003294:	6823      	ldr	r3, [r4, #0]
 8003296:	6922      	ldr	r2, [r4, #16]
 8003298:	1a98      	subs	r0, r3, r2
 800329a:	6963      	ldr	r3, [r4, #20]
 800329c:	b2f6      	uxtb	r6, r6
 800329e:	4283      	cmp	r3, r0
 80032a0:	4637      	mov	r7, r6
 80032a2:	dc05      	bgt.n	80032b0 <__swbuf_r+0x4e>
 80032a4:	4621      	mov	r1, r4
 80032a6:	4628      	mov	r0, r5
 80032a8:	f000 fd36 	bl	8003d18 <_fflush_r>
 80032ac:	2800      	cmp	r0, #0
 80032ae:	d1ed      	bne.n	800328c <__swbuf_r+0x2a>
 80032b0:	68a3      	ldr	r3, [r4, #8]
 80032b2:	3b01      	subs	r3, #1
 80032b4:	60a3      	str	r3, [r4, #8]
 80032b6:	6823      	ldr	r3, [r4, #0]
 80032b8:	1c5a      	adds	r2, r3, #1
 80032ba:	6022      	str	r2, [r4, #0]
 80032bc:	701e      	strb	r6, [r3, #0]
 80032be:	6962      	ldr	r2, [r4, #20]
 80032c0:	1c43      	adds	r3, r0, #1
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d004      	beq.n	80032d0 <__swbuf_r+0x6e>
 80032c6:	89a3      	ldrh	r3, [r4, #12]
 80032c8:	07db      	lsls	r3, r3, #31
 80032ca:	d5e1      	bpl.n	8003290 <__swbuf_r+0x2e>
 80032cc:	2e0a      	cmp	r6, #10
 80032ce:	d1df      	bne.n	8003290 <__swbuf_r+0x2e>
 80032d0:	4621      	mov	r1, r4
 80032d2:	4628      	mov	r0, r5
 80032d4:	f000 fd20 	bl	8003d18 <_fflush_r>
 80032d8:	2800      	cmp	r0, #0
 80032da:	d0d9      	beq.n	8003290 <__swbuf_r+0x2e>
 80032dc:	e7d6      	b.n	800328c <__swbuf_r+0x2a>
	...

080032e0 <__swsetup_r>:
 80032e0:	b538      	push	{r3, r4, r5, lr}
 80032e2:	4b29      	ldr	r3, [pc, #164]	@ (8003388 <__swsetup_r+0xa8>)
 80032e4:	4605      	mov	r5, r0
 80032e6:	6818      	ldr	r0, [r3, #0]
 80032e8:	460c      	mov	r4, r1
 80032ea:	b118      	cbz	r0, 80032f4 <__swsetup_r+0x14>
 80032ec:	6a03      	ldr	r3, [r0, #32]
 80032ee:	b90b      	cbnz	r3, 80032f4 <__swsetup_r+0x14>
 80032f0:	f7ff fece 	bl	8003090 <__sinit>
 80032f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032f8:	0719      	lsls	r1, r3, #28
 80032fa:	d422      	bmi.n	8003342 <__swsetup_r+0x62>
 80032fc:	06da      	lsls	r2, r3, #27
 80032fe:	d407      	bmi.n	8003310 <__swsetup_r+0x30>
 8003300:	2209      	movs	r2, #9
 8003302:	602a      	str	r2, [r5, #0]
 8003304:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003308:	81a3      	strh	r3, [r4, #12]
 800330a:	f04f 30ff 	mov.w	r0, #4294967295
 800330e:	e033      	b.n	8003378 <__swsetup_r+0x98>
 8003310:	0758      	lsls	r0, r3, #29
 8003312:	d512      	bpl.n	800333a <__swsetup_r+0x5a>
 8003314:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003316:	b141      	cbz	r1, 800332a <__swsetup_r+0x4a>
 8003318:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800331c:	4299      	cmp	r1, r3
 800331e:	d002      	beq.n	8003326 <__swsetup_r+0x46>
 8003320:	4628      	mov	r0, r5
 8003322:	f000 f8af 	bl	8003484 <_free_r>
 8003326:	2300      	movs	r3, #0
 8003328:	6363      	str	r3, [r4, #52]	@ 0x34
 800332a:	89a3      	ldrh	r3, [r4, #12]
 800332c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003330:	81a3      	strh	r3, [r4, #12]
 8003332:	2300      	movs	r3, #0
 8003334:	6063      	str	r3, [r4, #4]
 8003336:	6923      	ldr	r3, [r4, #16]
 8003338:	6023      	str	r3, [r4, #0]
 800333a:	89a3      	ldrh	r3, [r4, #12]
 800333c:	f043 0308 	orr.w	r3, r3, #8
 8003340:	81a3      	strh	r3, [r4, #12]
 8003342:	6923      	ldr	r3, [r4, #16]
 8003344:	b94b      	cbnz	r3, 800335a <__swsetup_r+0x7a>
 8003346:	89a3      	ldrh	r3, [r4, #12]
 8003348:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800334c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003350:	d003      	beq.n	800335a <__swsetup_r+0x7a>
 8003352:	4621      	mov	r1, r4
 8003354:	4628      	mov	r0, r5
 8003356:	f000 fd2d 	bl	8003db4 <__smakebuf_r>
 800335a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800335e:	f013 0201 	ands.w	r2, r3, #1
 8003362:	d00a      	beq.n	800337a <__swsetup_r+0x9a>
 8003364:	2200      	movs	r2, #0
 8003366:	60a2      	str	r2, [r4, #8]
 8003368:	6962      	ldr	r2, [r4, #20]
 800336a:	4252      	negs	r2, r2
 800336c:	61a2      	str	r2, [r4, #24]
 800336e:	6922      	ldr	r2, [r4, #16]
 8003370:	b942      	cbnz	r2, 8003384 <__swsetup_r+0xa4>
 8003372:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003376:	d1c5      	bne.n	8003304 <__swsetup_r+0x24>
 8003378:	bd38      	pop	{r3, r4, r5, pc}
 800337a:	0799      	lsls	r1, r3, #30
 800337c:	bf58      	it	pl
 800337e:	6962      	ldrpl	r2, [r4, #20]
 8003380:	60a2      	str	r2, [r4, #8]
 8003382:	e7f4      	b.n	800336e <__swsetup_r+0x8e>
 8003384:	2000      	movs	r0, #0
 8003386:	e7f7      	b.n	8003378 <__swsetup_r+0x98>
 8003388:	2000001c 	.word	0x2000001c

0800338c <memset>:
 800338c:	4402      	add	r2, r0
 800338e:	4603      	mov	r3, r0
 8003390:	4293      	cmp	r3, r2
 8003392:	d100      	bne.n	8003396 <memset+0xa>
 8003394:	4770      	bx	lr
 8003396:	f803 1b01 	strb.w	r1, [r3], #1
 800339a:	e7f9      	b.n	8003390 <memset+0x4>

0800339c <_close_r>:
 800339c:	b538      	push	{r3, r4, r5, lr}
 800339e:	4d06      	ldr	r5, [pc, #24]	@ (80033b8 <_close_r+0x1c>)
 80033a0:	2300      	movs	r3, #0
 80033a2:	4604      	mov	r4, r0
 80033a4:	4608      	mov	r0, r1
 80033a6:	602b      	str	r3, [r5, #0]
 80033a8:	f7fd fdd4 	bl	8000f54 <_close>
 80033ac:	1c43      	adds	r3, r0, #1
 80033ae:	d102      	bne.n	80033b6 <_close_r+0x1a>
 80033b0:	682b      	ldr	r3, [r5, #0]
 80033b2:	b103      	cbz	r3, 80033b6 <_close_r+0x1a>
 80033b4:	6023      	str	r3, [r4, #0]
 80033b6:	bd38      	pop	{r3, r4, r5, pc}
 80033b8:	20000268 	.word	0x20000268

080033bc <_lseek_r>:
 80033bc:	b538      	push	{r3, r4, r5, lr}
 80033be:	4d07      	ldr	r5, [pc, #28]	@ (80033dc <_lseek_r+0x20>)
 80033c0:	4604      	mov	r4, r0
 80033c2:	4608      	mov	r0, r1
 80033c4:	4611      	mov	r1, r2
 80033c6:	2200      	movs	r2, #0
 80033c8:	602a      	str	r2, [r5, #0]
 80033ca:	461a      	mov	r2, r3
 80033cc:	f7fd fde9 	bl	8000fa2 <_lseek>
 80033d0:	1c43      	adds	r3, r0, #1
 80033d2:	d102      	bne.n	80033da <_lseek_r+0x1e>
 80033d4:	682b      	ldr	r3, [r5, #0]
 80033d6:	b103      	cbz	r3, 80033da <_lseek_r+0x1e>
 80033d8:	6023      	str	r3, [r4, #0]
 80033da:	bd38      	pop	{r3, r4, r5, pc}
 80033dc:	20000268 	.word	0x20000268

080033e0 <_read_r>:
 80033e0:	b538      	push	{r3, r4, r5, lr}
 80033e2:	4d07      	ldr	r5, [pc, #28]	@ (8003400 <_read_r+0x20>)
 80033e4:	4604      	mov	r4, r0
 80033e6:	4608      	mov	r0, r1
 80033e8:	4611      	mov	r1, r2
 80033ea:	2200      	movs	r2, #0
 80033ec:	602a      	str	r2, [r5, #0]
 80033ee:	461a      	mov	r2, r3
 80033f0:	f7fd fd77 	bl	8000ee2 <_read>
 80033f4:	1c43      	adds	r3, r0, #1
 80033f6:	d102      	bne.n	80033fe <_read_r+0x1e>
 80033f8:	682b      	ldr	r3, [r5, #0]
 80033fa:	b103      	cbz	r3, 80033fe <_read_r+0x1e>
 80033fc:	6023      	str	r3, [r4, #0]
 80033fe:	bd38      	pop	{r3, r4, r5, pc}
 8003400:	20000268 	.word	0x20000268

08003404 <_write_r>:
 8003404:	b538      	push	{r3, r4, r5, lr}
 8003406:	4d07      	ldr	r5, [pc, #28]	@ (8003424 <_write_r+0x20>)
 8003408:	4604      	mov	r4, r0
 800340a:	4608      	mov	r0, r1
 800340c:	4611      	mov	r1, r2
 800340e:	2200      	movs	r2, #0
 8003410:	602a      	str	r2, [r5, #0]
 8003412:	461a      	mov	r2, r3
 8003414:	f7fd fd82 	bl	8000f1c <_write>
 8003418:	1c43      	adds	r3, r0, #1
 800341a:	d102      	bne.n	8003422 <_write_r+0x1e>
 800341c:	682b      	ldr	r3, [r5, #0]
 800341e:	b103      	cbz	r3, 8003422 <_write_r+0x1e>
 8003420:	6023      	str	r3, [r4, #0]
 8003422:	bd38      	pop	{r3, r4, r5, pc}
 8003424:	20000268 	.word	0x20000268

08003428 <__errno>:
 8003428:	4b01      	ldr	r3, [pc, #4]	@ (8003430 <__errno+0x8>)
 800342a:	6818      	ldr	r0, [r3, #0]
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	2000001c 	.word	0x2000001c

08003434 <__libc_init_array>:
 8003434:	b570      	push	{r4, r5, r6, lr}
 8003436:	4d0d      	ldr	r5, [pc, #52]	@ (800346c <__libc_init_array+0x38>)
 8003438:	4c0d      	ldr	r4, [pc, #52]	@ (8003470 <__libc_init_array+0x3c>)
 800343a:	1b64      	subs	r4, r4, r5
 800343c:	10a4      	asrs	r4, r4, #2
 800343e:	2600      	movs	r6, #0
 8003440:	42a6      	cmp	r6, r4
 8003442:	d109      	bne.n	8003458 <__libc_init_array+0x24>
 8003444:	4d0b      	ldr	r5, [pc, #44]	@ (8003474 <__libc_init_array+0x40>)
 8003446:	4c0c      	ldr	r4, [pc, #48]	@ (8003478 <__libc_init_array+0x44>)
 8003448:	f000 fd22 	bl	8003e90 <_init>
 800344c:	1b64      	subs	r4, r4, r5
 800344e:	10a4      	asrs	r4, r4, #2
 8003450:	2600      	movs	r6, #0
 8003452:	42a6      	cmp	r6, r4
 8003454:	d105      	bne.n	8003462 <__libc_init_array+0x2e>
 8003456:	bd70      	pop	{r4, r5, r6, pc}
 8003458:	f855 3b04 	ldr.w	r3, [r5], #4
 800345c:	4798      	blx	r3
 800345e:	3601      	adds	r6, #1
 8003460:	e7ee      	b.n	8003440 <__libc_init_array+0xc>
 8003462:	f855 3b04 	ldr.w	r3, [r5], #4
 8003466:	4798      	blx	r3
 8003468:	3601      	adds	r6, #1
 800346a:	e7f2      	b.n	8003452 <__libc_init_array+0x1e>
 800346c:	08003f8c 	.word	0x08003f8c
 8003470:	08003f8c 	.word	0x08003f8c
 8003474:	08003f8c 	.word	0x08003f8c
 8003478:	08003f90 	.word	0x08003f90

0800347c <__retarget_lock_init_recursive>:
 800347c:	4770      	bx	lr

0800347e <__retarget_lock_acquire_recursive>:
 800347e:	4770      	bx	lr

08003480 <__retarget_lock_release_recursive>:
 8003480:	4770      	bx	lr
	...

08003484 <_free_r>:
 8003484:	b538      	push	{r3, r4, r5, lr}
 8003486:	4605      	mov	r5, r0
 8003488:	2900      	cmp	r1, #0
 800348a:	d041      	beq.n	8003510 <_free_r+0x8c>
 800348c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003490:	1f0c      	subs	r4, r1, #4
 8003492:	2b00      	cmp	r3, #0
 8003494:	bfb8      	it	lt
 8003496:	18e4      	addlt	r4, r4, r3
 8003498:	f000 f8e0 	bl	800365c <__malloc_lock>
 800349c:	4a1d      	ldr	r2, [pc, #116]	@ (8003514 <_free_r+0x90>)
 800349e:	6813      	ldr	r3, [r2, #0]
 80034a0:	b933      	cbnz	r3, 80034b0 <_free_r+0x2c>
 80034a2:	6063      	str	r3, [r4, #4]
 80034a4:	6014      	str	r4, [r2, #0]
 80034a6:	4628      	mov	r0, r5
 80034a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80034ac:	f000 b8dc 	b.w	8003668 <__malloc_unlock>
 80034b0:	42a3      	cmp	r3, r4
 80034b2:	d908      	bls.n	80034c6 <_free_r+0x42>
 80034b4:	6820      	ldr	r0, [r4, #0]
 80034b6:	1821      	adds	r1, r4, r0
 80034b8:	428b      	cmp	r3, r1
 80034ba:	bf01      	itttt	eq
 80034bc:	6819      	ldreq	r1, [r3, #0]
 80034be:	685b      	ldreq	r3, [r3, #4]
 80034c0:	1809      	addeq	r1, r1, r0
 80034c2:	6021      	streq	r1, [r4, #0]
 80034c4:	e7ed      	b.n	80034a2 <_free_r+0x1e>
 80034c6:	461a      	mov	r2, r3
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	b10b      	cbz	r3, 80034d0 <_free_r+0x4c>
 80034cc:	42a3      	cmp	r3, r4
 80034ce:	d9fa      	bls.n	80034c6 <_free_r+0x42>
 80034d0:	6811      	ldr	r1, [r2, #0]
 80034d2:	1850      	adds	r0, r2, r1
 80034d4:	42a0      	cmp	r0, r4
 80034d6:	d10b      	bne.n	80034f0 <_free_r+0x6c>
 80034d8:	6820      	ldr	r0, [r4, #0]
 80034da:	4401      	add	r1, r0
 80034dc:	1850      	adds	r0, r2, r1
 80034de:	4283      	cmp	r3, r0
 80034e0:	6011      	str	r1, [r2, #0]
 80034e2:	d1e0      	bne.n	80034a6 <_free_r+0x22>
 80034e4:	6818      	ldr	r0, [r3, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	6053      	str	r3, [r2, #4]
 80034ea:	4408      	add	r0, r1
 80034ec:	6010      	str	r0, [r2, #0]
 80034ee:	e7da      	b.n	80034a6 <_free_r+0x22>
 80034f0:	d902      	bls.n	80034f8 <_free_r+0x74>
 80034f2:	230c      	movs	r3, #12
 80034f4:	602b      	str	r3, [r5, #0]
 80034f6:	e7d6      	b.n	80034a6 <_free_r+0x22>
 80034f8:	6820      	ldr	r0, [r4, #0]
 80034fa:	1821      	adds	r1, r4, r0
 80034fc:	428b      	cmp	r3, r1
 80034fe:	bf04      	itt	eq
 8003500:	6819      	ldreq	r1, [r3, #0]
 8003502:	685b      	ldreq	r3, [r3, #4]
 8003504:	6063      	str	r3, [r4, #4]
 8003506:	bf04      	itt	eq
 8003508:	1809      	addeq	r1, r1, r0
 800350a:	6021      	streq	r1, [r4, #0]
 800350c:	6054      	str	r4, [r2, #4]
 800350e:	e7ca      	b.n	80034a6 <_free_r+0x22>
 8003510:	bd38      	pop	{r3, r4, r5, pc}
 8003512:	bf00      	nop
 8003514:	20000274 	.word	0x20000274

08003518 <sbrk_aligned>:
 8003518:	b570      	push	{r4, r5, r6, lr}
 800351a:	4e0f      	ldr	r6, [pc, #60]	@ (8003558 <sbrk_aligned+0x40>)
 800351c:	460c      	mov	r4, r1
 800351e:	6831      	ldr	r1, [r6, #0]
 8003520:	4605      	mov	r5, r0
 8003522:	b911      	cbnz	r1, 800352a <sbrk_aligned+0x12>
 8003524:	f000 fca4 	bl	8003e70 <_sbrk_r>
 8003528:	6030      	str	r0, [r6, #0]
 800352a:	4621      	mov	r1, r4
 800352c:	4628      	mov	r0, r5
 800352e:	f000 fc9f 	bl	8003e70 <_sbrk_r>
 8003532:	1c43      	adds	r3, r0, #1
 8003534:	d103      	bne.n	800353e <sbrk_aligned+0x26>
 8003536:	f04f 34ff 	mov.w	r4, #4294967295
 800353a:	4620      	mov	r0, r4
 800353c:	bd70      	pop	{r4, r5, r6, pc}
 800353e:	1cc4      	adds	r4, r0, #3
 8003540:	f024 0403 	bic.w	r4, r4, #3
 8003544:	42a0      	cmp	r0, r4
 8003546:	d0f8      	beq.n	800353a <sbrk_aligned+0x22>
 8003548:	1a21      	subs	r1, r4, r0
 800354a:	4628      	mov	r0, r5
 800354c:	f000 fc90 	bl	8003e70 <_sbrk_r>
 8003550:	3001      	adds	r0, #1
 8003552:	d1f2      	bne.n	800353a <sbrk_aligned+0x22>
 8003554:	e7ef      	b.n	8003536 <sbrk_aligned+0x1e>
 8003556:	bf00      	nop
 8003558:	20000270 	.word	0x20000270

0800355c <_malloc_r>:
 800355c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003560:	1ccd      	adds	r5, r1, #3
 8003562:	f025 0503 	bic.w	r5, r5, #3
 8003566:	3508      	adds	r5, #8
 8003568:	2d0c      	cmp	r5, #12
 800356a:	bf38      	it	cc
 800356c:	250c      	movcc	r5, #12
 800356e:	2d00      	cmp	r5, #0
 8003570:	4606      	mov	r6, r0
 8003572:	db01      	blt.n	8003578 <_malloc_r+0x1c>
 8003574:	42a9      	cmp	r1, r5
 8003576:	d904      	bls.n	8003582 <_malloc_r+0x26>
 8003578:	230c      	movs	r3, #12
 800357a:	6033      	str	r3, [r6, #0]
 800357c:	2000      	movs	r0, #0
 800357e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003582:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003658 <_malloc_r+0xfc>
 8003586:	f000 f869 	bl	800365c <__malloc_lock>
 800358a:	f8d8 3000 	ldr.w	r3, [r8]
 800358e:	461c      	mov	r4, r3
 8003590:	bb44      	cbnz	r4, 80035e4 <_malloc_r+0x88>
 8003592:	4629      	mov	r1, r5
 8003594:	4630      	mov	r0, r6
 8003596:	f7ff ffbf 	bl	8003518 <sbrk_aligned>
 800359a:	1c43      	adds	r3, r0, #1
 800359c:	4604      	mov	r4, r0
 800359e:	d158      	bne.n	8003652 <_malloc_r+0xf6>
 80035a0:	f8d8 4000 	ldr.w	r4, [r8]
 80035a4:	4627      	mov	r7, r4
 80035a6:	2f00      	cmp	r7, #0
 80035a8:	d143      	bne.n	8003632 <_malloc_r+0xd6>
 80035aa:	2c00      	cmp	r4, #0
 80035ac:	d04b      	beq.n	8003646 <_malloc_r+0xea>
 80035ae:	6823      	ldr	r3, [r4, #0]
 80035b0:	4639      	mov	r1, r7
 80035b2:	4630      	mov	r0, r6
 80035b4:	eb04 0903 	add.w	r9, r4, r3
 80035b8:	f000 fc5a 	bl	8003e70 <_sbrk_r>
 80035bc:	4581      	cmp	r9, r0
 80035be:	d142      	bne.n	8003646 <_malloc_r+0xea>
 80035c0:	6821      	ldr	r1, [r4, #0]
 80035c2:	1a6d      	subs	r5, r5, r1
 80035c4:	4629      	mov	r1, r5
 80035c6:	4630      	mov	r0, r6
 80035c8:	f7ff ffa6 	bl	8003518 <sbrk_aligned>
 80035cc:	3001      	adds	r0, #1
 80035ce:	d03a      	beq.n	8003646 <_malloc_r+0xea>
 80035d0:	6823      	ldr	r3, [r4, #0]
 80035d2:	442b      	add	r3, r5
 80035d4:	6023      	str	r3, [r4, #0]
 80035d6:	f8d8 3000 	ldr.w	r3, [r8]
 80035da:	685a      	ldr	r2, [r3, #4]
 80035dc:	bb62      	cbnz	r2, 8003638 <_malloc_r+0xdc>
 80035de:	f8c8 7000 	str.w	r7, [r8]
 80035e2:	e00f      	b.n	8003604 <_malloc_r+0xa8>
 80035e4:	6822      	ldr	r2, [r4, #0]
 80035e6:	1b52      	subs	r2, r2, r5
 80035e8:	d420      	bmi.n	800362c <_malloc_r+0xd0>
 80035ea:	2a0b      	cmp	r2, #11
 80035ec:	d917      	bls.n	800361e <_malloc_r+0xc2>
 80035ee:	1961      	adds	r1, r4, r5
 80035f0:	42a3      	cmp	r3, r4
 80035f2:	6025      	str	r5, [r4, #0]
 80035f4:	bf18      	it	ne
 80035f6:	6059      	strne	r1, [r3, #4]
 80035f8:	6863      	ldr	r3, [r4, #4]
 80035fa:	bf08      	it	eq
 80035fc:	f8c8 1000 	streq.w	r1, [r8]
 8003600:	5162      	str	r2, [r4, r5]
 8003602:	604b      	str	r3, [r1, #4]
 8003604:	4630      	mov	r0, r6
 8003606:	f000 f82f 	bl	8003668 <__malloc_unlock>
 800360a:	f104 000b 	add.w	r0, r4, #11
 800360e:	1d23      	adds	r3, r4, #4
 8003610:	f020 0007 	bic.w	r0, r0, #7
 8003614:	1ac2      	subs	r2, r0, r3
 8003616:	bf1c      	itt	ne
 8003618:	1a1b      	subne	r3, r3, r0
 800361a:	50a3      	strne	r3, [r4, r2]
 800361c:	e7af      	b.n	800357e <_malloc_r+0x22>
 800361e:	6862      	ldr	r2, [r4, #4]
 8003620:	42a3      	cmp	r3, r4
 8003622:	bf0c      	ite	eq
 8003624:	f8c8 2000 	streq.w	r2, [r8]
 8003628:	605a      	strne	r2, [r3, #4]
 800362a:	e7eb      	b.n	8003604 <_malloc_r+0xa8>
 800362c:	4623      	mov	r3, r4
 800362e:	6864      	ldr	r4, [r4, #4]
 8003630:	e7ae      	b.n	8003590 <_malloc_r+0x34>
 8003632:	463c      	mov	r4, r7
 8003634:	687f      	ldr	r7, [r7, #4]
 8003636:	e7b6      	b.n	80035a6 <_malloc_r+0x4a>
 8003638:	461a      	mov	r2, r3
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	42a3      	cmp	r3, r4
 800363e:	d1fb      	bne.n	8003638 <_malloc_r+0xdc>
 8003640:	2300      	movs	r3, #0
 8003642:	6053      	str	r3, [r2, #4]
 8003644:	e7de      	b.n	8003604 <_malloc_r+0xa8>
 8003646:	230c      	movs	r3, #12
 8003648:	6033      	str	r3, [r6, #0]
 800364a:	4630      	mov	r0, r6
 800364c:	f000 f80c 	bl	8003668 <__malloc_unlock>
 8003650:	e794      	b.n	800357c <_malloc_r+0x20>
 8003652:	6005      	str	r5, [r0, #0]
 8003654:	e7d6      	b.n	8003604 <_malloc_r+0xa8>
 8003656:	bf00      	nop
 8003658:	20000274 	.word	0x20000274

0800365c <__malloc_lock>:
 800365c:	4801      	ldr	r0, [pc, #4]	@ (8003664 <__malloc_lock+0x8>)
 800365e:	f7ff bf0e 	b.w	800347e <__retarget_lock_acquire_recursive>
 8003662:	bf00      	nop
 8003664:	2000026c 	.word	0x2000026c

08003668 <__malloc_unlock>:
 8003668:	4801      	ldr	r0, [pc, #4]	@ (8003670 <__malloc_unlock+0x8>)
 800366a:	f7ff bf09 	b.w	8003480 <__retarget_lock_release_recursive>
 800366e:	bf00      	nop
 8003670:	2000026c 	.word	0x2000026c

08003674 <__sfputc_r>:
 8003674:	6893      	ldr	r3, [r2, #8]
 8003676:	3b01      	subs	r3, #1
 8003678:	2b00      	cmp	r3, #0
 800367a:	b410      	push	{r4}
 800367c:	6093      	str	r3, [r2, #8]
 800367e:	da08      	bge.n	8003692 <__sfputc_r+0x1e>
 8003680:	6994      	ldr	r4, [r2, #24]
 8003682:	42a3      	cmp	r3, r4
 8003684:	db01      	blt.n	800368a <__sfputc_r+0x16>
 8003686:	290a      	cmp	r1, #10
 8003688:	d103      	bne.n	8003692 <__sfputc_r+0x1e>
 800368a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800368e:	f7ff bde8 	b.w	8003262 <__swbuf_r>
 8003692:	6813      	ldr	r3, [r2, #0]
 8003694:	1c58      	adds	r0, r3, #1
 8003696:	6010      	str	r0, [r2, #0]
 8003698:	7019      	strb	r1, [r3, #0]
 800369a:	4608      	mov	r0, r1
 800369c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80036a0:	4770      	bx	lr

080036a2 <__sfputs_r>:
 80036a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036a4:	4606      	mov	r6, r0
 80036a6:	460f      	mov	r7, r1
 80036a8:	4614      	mov	r4, r2
 80036aa:	18d5      	adds	r5, r2, r3
 80036ac:	42ac      	cmp	r4, r5
 80036ae:	d101      	bne.n	80036b4 <__sfputs_r+0x12>
 80036b0:	2000      	movs	r0, #0
 80036b2:	e007      	b.n	80036c4 <__sfputs_r+0x22>
 80036b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036b8:	463a      	mov	r2, r7
 80036ba:	4630      	mov	r0, r6
 80036bc:	f7ff ffda 	bl	8003674 <__sfputc_r>
 80036c0:	1c43      	adds	r3, r0, #1
 80036c2:	d1f3      	bne.n	80036ac <__sfputs_r+0xa>
 80036c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080036c8 <_vfiprintf_r>:
 80036c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036cc:	460d      	mov	r5, r1
 80036ce:	b09d      	sub	sp, #116	@ 0x74
 80036d0:	4614      	mov	r4, r2
 80036d2:	4698      	mov	r8, r3
 80036d4:	4606      	mov	r6, r0
 80036d6:	b118      	cbz	r0, 80036e0 <_vfiprintf_r+0x18>
 80036d8:	6a03      	ldr	r3, [r0, #32]
 80036da:	b90b      	cbnz	r3, 80036e0 <_vfiprintf_r+0x18>
 80036dc:	f7ff fcd8 	bl	8003090 <__sinit>
 80036e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80036e2:	07d9      	lsls	r1, r3, #31
 80036e4:	d405      	bmi.n	80036f2 <_vfiprintf_r+0x2a>
 80036e6:	89ab      	ldrh	r3, [r5, #12]
 80036e8:	059a      	lsls	r2, r3, #22
 80036ea:	d402      	bmi.n	80036f2 <_vfiprintf_r+0x2a>
 80036ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80036ee:	f7ff fec6 	bl	800347e <__retarget_lock_acquire_recursive>
 80036f2:	89ab      	ldrh	r3, [r5, #12]
 80036f4:	071b      	lsls	r3, r3, #28
 80036f6:	d501      	bpl.n	80036fc <_vfiprintf_r+0x34>
 80036f8:	692b      	ldr	r3, [r5, #16]
 80036fa:	b99b      	cbnz	r3, 8003724 <_vfiprintf_r+0x5c>
 80036fc:	4629      	mov	r1, r5
 80036fe:	4630      	mov	r0, r6
 8003700:	f7ff fdee 	bl	80032e0 <__swsetup_r>
 8003704:	b170      	cbz	r0, 8003724 <_vfiprintf_r+0x5c>
 8003706:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003708:	07dc      	lsls	r4, r3, #31
 800370a:	d504      	bpl.n	8003716 <_vfiprintf_r+0x4e>
 800370c:	f04f 30ff 	mov.w	r0, #4294967295
 8003710:	b01d      	add	sp, #116	@ 0x74
 8003712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003716:	89ab      	ldrh	r3, [r5, #12]
 8003718:	0598      	lsls	r0, r3, #22
 800371a:	d4f7      	bmi.n	800370c <_vfiprintf_r+0x44>
 800371c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800371e:	f7ff feaf 	bl	8003480 <__retarget_lock_release_recursive>
 8003722:	e7f3      	b.n	800370c <_vfiprintf_r+0x44>
 8003724:	2300      	movs	r3, #0
 8003726:	9309      	str	r3, [sp, #36]	@ 0x24
 8003728:	2320      	movs	r3, #32
 800372a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800372e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003732:	2330      	movs	r3, #48	@ 0x30
 8003734:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80038e4 <_vfiprintf_r+0x21c>
 8003738:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800373c:	f04f 0901 	mov.w	r9, #1
 8003740:	4623      	mov	r3, r4
 8003742:	469a      	mov	sl, r3
 8003744:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003748:	b10a      	cbz	r2, 800374e <_vfiprintf_r+0x86>
 800374a:	2a25      	cmp	r2, #37	@ 0x25
 800374c:	d1f9      	bne.n	8003742 <_vfiprintf_r+0x7a>
 800374e:	ebba 0b04 	subs.w	fp, sl, r4
 8003752:	d00b      	beq.n	800376c <_vfiprintf_r+0xa4>
 8003754:	465b      	mov	r3, fp
 8003756:	4622      	mov	r2, r4
 8003758:	4629      	mov	r1, r5
 800375a:	4630      	mov	r0, r6
 800375c:	f7ff ffa1 	bl	80036a2 <__sfputs_r>
 8003760:	3001      	adds	r0, #1
 8003762:	f000 80a7 	beq.w	80038b4 <_vfiprintf_r+0x1ec>
 8003766:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003768:	445a      	add	r2, fp
 800376a:	9209      	str	r2, [sp, #36]	@ 0x24
 800376c:	f89a 3000 	ldrb.w	r3, [sl]
 8003770:	2b00      	cmp	r3, #0
 8003772:	f000 809f 	beq.w	80038b4 <_vfiprintf_r+0x1ec>
 8003776:	2300      	movs	r3, #0
 8003778:	f04f 32ff 	mov.w	r2, #4294967295
 800377c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003780:	f10a 0a01 	add.w	sl, sl, #1
 8003784:	9304      	str	r3, [sp, #16]
 8003786:	9307      	str	r3, [sp, #28]
 8003788:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800378c:	931a      	str	r3, [sp, #104]	@ 0x68
 800378e:	4654      	mov	r4, sl
 8003790:	2205      	movs	r2, #5
 8003792:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003796:	4853      	ldr	r0, [pc, #332]	@ (80038e4 <_vfiprintf_r+0x21c>)
 8003798:	f7fc fd22 	bl	80001e0 <memchr>
 800379c:	9a04      	ldr	r2, [sp, #16]
 800379e:	b9d8      	cbnz	r0, 80037d8 <_vfiprintf_r+0x110>
 80037a0:	06d1      	lsls	r1, r2, #27
 80037a2:	bf44      	itt	mi
 80037a4:	2320      	movmi	r3, #32
 80037a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80037aa:	0713      	lsls	r3, r2, #28
 80037ac:	bf44      	itt	mi
 80037ae:	232b      	movmi	r3, #43	@ 0x2b
 80037b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80037b4:	f89a 3000 	ldrb.w	r3, [sl]
 80037b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80037ba:	d015      	beq.n	80037e8 <_vfiprintf_r+0x120>
 80037bc:	9a07      	ldr	r2, [sp, #28]
 80037be:	4654      	mov	r4, sl
 80037c0:	2000      	movs	r0, #0
 80037c2:	f04f 0c0a 	mov.w	ip, #10
 80037c6:	4621      	mov	r1, r4
 80037c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80037cc:	3b30      	subs	r3, #48	@ 0x30
 80037ce:	2b09      	cmp	r3, #9
 80037d0:	d94b      	bls.n	800386a <_vfiprintf_r+0x1a2>
 80037d2:	b1b0      	cbz	r0, 8003802 <_vfiprintf_r+0x13a>
 80037d4:	9207      	str	r2, [sp, #28]
 80037d6:	e014      	b.n	8003802 <_vfiprintf_r+0x13a>
 80037d8:	eba0 0308 	sub.w	r3, r0, r8
 80037dc:	fa09 f303 	lsl.w	r3, r9, r3
 80037e0:	4313      	orrs	r3, r2
 80037e2:	9304      	str	r3, [sp, #16]
 80037e4:	46a2      	mov	sl, r4
 80037e6:	e7d2      	b.n	800378e <_vfiprintf_r+0xc6>
 80037e8:	9b03      	ldr	r3, [sp, #12]
 80037ea:	1d19      	adds	r1, r3, #4
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	9103      	str	r1, [sp, #12]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	bfbb      	ittet	lt
 80037f4:	425b      	neglt	r3, r3
 80037f6:	f042 0202 	orrlt.w	r2, r2, #2
 80037fa:	9307      	strge	r3, [sp, #28]
 80037fc:	9307      	strlt	r3, [sp, #28]
 80037fe:	bfb8      	it	lt
 8003800:	9204      	strlt	r2, [sp, #16]
 8003802:	7823      	ldrb	r3, [r4, #0]
 8003804:	2b2e      	cmp	r3, #46	@ 0x2e
 8003806:	d10a      	bne.n	800381e <_vfiprintf_r+0x156>
 8003808:	7863      	ldrb	r3, [r4, #1]
 800380a:	2b2a      	cmp	r3, #42	@ 0x2a
 800380c:	d132      	bne.n	8003874 <_vfiprintf_r+0x1ac>
 800380e:	9b03      	ldr	r3, [sp, #12]
 8003810:	1d1a      	adds	r2, r3, #4
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	9203      	str	r2, [sp, #12]
 8003816:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800381a:	3402      	adds	r4, #2
 800381c:	9305      	str	r3, [sp, #20]
 800381e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80038f4 <_vfiprintf_r+0x22c>
 8003822:	7821      	ldrb	r1, [r4, #0]
 8003824:	2203      	movs	r2, #3
 8003826:	4650      	mov	r0, sl
 8003828:	f7fc fcda 	bl	80001e0 <memchr>
 800382c:	b138      	cbz	r0, 800383e <_vfiprintf_r+0x176>
 800382e:	9b04      	ldr	r3, [sp, #16]
 8003830:	eba0 000a 	sub.w	r0, r0, sl
 8003834:	2240      	movs	r2, #64	@ 0x40
 8003836:	4082      	lsls	r2, r0
 8003838:	4313      	orrs	r3, r2
 800383a:	3401      	adds	r4, #1
 800383c:	9304      	str	r3, [sp, #16]
 800383e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003842:	4829      	ldr	r0, [pc, #164]	@ (80038e8 <_vfiprintf_r+0x220>)
 8003844:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003848:	2206      	movs	r2, #6
 800384a:	f7fc fcc9 	bl	80001e0 <memchr>
 800384e:	2800      	cmp	r0, #0
 8003850:	d03f      	beq.n	80038d2 <_vfiprintf_r+0x20a>
 8003852:	4b26      	ldr	r3, [pc, #152]	@ (80038ec <_vfiprintf_r+0x224>)
 8003854:	bb1b      	cbnz	r3, 800389e <_vfiprintf_r+0x1d6>
 8003856:	9b03      	ldr	r3, [sp, #12]
 8003858:	3307      	adds	r3, #7
 800385a:	f023 0307 	bic.w	r3, r3, #7
 800385e:	3308      	adds	r3, #8
 8003860:	9303      	str	r3, [sp, #12]
 8003862:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003864:	443b      	add	r3, r7
 8003866:	9309      	str	r3, [sp, #36]	@ 0x24
 8003868:	e76a      	b.n	8003740 <_vfiprintf_r+0x78>
 800386a:	fb0c 3202 	mla	r2, ip, r2, r3
 800386e:	460c      	mov	r4, r1
 8003870:	2001      	movs	r0, #1
 8003872:	e7a8      	b.n	80037c6 <_vfiprintf_r+0xfe>
 8003874:	2300      	movs	r3, #0
 8003876:	3401      	adds	r4, #1
 8003878:	9305      	str	r3, [sp, #20]
 800387a:	4619      	mov	r1, r3
 800387c:	f04f 0c0a 	mov.w	ip, #10
 8003880:	4620      	mov	r0, r4
 8003882:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003886:	3a30      	subs	r2, #48	@ 0x30
 8003888:	2a09      	cmp	r2, #9
 800388a:	d903      	bls.n	8003894 <_vfiprintf_r+0x1cc>
 800388c:	2b00      	cmp	r3, #0
 800388e:	d0c6      	beq.n	800381e <_vfiprintf_r+0x156>
 8003890:	9105      	str	r1, [sp, #20]
 8003892:	e7c4      	b.n	800381e <_vfiprintf_r+0x156>
 8003894:	fb0c 2101 	mla	r1, ip, r1, r2
 8003898:	4604      	mov	r4, r0
 800389a:	2301      	movs	r3, #1
 800389c:	e7f0      	b.n	8003880 <_vfiprintf_r+0x1b8>
 800389e:	ab03      	add	r3, sp, #12
 80038a0:	9300      	str	r3, [sp, #0]
 80038a2:	462a      	mov	r2, r5
 80038a4:	4b12      	ldr	r3, [pc, #72]	@ (80038f0 <_vfiprintf_r+0x228>)
 80038a6:	a904      	add	r1, sp, #16
 80038a8:	4630      	mov	r0, r6
 80038aa:	f3af 8000 	nop.w
 80038ae:	4607      	mov	r7, r0
 80038b0:	1c78      	adds	r0, r7, #1
 80038b2:	d1d6      	bne.n	8003862 <_vfiprintf_r+0x19a>
 80038b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80038b6:	07d9      	lsls	r1, r3, #31
 80038b8:	d405      	bmi.n	80038c6 <_vfiprintf_r+0x1fe>
 80038ba:	89ab      	ldrh	r3, [r5, #12]
 80038bc:	059a      	lsls	r2, r3, #22
 80038be:	d402      	bmi.n	80038c6 <_vfiprintf_r+0x1fe>
 80038c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80038c2:	f7ff fddd 	bl	8003480 <__retarget_lock_release_recursive>
 80038c6:	89ab      	ldrh	r3, [r5, #12]
 80038c8:	065b      	lsls	r3, r3, #25
 80038ca:	f53f af1f 	bmi.w	800370c <_vfiprintf_r+0x44>
 80038ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80038d0:	e71e      	b.n	8003710 <_vfiprintf_r+0x48>
 80038d2:	ab03      	add	r3, sp, #12
 80038d4:	9300      	str	r3, [sp, #0]
 80038d6:	462a      	mov	r2, r5
 80038d8:	4b05      	ldr	r3, [pc, #20]	@ (80038f0 <_vfiprintf_r+0x228>)
 80038da:	a904      	add	r1, sp, #16
 80038dc:	4630      	mov	r0, r6
 80038de:	f000 f879 	bl	80039d4 <_printf_i>
 80038e2:	e7e4      	b.n	80038ae <_vfiprintf_r+0x1e6>
 80038e4:	08003f50 	.word	0x08003f50
 80038e8:	08003f5a 	.word	0x08003f5a
 80038ec:	00000000 	.word	0x00000000
 80038f0:	080036a3 	.word	0x080036a3
 80038f4:	08003f56 	.word	0x08003f56

080038f8 <_printf_common>:
 80038f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038fc:	4616      	mov	r6, r2
 80038fe:	4698      	mov	r8, r3
 8003900:	688a      	ldr	r2, [r1, #8]
 8003902:	690b      	ldr	r3, [r1, #16]
 8003904:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003908:	4293      	cmp	r3, r2
 800390a:	bfb8      	it	lt
 800390c:	4613      	movlt	r3, r2
 800390e:	6033      	str	r3, [r6, #0]
 8003910:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003914:	4607      	mov	r7, r0
 8003916:	460c      	mov	r4, r1
 8003918:	b10a      	cbz	r2, 800391e <_printf_common+0x26>
 800391a:	3301      	adds	r3, #1
 800391c:	6033      	str	r3, [r6, #0]
 800391e:	6823      	ldr	r3, [r4, #0]
 8003920:	0699      	lsls	r1, r3, #26
 8003922:	bf42      	ittt	mi
 8003924:	6833      	ldrmi	r3, [r6, #0]
 8003926:	3302      	addmi	r3, #2
 8003928:	6033      	strmi	r3, [r6, #0]
 800392a:	6825      	ldr	r5, [r4, #0]
 800392c:	f015 0506 	ands.w	r5, r5, #6
 8003930:	d106      	bne.n	8003940 <_printf_common+0x48>
 8003932:	f104 0a19 	add.w	sl, r4, #25
 8003936:	68e3      	ldr	r3, [r4, #12]
 8003938:	6832      	ldr	r2, [r6, #0]
 800393a:	1a9b      	subs	r3, r3, r2
 800393c:	42ab      	cmp	r3, r5
 800393e:	dc26      	bgt.n	800398e <_printf_common+0x96>
 8003940:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003944:	6822      	ldr	r2, [r4, #0]
 8003946:	3b00      	subs	r3, #0
 8003948:	bf18      	it	ne
 800394a:	2301      	movne	r3, #1
 800394c:	0692      	lsls	r2, r2, #26
 800394e:	d42b      	bmi.n	80039a8 <_printf_common+0xb0>
 8003950:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003954:	4641      	mov	r1, r8
 8003956:	4638      	mov	r0, r7
 8003958:	47c8      	blx	r9
 800395a:	3001      	adds	r0, #1
 800395c:	d01e      	beq.n	800399c <_printf_common+0xa4>
 800395e:	6823      	ldr	r3, [r4, #0]
 8003960:	6922      	ldr	r2, [r4, #16]
 8003962:	f003 0306 	and.w	r3, r3, #6
 8003966:	2b04      	cmp	r3, #4
 8003968:	bf02      	ittt	eq
 800396a:	68e5      	ldreq	r5, [r4, #12]
 800396c:	6833      	ldreq	r3, [r6, #0]
 800396e:	1aed      	subeq	r5, r5, r3
 8003970:	68a3      	ldr	r3, [r4, #8]
 8003972:	bf0c      	ite	eq
 8003974:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003978:	2500      	movne	r5, #0
 800397a:	4293      	cmp	r3, r2
 800397c:	bfc4      	itt	gt
 800397e:	1a9b      	subgt	r3, r3, r2
 8003980:	18ed      	addgt	r5, r5, r3
 8003982:	2600      	movs	r6, #0
 8003984:	341a      	adds	r4, #26
 8003986:	42b5      	cmp	r5, r6
 8003988:	d11a      	bne.n	80039c0 <_printf_common+0xc8>
 800398a:	2000      	movs	r0, #0
 800398c:	e008      	b.n	80039a0 <_printf_common+0xa8>
 800398e:	2301      	movs	r3, #1
 8003990:	4652      	mov	r2, sl
 8003992:	4641      	mov	r1, r8
 8003994:	4638      	mov	r0, r7
 8003996:	47c8      	blx	r9
 8003998:	3001      	adds	r0, #1
 800399a:	d103      	bne.n	80039a4 <_printf_common+0xac>
 800399c:	f04f 30ff 	mov.w	r0, #4294967295
 80039a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039a4:	3501      	adds	r5, #1
 80039a6:	e7c6      	b.n	8003936 <_printf_common+0x3e>
 80039a8:	18e1      	adds	r1, r4, r3
 80039aa:	1c5a      	adds	r2, r3, #1
 80039ac:	2030      	movs	r0, #48	@ 0x30
 80039ae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80039b2:	4422      	add	r2, r4
 80039b4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80039b8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80039bc:	3302      	adds	r3, #2
 80039be:	e7c7      	b.n	8003950 <_printf_common+0x58>
 80039c0:	2301      	movs	r3, #1
 80039c2:	4622      	mov	r2, r4
 80039c4:	4641      	mov	r1, r8
 80039c6:	4638      	mov	r0, r7
 80039c8:	47c8      	blx	r9
 80039ca:	3001      	adds	r0, #1
 80039cc:	d0e6      	beq.n	800399c <_printf_common+0xa4>
 80039ce:	3601      	adds	r6, #1
 80039d0:	e7d9      	b.n	8003986 <_printf_common+0x8e>
	...

080039d4 <_printf_i>:
 80039d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80039d8:	7e0f      	ldrb	r7, [r1, #24]
 80039da:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80039dc:	2f78      	cmp	r7, #120	@ 0x78
 80039de:	4691      	mov	r9, r2
 80039e0:	4680      	mov	r8, r0
 80039e2:	460c      	mov	r4, r1
 80039e4:	469a      	mov	sl, r3
 80039e6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80039ea:	d807      	bhi.n	80039fc <_printf_i+0x28>
 80039ec:	2f62      	cmp	r7, #98	@ 0x62
 80039ee:	d80a      	bhi.n	8003a06 <_printf_i+0x32>
 80039f0:	2f00      	cmp	r7, #0
 80039f2:	f000 80d1 	beq.w	8003b98 <_printf_i+0x1c4>
 80039f6:	2f58      	cmp	r7, #88	@ 0x58
 80039f8:	f000 80b8 	beq.w	8003b6c <_printf_i+0x198>
 80039fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003a00:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003a04:	e03a      	b.n	8003a7c <_printf_i+0xa8>
 8003a06:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003a0a:	2b15      	cmp	r3, #21
 8003a0c:	d8f6      	bhi.n	80039fc <_printf_i+0x28>
 8003a0e:	a101      	add	r1, pc, #4	@ (adr r1, 8003a14 <_printf_i+0x40>)
 8003a10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003a14:	08003a6d 	.word	0x08003a6d
 8003a18:	08003a81 	.word	0x08003a81
 8003a1c:	080039fd 	.word	0x080039fd
 8003a20:	080039fd 	.word	0x080039fd
 8003a24:	080039fd 	.word	0x080039fd
 8003a28:	080039fd 	.word	0x080039fd
 8003a2c:	08003a81 	.word	0x08003a81
 8003a30:	080039fd 	.word	0x080039fd
 8003a34:	080039fd 	.word	0x080039fd
 8003a38:	080039fd 	.word	0x080039fd
 8003a3c:	080039fd 	.word	0x080039fd
 8003a40:	08003b7f 	.word	0x08003b7f
 8003a44:	08003aab 	.word	0x08003aab
 8003a48:	08003b39 	.word	0x08003b39
 8003a4c:	080039fd 	.word	0x080039fd
 8003a50:	080039fd 	.word	0x080039fd
 8003a54:	08003ba1 	.word	0x08003ba1
 8003a58:	080039fd 	.word	0x080039fd
 8003a5c:	08003aab 	.word	0x08003aab
 8003a60:	080039fd 	.word	0x080039fd
 8003a64:	080039fd 	.word	0x080039fd
 8003a68:	08003b41 	.word	0x08003b41
 8003a6c:	6833      	ldr	r3, [r6, #0]
 8003a6e:	1d1a      	adds	r2, r3, #4
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	6032      	str	r2, [r6, #0]
 8003a74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003a78:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e09c      	b.n	8003bba <_printf_i+0x1e6>
 8003a80:	6833      	ldr	r3, [r6, #0]
 8003a82:	6820      	ldr	r0, [r4, #0]
 8003a84:	1d19      	adds	r1, r3, #4
 8003a86:	6031      	str	r1, [r6, #0]
 8003a88:	0606      	lsls	r6, r0, #24
 8003a8a:	d501      	bpl.n	8003a90 <_printf_i+0xbc>
 8003a8c:	681d      	ldr	r5, [r3, #0]
 8003a8e:	e003      	b.n	8003a98 <_printf_i+0xc4>
 8003a90:	0645      	lsls	r5, r0, #25
 8003a92:	d5fb      	bpl.n	8003a8c <_printf_i+0xb8>
 8003a94:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003a98:	2d00      	cmp	r5, #0
 8003a9a:	da03      	bge.n	8003aa4 <_printf_i+0xd0>
 8003a9c:	232d      	movs	r3, #45	@ 0x2d
 8003a9e:	426d      	negs	r5, r5
 8003aa0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003aa4:	4858      	ldr	r0, [pc, #352]	@ (8003c08 <_printf_i+0x234>)
 8003aa6:	230a      	movs	r3, #10
 8003aa8:	e011      	b.n	8003ace <_printf_i+0xfa>
 8003aaa:	6821      	ldr	r1, [r4, #0]
 8003aac:	6833      	ldr	r3, [r6, #0]
 8003aae:	0608      	lsls	r0, r1, #24
 8003ab0:	f853 5b04 	ldr.w	r5, [r3], #4
 8003ab4:	d402      	bmi.n	8003abc <_printf_i+0xe8>
 8003ab6:	0649      	lsls	r1, r1, #25
 8003ab8:	bf48      	it	mi
 8003aba:	b2ad      	uxthmi	r5, r5
 8003abc:	2f6f      	cmp	r7, #111	@ 0x6f
 8003abe:	4852      	ldr	r0, [pc, #328]	@ (8003c08 <_printf_i+0x234>)
 8003ac0:	6033      	str	r3, [r6, #0]
 8003ac2:	bf14      	ite	ne
 8003ac4:	230a      	movne	r3, #10
 8003ac6:	2308      	moveq	r3, #8
 8003ac8:	2100      	movs	r1, #0
 8003aca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003ace:	6866      	ldr	r6, [r4, #4]
 8003ad0:	60a6      	str	r6, [r4, #8]
 8003ad2:	2e00      	cmp	r6, #0
 8003ad4:	db05      	blt.n	8003ae2 <_printf_i+0x10e>
 8003ad6:	6821      	ldr	r1, [r4, #0]
 8003ad8:	432e      	orrs	r6, r5
 8003ada:	f021 0104 	bic.w	r1, r1, #4
 8003ade:	6021      	str	r1, [r4, #0]
 8003ae0:	d04b      	beq.n	8003b7a <_printf_i+0x1a6>
 8003ae2:	4616      	mov	r6, r2
 8003ae4:	fbb5 f1f3 	udiv	r1, r5, r3
 8003ae8:	fb03 5711 	mls	r7, r3, r1, r5
 8003aec:	5dc7      	ldrb	r7, [r0, r7]
 8003aee:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003af2:	462f      	mov	r7, r5
 8003af4:	42bb      	cmp	r3, r7
 8003af6:	460d      	mov	r5, r1
 8003af8:	d9f4      	bls.n	8003ae4 <_printf_i+0x110>
 8003afa:	2b08      	cmp	r3, #8
 8003afc:	d10b      	bne.n	8003b16 <_printf_i+0x142>
 8003afe:	6823      	ldr	r3, [r4, #0]
 8003b00:	07df      	lsls	r7, r3, #31
 8003b02:	d508      	bpl.n	8003b16 <_printf_i+0x142>
 8003b04:	6923      	ldr	r3, [r4, #16]
 8003b06:	6861      	ldr	r1, [r4, #4]
 8003b08:	4299      	cmp	r1, r3
 8003b0a:	bfde      	ittt	le
 8003b0c:	2330      	movle	r3, #48	@ 0x30
 8003b0e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003b12:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003b16:	1b92      	subs	r2, r2, r6
 8003b18:	6122      	str	r2, [r4, #16]
 8003b1a:	f8cd a000 	str.w	sl, [sp]
 8003b1e:	464b      	mov	r3, r9
 8003b20:	aa03      	add	r2, sp, #12
 8003b22:	4621      	mov	r1, r4
 8003b24:	4640      	mov	r0, r8
 8003b26:	f7ff fee7 	bl	80038f8 <_printf_common>
 8003b2a:	3001      	adds	r0, #1
 8003b2c:	d14a      	bne.n	8003bc4 <_printf_i+0x1f0>
 8003b2e:	f04f 30ff 	mov.w	r0, #4294967295
 8003b32:	b004      	add	sp, #16
 8003b34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b38:	6823      	ldr	r3, [r4, #0]
 8003b3a:	f043 0320 	orr.w	r3, r3, #32
 8003b3e:	6023      	str	r3, [r4, #0]
 8003b40:	4832      	ldr	r0, [pc, #200]	@ (8003c0c <_printf_i+0x238>)
 8003b42:	2778      	movs	r7, #120	@ 0x78
 8003b44:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003b48:	6823      	ldr	r3, [r4, #0]
 8003b4a:	6831      	ldr	r1, [r6, #0]
 8003b4c:	061f      	lsls	r7, r3, #24
 8003b4e:	f851 5b04 	ldr.w	r5, [r1], #4
 8003b52:	d402      	bmi.n	8003b5a <_printf_i+0x186>
 8003b54:	065f      	lsls	r7, r3, #25
 8003b56:	bf48      	it	mi
 8003b58:	b2ad      	uxthmi	r5, r5
 8003b5a:	6031      	str	r1, [r6, #0]
 8003b5c:	07d9      	lsls	r1, r3, #31
 8003b5e:	bf44      	itt	mi
 8003b60:	f043 0320 	orrmi.w	r3, r3, #32
 8003b64:	6023      	strmi	r3, [r4, #0]
 8003b66:	b11d      	cbz	r5, 8003b70 <_printf_i+0x19c>
 8003b68:	2310      	movs	r3, #16
 8003b6a:	e7ad      	b.n	8003ac8 <_printf_i+0xf4>
 8003b6c:	4826      	ldr	r0, [pc, #152]	@ (8003c08 <_printf_i+0x234>)
 8003b6e:	e7e9      	b.n	8003b44 <_printf_i+0x170>
 8003b70:	6823      	ldr	r3, [r4, #0]
 8003b72:	f023 0320 	bic.w	r3, r3, #32
 8003b76:	6023      	str	r3, [r4, #0]
 8003b78:	e7f6      	b.n	8003b68 <_printf_i+0x194>
 8003b7a:	4616      	mov	r6, r2
 8003b7c:	e7bd      	b.n	8003afa <_printf_i+0x126>
 8003b7e:	6833      	ldr	r3, [r6, #0]
 8003b80:	6825      	ldr	r5, [r4, #0]
 8003b82:	6961      	ldr	r1, [r4, #20]
 8003b84:	1d18      	adds	r0, r3, #4
 8003b86:	6030      	str	r0, [r6, #0]
 8003b88:	062e      	lsls	r6, r5, #24
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	d501      	bpl.n	8003b92 <_printf_i+0x1be>
 8003b8e:	6019      	str	r1, [r3, #0]
 8003b90:	e002      	b.n	8003b98 <_printf_i+0x1c4>
 8003b92:	0668      	lsls	r0, r5, #25
 8003b94:	d5fb      	bpl.n	8003b8e <_printf_i+0x1ba>
 8003b96:	8019      	strh	r1, [r3, #0]
 8003b98:	2300      	movs	r3, #0
 8003b9a:	6123      	str	r3, [r4, #16]
 8003b9c:	4616      	mov	r6, r2
 8003b9e:	e7bc      	b.n	8003b1a <_printf_i+0x146>
 8003ba0:	6833      	ldr	r3, [r6, #0]
 8003ba2:	1d1a      	adds	r2, r3, #4
 8003ba4:	6032      	str	r2, [r6, #0]
 8003ba6:	681e      	ldr	r6, [r3, #0]
 8003ba8:	6862      	ldr	r2, [r4, #4]
 8003baa:	2100      	movs	r1, #0
 8003bac:	4630      	mov	r0, r6
 8003bae:	f7fc fb17 	bl	80001e0 <memchr>
 8003bb2:	b108      	cbz	r0, 8003bb8 <_printf_i+0x1e4>
 8003bb4:	1b80      	subs	r0, r0, r6
 8003bb6:	6060      	str	r0, [r4, #4]
 8003bb8:	6863      	ldr	r3, [r4, #4]
 8003bba:	6123      	str	r3, [r4, #16]
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003bc2:	e7aa      	b.n	8003b1a <_printf_i+0x146>
 8003bc4:	6923      	ldr	r3, [r4, #16]
 8003bc6:	4632      	mov	r2, r6
 8003bc8:	4649      	mov	r1, r9
 8003bca:	4640      	mov	r0, r8
 8003bcc:	47d0      	blx	sl
 8003bce:	3001      	adds	r0, #1
 8003bd0:	d0ad      	beq.n	8003b2e <_printf_i+0x15a>
 8003bd2:	6823      	ldr	r3, [r4, #0]
 8003bd4:	079b      	lsls	r3, r3, #30
 8003bd6:	d413      	bmi.n	8003c00 <_printf_i+0x22c>
 8003bd8:	68e0      	ldr	r0, [r4, #12]
 8003bda:	9b03      	ldr	r3, [sp, #12]
 8003bdc:	4298      	cmp	r0, r3
 8003bde:	bfb8      	it	lt
 8003be0:	4618      	movlt	r0, r3
 8003be2:	e7a6      	b.n	8003b32 <_printf_i+0x15e>
 8003be4:	2301      	movs	r3, #1
 8003be6:	4632      	mov	r2, r6
 8003be8:	4649      	mov	r1, r9
 8003bea:	4640      	mov	r0, r8
 8003bec:	47d0      	blx	sl
 8003bee:	3001      	adds	r0, #1
 8003bf0:	d09d      	beq.n	8003b2e <_printf_i+0x15a>
 8003bf2:	3501      	adds	r5, #1
 8003bf4:	68e3      	ldr	r3, [r4, #12]
 8003bf6:	9903      	ldr	r1, [sp, #12]
 8003bf8:	1a5b      	subs	r3, r3, r1
 8003bfa:	42ab      	cmp	r3, r5
 8003bfc:	dcf2      	bgt.n	8003be4 <_printf_i+0x210>
 8003bfe:	e7eb      	b.n	8003bd8 <_printf_i+0x204>
 8003c00:	2500      	movs	r5, #0
 8003c02:	f104 0619 	add.w	r6, r4, #25
 8003c06:	e7f5      	b.n	8003bf4 <_printf_i+0x220>
 8003c08:	08003f61 	.word	0x08003f61
 8003c0c:	08003f72 	.word	0x08003f72

08003c10 <__sflush_r>:
 8003c10:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c18:	0716      	lsls	r6, r2, #28
 8003c1a:	4605      	mov	r5, r0
 8003c1c:	460c      	mov	r4, r1
 8003c1e:	d454      	bmi.n	8003cca <__sflush_r+0xba>
 8003c20:	684b      	ldr	r3, [r1, #4]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	dc02      	bgt.n	8003c2c <__sflush_r+0x1c>
 8003c26:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	dd48      	ble.n	8003cbe <__sflush_r+0xae>
 8003c2c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003c2e:	2e00      	cmp	r6, #0
 8003c30:	d045      	beq.n	8003cbe <__sflush_r+0xae>
 8003c32:	2300      	movs	r3, #0
 8003c34:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003c38:	682f      	ldr	r7, [r5, #0]
 8003c3a:	6a21      	ldr	r1, [r4, #32]
 8003c3c:	602b      	str	r3, [r5, #0]
 8003c3e:	d030      	beq.n	8003ca2 <__sflush_r+0x92>
 8003c40:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003c42:	89a3      	ldrh	r3, [r4, #12]
 8003c44:	0759      	lsls	r1, r3, #29
 8003c46:	d505      	bpl.n	8003c54 <__sflush_r+0x44>
 8003c48:	6863      	ldr	r3, [r4, #4]
 8003c4a:	1ad2      	subs	r2, r2, r3
 8003c4c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003c4e:	b10b      	cbz	r3, 8003c54 <__sflush_r+0x44>
 8003c50:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003c52:	1ad2      	subs	r2, r2, r3
 8003c54:	2300      	movs	r3, #0
 8003c56:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003c58:	6a21      	ldr	r1, [r4, #32]
 8003c5a:	4628      	mov	r0, r5
 8003c5c:	47b0      	blx	r6
 8003c5e:	1c43      	adds	r3, r0, #1
 8003c60:	89a3      	ldrh	r3, [r4, #12]
 8003c62:	d106      	bne.n	8003c72 <__sflush_r+0x62>
 8003c64:	6829      	ldr	r1, [r5, #0]
 8003c66:	291d      	cmp	r1, #29
 8003c68:	d82b      	bhi.n	8003cc2 <__sflush_r+0xb2>
 8003c6a:	4a2a      	ldr	r2, [pc, #168]	@ (8003d14 <__sflush_r+0x104>)
 8003c6c:	40ca      	lsrs	r2, r1
 8003c6e:	07d6      	lsls	r6, r2, #31
 8003c70:	d527      	bpl.n	8003cc2 <__sflush_r+0xb2>
 8003c72:	2200      	movs	r2, #0
 8003c74:	6062      	str	r2, [r4, #4]
 8003c76:	04d9      	lsls	r1, r3, #19
 8003c78:	6922      	ldr	r2, [r4, #16]
 8003c7a:	6022      	str	r2, [r4, #0]
 8003c7c:	d504      	bpl.n	8003c88 <__sflush_r+0x78>
 8003c7e:	1c42      	adds	r2, r0, #1
 8003c80:	d101      	bne.n	8003c86 <__sflush_r+0x76>
 8003c82:	682b      	ldr	r3, [r5, #0]
 8003c84:	b903      	cbnz	r3, 8003c88 <__sflush_r+0x78>
 8003c86:	6560      	str	r0, [r4, #84]	@ 0x54
 8003c88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003c8a:	602f      	str	r7, [r5, #0]
 8003c8c:	b1b9      	cbz	r1, 8003cbe <__sflush_r+0xae>
 8003c8e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003c92:	4299      	cmp	r1, r3
 8003c94:	d002      	beq.n	8003c9c <__sflush_r+0x8c>
 8003c96:	4628      	mov	r0, r5
 8003c98:	f7ff fbf4 	bl	8003484 <_free_r>
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	6363      	str	r3, [r4, #52]	@ 0x34
 8003ca0:	e00d      	b.n	8003cbe <__sflush_r+0xae>
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	4628      	mov	r0, r5
 8003ca6:	47b0      	blx	r6
 8003ca8:	4602      	mov	r2, r0
 8003caa:	1c50      	adds	r0, r2, #1
 8003cac:	d1c9      	bne.n	8003c42 <__sflush_r+0x32>
 8003cae:	682b      	ldr	r3, [r5, #0]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d0c6      	beq.n	8003c42 <__sflush_r+0x32>
 8003cb4:	2b1d      	cmp	r3, #29
 8003cb6:	d001      	beq.n	8003cbc <__sflush_r+0xac>
 8003cb8:	2b16      	cmp	r3, #22
 8003cba:	d11e      	bne.n	8003cfa <__sflush_r+0xea>
 8003cbc:	602f      	str	r7, [r5, #0]
 8003cbe:	2000      	movs	r0, #0
 8003cc0:	e022      	b.n	8003d08 <__sflush_r+0xf8>
 8003cc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003cc6:	b21b      	sxth	r3, r3
 8003cc8:	e01b      	b.n	8003d02 <__sflush_r+0xf2>
 8003cca:	690f      	ldr	r7, [r1, #16]
 8003ccc:	2f00      	cmp	r7, #0
 8003cce:	d0f6      	beq.n	8003cbe <__sflush_r+0xae>
 8003cd0:	0793      	lsls	r3, r2, #30
 8003cd2:	680e      	ldr	r6, [r1, #0]
 8003cd4:	bf08      	it	eq
 8003cd6:	694b      	ldreq	r3, [r1, #20]
 8003cd8:	600f      	str	r7, [r1, #0]
 8003cda:	bf18      	it	ne
 8003cdc:	2300      	movne	r3, #0
 8003cde:	eba6 0807 	sub.w	r8, r6, r7
 8003ce2:	608b      	str	r3, [r1, #8]
 8003ce4:	f1b8 0f00 	cmp.w	r8, #0
 8003ce8:	dde9      	ble.n	8003cbe <__sflush_r+0xae>
 8003cea:	6a21      	ldr	r1, [r4, #32]
 8003cec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003cee:	4643      	mov	r3, r8
 8003cf0:	463a      	mov	r2, r7
 8003cf2:	4628      	mov	r0, r5
 8003cf4:	47b0      	blx	r6
 8003cf6:	2800      	cmp	r0, #0
 8003cf8:	dc08      	bgt.n	8003d0c <__sflush_r+0xfc>
 8003cfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003cfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d02:	81a3      	strh	r3, [r4, #12]
 8003d04:	f04f 30ff 	mov.w	r0, #4294967295
 8003d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d0c:	4407      	add	r7, r0
 8003d0e:	eba8 0800 	sub.w	r8, r8, r0
 8003d12:	e7e7      	b.n	8003ce4 <__sflush_r+0xd4>
 8003d14:	20400001 	.word	0x20400001

08003d18 <_fflush_r>:
 8003d18:	b538      	push	{r3, r4, r5, lr}
 8003d1a:	690b      	ldr	r3, [r1, #16]
 8003d1c:	4605      	mov	r5, r0
 8003d1e:	460c      	mov	r4, r1
 8003d20:	b913      	cbnz	r3, 8003d28 <_fflush_r+0x10>
 8003d22:	2500      	movs	r5, #0
 8003d24:	4628      	mov	r0, r5
 8003d26:	bd38      	pop	{r3, r4, r5, pc}
 8003d28:	b118      	cbz	r0, 8003d32 <_fflush_r+0x1a>
 8003d2a:	6a03      	ldr	r3, [r0, #32]
 8003d2c:	b90b      	cbnz	r3, 8003d32 <_fflush_r+0x1a>
 8003d2e:	f7ff f9af 	bl	8003090 <__sinit>
 8003d32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d0f3      	beq.n	8003d22 <_fflush_r+0xa>
 8003d3a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003d3c:	07d0      	lsls	r0, r2, #31
 8003d3e:	d404      	bmi.n	8003d4a <_fflush_r+0x32>
 8003d40:	0599      	lsls	r1, r3, #22
 8003d42:	d402      	bmi.n	8003d4a <_fflush_r+0x32>
 8003d44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003d46:	f7ff fb9a 	bl	800347e <__retarget_lock_acquire_recursive>
 8003d4a:	4628      	mov	r0, r5
 8003d4c:	4621      	mov	r1, r4
 8003d4e:	f7ff ff5f 	bl	8003c10 <__sflush_r>
 8003d52:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003d54:	07da      	lsls	r2, r3, #31
 8003d56:	4605      	mov	r5, r0
 8003d58:	d4e4      	bmi.n	8003d24 <_fflush_r+0xc>
 8003d5a:	89a3      	ldrh	r3, [r4, #12]
 8003d5c:	059b      	lsls	r3, r3, #22
 8003d5e:	d4e1      	bmi.n	8003d24 <_fflush_r+0xc>
 8003d60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003d62:	f7ff fb8d 	bl	8003480 <__retarget_lock_release_recursive>
 8003d66:	e7dd      	b.n	8003d24 <_fflush_r+0xc>

08003d68 <__swhatbuf_r>:
 8003d68:	b570      	push	{r4, r5, r6, lr}
 8003d6a:	460c      	mov	r4, r1
 8003d6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d70:	2900      	cmp	r1, #0
 8003d72:	b096      	sub	sp, #88	@ 0x58
 8003d74:	4615      	mov	r5, r2
 8003d76:	461e      	mov	r6, r3
 8003d78:	da0d      	bge.n	8003d96 <__swhatbuf_r+0x2e>
 8003d7a:	89a3      	ldrh	r3, [r4, #12]
 8003d7c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003d80:	f04f 0100 	mov.w	r1, #0
 8003d84:	bf14      	ite	ne
 8003d86:	2340      	movne	r3, #64	@ 0x40
 8003d88:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003d8c:	2000      	movs	r0, #0
 8003d8e:	6031      	str	r1, [r6, #0]
 8003d90:	602b      	str	r3, [r5, #0]
 8003d92:	b016      	add	sp, #88	@ 0x58
 8003d94:	bd70      	pop	{r4, r5, r6, pc}
 8003d96:	466a      	mov	r2, sp
 8003d98:	f000 f848 	bl	8003e2c <_fstat_r>
 8003d9c:	2800      	cmp	r0, #0
 8003d9e:	dbec      	blt.n	8003d7a <__swhatbuf_r+0x12>
 8003da0:	9901      	ldr	r1, [sp, #4]
 8003da2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003da6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003daa:	4259      	negs	r1, r3
 8003dac:	4159      	adcs	r1, r3
 8003dae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003db2:	e7eb      	b.n	8003d8c <__swhatbuf_r+0x24>

08003db4 <__smakebuf_r>:
 8003db4:	898b      	ldrh	r3, [r1, #12]
 8003db6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003db8:	079d      	lsls	r5, r3, #30
 8003dba:	4606      	mov	r6, r0
 8003dbc:	460c      	mov	r4, r1
 8003dbe:	d507      	bpl.n	8003dd0 <__smakebuf_r+0x1c>
 8003dc0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003dc4:	6023      	str	r3, [r4, #0]
 8003dc6:	6123      	str	r3, [r4, #16]
 8003dc8:	2301      	movs	r3, #1
 8003dca:	6163      	str	r3, [r4, #20]
 8003dcc:	b003      	add	sp, #12
 8003dce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003dd0:	ab01      	add	r3, sp, #4
 8003dd2:	466a      	mov	r2, sp
 8003dd4:	f7ff ffc8 	bl	8003d68 <__swhatbuf_r>
 8003dd8:	9f00      	ldr	r7, [sp, #0]
 8003dda:	4605      	mov	r5, r0
 8003ddc:	4639      	mov	r1, r7
 8003dde:	4630      	mov	r0, r6
 8003de0:	f7ff fbbc 	bl	800355c <_malloc_r>
 8003de4:	b948      	cbnz	r0, 8003dfa <__smakebuf_r+0x46>
 8003de6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003dea:	059a      	lsls	r2, r3, #22
 8003dec:	d4ee      	bmi.n	8003dcc <__smakebuf_r+0x18>
 8003dee:	f023 0303 	bic.w	r3, r3, #3
 8003df2:	f043 0302 	orr.w	r3, r3, #2
 8003df6:	81a3      	strh	r3, [r4, #12]
 8003df8:	e7e2      	b.n	8003dc0 <__smakebuf_r+0xc>
 8003dfa:	89a3      	ldrh	r3, [r4, #12]
 8003dfc:	6020      	str	r0, [r4, #0]
 8003dfe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e02:	81a3      	strh	r3, [r4, #12]
 8003e04:	9b01      	ldr	r3, [sp, #4]
 8003e06:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003e0a:	b15b      	cbz	r3, 8003e24 <__smakebuf_r+0x70>
 8003e0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e10:	4630      	mov	r0, r6
 8003e12:	f000 f81d 	bl	8003e50 <_isatty_r>
 8003e16:	b128      	cbz	r0, 8003e24 <__smakebuf_r+0x70>
 8003e18:	89a3      	ldrh	r3, [r4, #12]
 8003e1a:	f023 0303 	bic.w	r3, r3, #3
 8003e1e:	f043 0301 	orr.w	r3, r3, #1
 8003e22:	81a3      	strh	r3, [r4, #12]
 8003e24:	89a3      	ldrh	r3, [r4, #12]
 8003e26:	431d      	orrs	r5, r3
 8003e28:	81a5      	strh	r5, [r4, #12]
 8003e2a:	e7cf      	b.n	8003dcc <__smakebuf_r+0x18>

08003e2c <_fstat_r>:
 8003e2c:	b538      	push	{r3, r4, r5, lr}
 8003e2e:	4d07      	ldr	r5, [pc, #28]	@ (8003e4c <_fstat_r+0x20>)
 8003e30:	2300      	movs	r3, #0
 8003e32:	4604      	mov	r4, r0
 8003e34:	4608      	mov	r0, r1
 8003e36:	4611      	mov	r1, r2
 8003e38:	602b      	str	r3, [r5, #0]
 8003e3a:	f7fd f897 	bl	8000f6c <_fstat>
 8003e3e:	1c43      	adds	r3, r0, #1
 8003e40:	d102      	bne.n	8003e48 <_fstat_r+0x1c>
 8003e42:	682b      	ldr	r3, [r5, #0]
 8003e44:	b103      	cbz	r3, 8003e48 <_fstat_r+0x1c>
 8003e46:	6023      	str	r3, [r4, #0]
 8003e48:	bd38      	pop	{r3, r4, r5, pc}
 8003e4a:	bf00      	nop
 8003e4c:	20000268 	.word	0x20000268

08003e50 <_isatty_r>:
 8003e50:	b538      	push	{r3, r4, r5, lr}
 8003e52:	4d06      	ldr	r5, [pc, #24]	@ (8003e6c <_isatty_r+0x1c>)
 8003e54:	2300      	movs	r3, #0
 8003e56:	4604      	mov	r4, r0
 8003e58:	4608      	mov	r0, r1
 8003e5a:	602b      	str	r3, [r5, #0]
 8003e5c:	f7fd f896 	bl	8000f8c <_isatty>
 8003e60:	1c43      	adds	r3, r0, #1
 8003e62:	d102      	bne.n	8003e6a <_isatty_r+0x1a>
 8003e64:	682b      	ldr	r3, [r5, #0]
 8003e66:	b103      	cbz	r3, 8003e6a <_isatty_r+0x1a>
 8003e68:	6023      	str	r3, [r4, #0]
 8003e6a:	bd38      	pop	{r3, r4, r5, pc}
 8003e6c:	20000268 	.word	0x20000268

08003e70 <_sbrk_r>:
 8003e70:	b538      	push	{r3, r4, r5, lr}
 8003e72:	4d06      	ldr	r5, [pc, #24]	@ (8003e8c <_sbrk_r+0x1c>)
 8003e74:	2300      	movs	r3, #0
 8003e76:	4604      	mov	r4, r0
 8003e78:	4608      	mov	r0, r1
 8003e7a:	602b      	str	r3, [r5, #0]
 8003e7c:	f7fd f89e 	bl	8000fbc <_sbrk>
 8003e80:	1c43      	adds	r3, r0, #1
 8003e82:	d102      	bne.n	8003e8a <_sbrk_r+0x1a>
 8003e84:	682b      	ldr	r3, [r5, #0]
 8003e86:	b103      	cbz	r3, 8003e8a <_sbrk_r+0x1a>
 8003e88:	6023      	str	r3, [r4, #0]
 8003e8a:	bd38      	pop	{r3, r4, r5, pc}
 8003e8c:	20000268 	.word	0x20000268

08003e90 <_init>:
 8003e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e92:	bf00      	nop
 8003e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e96:	bc08      	pop	{r3}
 8003e98:	469e      	mov	lr, r3
 8003e9a:	4770      	bx	lr

08003e9c <_fini>:
 8003e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e9e:	bf00      	nop
 8003ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ea2:	bc08      	pop	{r3}
 8003ea4:	469e      	mov	lr, r3
 8003ea6:	4770      	bx	lr
